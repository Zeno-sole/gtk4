From: =?utf-8?b?Ik1hcmNvIFRyZXZpc2FuIChUcmV2acOxbyki?= <mail@3v1n0.net>
Date: Fri, 17 Mar 2023 20:08:30 +0100
Subject: gstreamer-player: Use GtkName Prefix to avoid issues if actual
 library is included

Origin: https://gitlab.gnome.org/3v1n0/gtk/-/commits/gst-player-subproject
Forwarded: not-needed
---
 modules/media/gtkgstmediafile.c                    |   50 +-
 modules/media/gtkgstpaintable.c                    |    8 +-
 .../gst/play/gstplay-media-info-private.h          |   30 +-
 .../gst/play/gstplay-media-info.c                  |  422 +++---
 .../gst/play/gstplay-media-info.h                  |  260 ++--
 .../gst/play/gstplay-message-private.h             |   36 +-
 .../gst/play/gstplay-signal-adapter.c              |  178 +--
 .../gst/play/gstplay-signal-adapter.h              |   40 +-
 .../gstreamer-player-1.0/gst/play/gstplay-types.h  |   18 +-
 .../play/gstplay-video-overlay-video-renderer.c    |  120 +-
 .../play/gstplay-video-overlay-video-renderer.h    |   58 +-
 .../gst/play/gstplay-video-renderer-private.h      |   10 +-
 .../gst/play/gstplay-video-renderer.c              |   14 +-
 .../gst/play/gstplay-video-renderer.h              |   28 +-
 .../gst/play/gstplay-visualization.c               |   68 +-
 .../gst/play/gstplay-visualization.h               |   34 +-
 .../gstreamer-player-1.0/gst/play/gstplay.c        | 1354 ++++++++++----------
 .../gstreamer-player-1.0/gst/play/gstplay.h        |  472 +++----
 .../gstreamer-player-1.0/gst/play/play-prelude.h   |   20 +-
 .../gstplayer-g-main-context-signal-dispatcher.c   |   76 +-
 .../gstplayer-g-main-context-signal-dispatcher.h   |   32 +-
 .../gst/player/gstplayer-media-info-private.h      |   84 +-
 .../gst/player/gstplayer-media-info.c              |  548 ++++----
 .../gst/player/gstplayer-media-info.h              |  258 ++--
 .../player/gstplayer-signal-dispatcher-private.h   |   10 +-
 .../gst/player/gstplayer-signal-dispatcher.c       |   14 +-
 .../gst/player/gstplayer-signal-dispatcher.h       |   30 +-
 .../gst/player/gstplayer-types.h                   |   10 +-
 .../gstplayer-video-overlay-video-renderer.c       |  124 +-
 .../gstplayer-video-overlay-video-renderer.h       |   56 +-
 .../gst/player/gstplayer-video-renderer-private.h  |   10 +-
 .../gst/player/gstplayer-video-renderer.c          |   14 +-
 .../gst/player/gstplayer-video-renderer.h          |   24 +-
 .../gst/player/gstplayer-visualization.c           |   68 +-
 .../gst/player/gstplayer-visualization.h           |   34 +-
 .../gstplayer-wrapped-video-renderer-private.h     |   28 +-
 .../gst/player/gstplayer-wrapped-video-renderer.c  |   62 +-
 .../gstreamer-player-1.0/gst/player/gstplayer.c    |  668 +++++-----
 .../gstreamer-player-1.0/gst/player/gstplayer.h    |  328 ++---
 .../gst/player/player-prelude.h                    |   20 +-
 40 files changed, 2859 insertions(+), 2859 deletions(-)

diff --git a/modules/media/gtkgstmediafile.c b/modules/media/gtkgstmediafile.c
index 5487bb0..8e956b7 100644
--- a/modules/media/gtkgstmediafile.c
+++ b/modules/media/gtkgstmediafile.c
@@ -29,7 +29,7 @@ struct _GtkGstMediaFile
 {
   GtkMediaFile parent_instance;
 
-  GstPlayer *player;
+  GtkGstPlayer *player;
   GdkPaintable *paintable;
 };
 
@@ -132,20 +132,20 @@ g_io_module_query (void)
 static void
 gtk_gst_media_file_ensure_prepared (GtkGstMediaFile *self)
 {
-  GstPlayerMediaInfo *media_info;
+  GtkGstPlayerMediaInfo *media_info;
 
   if (gtk_media_stream_is_prepared (GTK_MEDIA_STREAM (self)))
     return;
 
-  media_info = gst_player_get_media_info (self->player);
+  media_info = gtk_gst_player_get_media_info (self->player);
   if (media_info)
     {
-      GstClockTime duration = gst_player_media_info_get_duration (media_info);
+      GstClockTime duration = gtk_gst_player_media_info_get_duration (media_info);
 
       gtk_media_stream_stream_prepared (GTK_MEDIA_STREAM (self),
-                                        gst_player_media_info_get_audio_streams (media_info) != NULL,
-                                        gst_player_media_info_get_video_streams (media_info) != NULL,
-                                        gst_player_media_info_is_seekable (media_info),
+                                        gtk_gst_player_media_info_get_audio_streams (media_info) != NULL,
+                                        gtk_gst_player_media_info_get_video_streams (media_info) != NULL,
+                                        gtk_gst_player_media_info_is_seekable (media_info),
                                         duration == GST_CLOCK_TIME_NONE ? 0 : FROM_GST_TIME (duration));
 
       g_object_unref (media_info);
@@ -166,7 +166,7 @@ gtk_gst_media_file_ensure_prepared (GtkGstMediaFile *self)
 }
 
 static void
-gtk_gst_media_file_position_updated_cb (GstPlayer       *player,
+gtk_gst_media_file_position_updated_cb (GtkGstPlayer       *player,
                                         GstClockTime     time,
                                         GtkGstMediaFile *self)
 {
@@ -176,16 +176,16 @@ gtk_gst_media_file_position_updated_cb (GstPlayer       *player,
 }
 
 static void
-gtk_gst_media_file_media_info_updated_cb (GstPlayer          *player,
-                                          GstPlayerMediaInfo *media_info,
+gtk_gst_media_file_media_info_updated_cb (GtkGstPlayer          *player,
+                                          GtkGstPlayerMediaInfo *media_info,
                                           GtkGstMediaFile    *self)
 {
   /* clock_time == 0: https://gitlab.freedesktop.org/gstreamer/gst-plugins-bad/-/issues/1588
-   * GstPlayer's first media-info-updated comes with 0 duration
+   * GtkGstPlayer's first media-info-updated comes with 0 duration
    *
    * clock_time == -1: Seen on loading an audio-only ogg
    */
-  GstClockTime clock_time = gst_player_media_info_get_duration (media_info);
+  GstClockTime clock_time = gtk_gst_player_media_info_get_duration (media_info);
   if (clock_time == 0 || clock_time == -1)
     return;
 
@@ -193,7 +193,7 @@ gtk_gst_media_file_media_info_updated_cb (GstPlayer          *player,
 }
 
 static void
-gtk_gst_media_file_seek_done_cb (GstPlayer       *player,
+gtk_gst_media_file_seek_done_cb (GtkGstPlayer       *player,
                                  GstClockTime     time,
                                  GtkGstMediaFile *self)
 {
@@ -204,7 +204,7 @@ gtk_gst_media_file_seek_done_cb (GstPlayer       *player,
 }
 
 static void
-gtk_gst_media_file_error_cb (GstPlayer       *player,
+gtk_gst_media_file_error_cb (GtkGstPlayer       *player,
                              GError          *error,
                              GtkGstMediaFile *self)
 {
@@ -216,7 +216,7 @@ gtk_gst_media_file_error_cb (GstPlayer       *player,
 }
 
 static void
-gtk_gst_media_file_end_of_stream_cb (GstPlayer       *player,
+gtk_gst_media_file_end_of_stream_cb (GtkGstPlayer       *player,
                                      GtkGstMediaFile *self)
 {
   gtk_gst_media_file_ensure_prepared (self);
@@ -226,7 +226,7 @@ gtk_gst_media_file_end_of_stream_cb (GstPlayer       *player,
 
   if (gtk_media_stream_get_loop (GTK_MEDIA_STREAM (self)))
     {
-      gst_player_seek (self->player, 0);
+      gtk_gst_player_seek (self->player, 0);
       return;
     }
 
@@ -256,8 +256,8 @@ gtk_gst_media_file_create_player (GtkGstMediaFile *file)
   if (self->player != NULL)
     return;
 
-  self->player = gst_player_new (GST_PLAYER_VIDEO_RENDERER (g_object_ref (self->paintable)),
-                                 gst_player_g_main_context_signal_dispatcher_new (NULL));
+  self->player = gtk_gst_player_new (GTK_GST_PLAYER_VIDEO_RENDERER (g_object_ref (self->paintable)),
+                                 gtk_gst_player_g_main_context_signal_dispatcher_new (NULL));
   g_signal_connect (self->player, "media-info-updated", G_CALLBACK (gtk_gst_media_file_media_info_updated_cb), self);
   g_signal_connect (self->player, "position-updated", G_CALLBACK (gtk_gst_media_file_position_updated_cb), self);
   g_signal_connect (self->player, "end-of-stream", G_CALLBACK (gtk_gst_media_file_end_of_stream_cb), self);
@@ -280,7 +280,7 @@ gtk_gst_media_file_open (GtkMediaFile *media_file)
       /* XXX: This is technically incorrect because GFile uris aren't real uris */
       char *uri = g_file_get_uri (file);
 
-      gst_player_set_uri (self->player, uri);
+      gtk_gst_player_set_uri (self->player, uri);
 
       g_free (uri);
     }
@@ -290,7 +290,7 @@ gtk_gst_media_file_open (GtkMediaFile *media_file)
       g_assert_not_reached ();
     }
 
-  gst_player_pause (self->player);
+  gtk_gst_player_pause (self->player);
 }
 
 static void
@@ -309,7 +309,7 @@ gtk_gst_media_file_play (GtkMediaStream *stream)
   if (self->player == NULL)
     return FALSE;
 
-  gst_player_play (self->player);
+  gtk_gst_player_play (self->player);
 
   return TRUE;
 }
@@ -319,7 +319,7 @@ gtk_gst_media_file_pause (GtkMediaStream *stream)
 {
   GtkGstMediaFile *self = GTK_GST_MEDIA_FILE (stream);
 
-  gst_player_pause (self->player);
+  gtk_gst_player_pause (self->player);
 }
 
 static void
@@ -328,7 +328,7 @@ gtk_gst_media_file_seek (GtkMediaStream *stream,
 {
   GtkGstMediaFile *self = GTK_GST_MEDIA_FILE (stream);
 
-  gst_player_seek (self->player, TO_GST_TIME (timestamp));
+  gtk_gst_player_seek (self->player, TO_GST_TIME (timestamp));
 }
 
 static void
@@ -338,8 +338,8 @@ gtk_gst_media_file_update_audio (GtkMediaStream *stream,
 {
   GtkGstMediaFile *self = GTK_GST_MEDIA_FILE (stream);
 
-  gst_player_set_mute (self->player, muted);
-  gst_player_set_volume (self->player, volume * volume * volume);
+  gtk_gst_player_set_mute (self->player, muted);
+  gtk_gst_player_set_volume (self->player, volume * volume * volume);
 }
 
 static void
diff --git a/modules/media/gtkgstpaintable.c b/modules/media/gtkgstpaintable.c
index 8abf4a2..835e207 100644
--- a/modules/media/gtkgstpaintable.c
+++ b/modules/media/gtkgstpaintable.c
@@ -111,8 +111,8 @@ gtk_gst_paintable_paintable_init (GdkPaintableInterface *iface)
 }
 
 static GstElement *
-gtk_gst_paintable_video_renderer_create_video_sink (GstPlayerVideoRenderer *renderer,
-                                                    GstPlayer              *player)
+gtk_gst_paintable_video_renderer_create_video_sink (GtkGstPlayerVideoRenderer *renderer,
+                                                    GtkGstPlayer              *player)
 {
   GtkGstPaintable *self = GTK_GST_PAINTABLE (renderer);
   GstElement *sink;
@@ -155,7 +155,7 @@ gtk_gst_paintable_video_renderer_create_video_sink (GstPlayerVideoRenderer *rend
 }
 
 static void
-gtk_gst_paintable_video_renderer_init (GstPlayerVideoRendererInterface *iface)
+gtk_gst_paintable_video_renderer_init (GtkGstPlayerVideoRendererInterface *iface)
 {
   iface->create_video_sink = gtk_gst_paintable_video_renderer_create_video_sink;
 }
@@ -170,7 +170,7 @@ static void
 gtk_gst_paintable_dispose (GObject *object)
 {
   GtkGstPaintable *self = GTK_GST_PAINTABLE (object);
-  
+
   g_clear_object (&self->image);
 
   G_OBJECT_CLASS (gtk_gst_paintable_parent_class)->dispose (object);
diff --git a/subprojects/gstreamer-player-1.0/gst/play/gstplay-media-info-private.h b/subprojects/gstreamer-player-1.0/gst/play/gstplay-media-info-private.h
index a6ec7ee..24b4eb5 100644
--- a/subprojects/gstreamer-player-1.0/gst/play/gstplay-media-info-private.h
+++ b/subprojects/gstreamer-player-1.0/gst/play/gstplay-media-info-private.h
@@ -20,8 +20,8 @@
 
 #include "gstplay-media-info.h"
 
-#ifndef __GST_PLAY_MEDIA_INFO_PRIVATE_H__
-#define __GST_PLAY_MEDIA_INFO_PRIVATE_H__
+#ifndef __GTL_GST_PLAY_MEDIA_INFO_PRIVATE_H__
+#define __GTL_GST_PLAY_MEDIA_INFO_PRIVATE_H__
 
 struct _GstPlayStreamInfo
 {
@@ -42,19 +42,19 @@ struct _GstPlayStreamInfoClass
 
 struct _GstPlaySubtitleInfo
 {
-  GstPlayStreamInfo  parent;
+  GtkGstPlayStreamInfo  parent;
 
   gchar *language;
 };
 
 struct _GstPlaySubtitleInfoClass
 {
-  GstPlayStreamInfoClass parent_class;
+  GtkGstPlayStreamInfoClass parent_class;
 };
 
 struct _GstPlayAudioInfo
 {
-  GstPlayStreamInfo  parent;
+  GtkGstPlayStreamInfo  parent;
 
   gint channels;
   gint sample_rate;
@@ -67,12 +67,12 @@ struct _GstPlayAudioInfo
 
 struct _GstPlayAudioInfoClass
 {
-  GstPlayStreamInfoClass parent_class;
+  GtkGstPlayStreamInfoClass parent_class;
 };
 
 struct _GstPlayVideoInfo
 {
-  GstPlayStreamInfo  parent;
+  GtkGstPlayStreamInfo  parent;
 
   gint width;
   gint height;
@@ -87,7 +87,7 @@ struct _GstPlayVideoInfo
 
 struct _GstPlayVideoInfoClass
 {
-  GstPlayStreamInfoClass parent_class;
+  GtkGstPlayStreamInfoClass parent_class;
 };
 
 struct _GstPlayMediaInfo
@@ -114,13 +114,13 @@ struct _GstPlayMediaInfoClass
   GObjectClass parent_class;
 };
 
-G_GNUC_INTERNAL GstPlayMediaInfo*   gst_play_media_info_new
+G_GNUC_INTERNAL GtkGstPlayMediaInfo*   gtk_gst_play_media_info_new
                                       (const gchar *uri);
-G_GNUC_INTERNAL GstPlayMediaInfo*   gst_play_media_info_copy
-                                      (GstPlayMediaInfo *ref);
-G_GNUC_INTERNAL GstPlayStreamInfo*  gst_play_stream_info_new
+G_GNUC_INTERNAL GtkGstPlayMediaInfo*   gtk_gst_play_media_info_copy
+                                      (GtkGstPlayMediaInfo *ref);
+G_GNUC_INTERNAL GtkGstPlayStreamInfo*  gtk_gst_play_stream_info_new
                                       (gint stream_index, GType type);
-G_GNUC_INTERNAL GstPlayStreamInfo*  gst_play_stream_info_copy
-                                      (GstPlayStreamInfo *ref);
+G_GNUC_INTERNAL GtkGstPlayStreamInfo*  gtk_gst_play_stream_info_copy
+                                      (GtkGstPlayStreamInfo *ref);
 
-#endif /* __GST_PLAY_MEDIA_INFO_PRIVATE_H__ */
+#endif /* __GTL_GST_PLAY_MEDIA_INFO_PRIVATE_H__ */
diff --git a/subprojects/gstreamer-player-1.0/gst/play/gstplay-media-info.c b/subprojects/gstreamer-player-1.0/gst/play/gstplay-media-info.c
index 65c7333..808ea98 100644
--- a/subprojects/gstreamer-player-1.0/gst/play/gstplay-media-info.c
+++ b/subprojects/gstreamer-player-1.0/gst/play/gstplay-media-info.c
@@ -20,7 +20,7 @@
 
 /**
  * SECTION:gstplay-mediainfo
- * @title: GstPlayMediaInfo
+ * @title: GtkGstPlayMediaInfo
  * @short_description: Play Media Information
  *
  */
@@ -33,18 +33,18 @@
 #include "gstplay-media-info-private.h"
 
 /* Per-stream information */
-G_DEFINE_ABSTRACT_TYPE (GstPlayStreamInfo, gst_play_stream_info, G_TYPE_OBJECT);
+G_DEFINE_ABSTRACT_TYPE (GtkGstPlayStreamInfo, gtk_gst_play_stream_info, G_TYPE_OBJECT);
 
 static void
-gst_play_stream_info_init (GstPlayStreamInfo * sinfo)
+gtk_gst_play_stream_info_init (GtkGstPlayStreamInfo * sinfo)
 {
   sinfo->stream_index = -1;
 }
 
 static void
-gst_play_stream_info_finalize (GObject * object)
+gtk_gst_play_stream_info_finalize (GObject * object)
 {
-  GstPlayStreamInfo *sinfo = GST_PLAY_STREAM_INFO (object);
+  GtkGstPlayStreamInfo *sinfo = GTL_GST_PLAY_STREAM_INFO (object);
 
   g_free (sinfo->codec);
   g_free (sinfo->stream_id);
@@ -55,29 +55,29 @@ gst_play_stream_info_finalize (GObject * object)
   if (sinfo->tags)
     gst_tag_list_unref (sinfo->tags);
 
-  G_OBJECT_CLASS (gst_play_stream_info_parent_class)->finalize (object);
+  G_OBJECT_CLASS (gtk_gst_play_stream_info_parent_class)->finalize (object);
 }
 
 static void
-gst_play_stream_info_class_init (GstPlayStreamInfoClass * klass)
+gtk_gst_play_stream_info_class_init (GtkGstPlayStreamInfoClass * klass)
 {
   GObjectClass *gobject_class = (GObjectClass *) klass;
 
-  gobject_class->finalize = gst_play_stream_info_finalize;
+  gobject_class->finalize = gtk_gst_play_stream_info_finalize;
 }
 
 /**
- * gst_play_stream_info_get_index:
- * @info: a #GstPlayStreamInfo
+ * gtk_gst_play_stream_info_get_index:
+ * @info: a #GtkGstPlayStreamInfo
  *
- * Function to get stream index from #GstPlayStreamInfo instance or -1 if
+ * Function to get stream index from #GtkGstPlayStreamInfo instance or -1 if
  * unknown.
  *
  * Returns: the stream index of this stream.
  * Since: 1.20
  */
 gint
-gst_play_stream_info_get_index (const GstPlayStreamInfo * info)
+gtk_gst_play_stream_info_get_index (const GtkGstPlayStreamInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_STREAM_INFO (info), -1);
 
@@ -85,8 +85,8 @@ gst_play_stream_info_get_index (const GstPlayStreamInfo * info)
 }
 
 /**
- * gst_play_stream_info_get_stream_type:
- * @info: a #GstPlayStreamInfo
+ * gtk_gst_play_stream_info_get_stream_type:
+ * @info: a #GtkGstPlayStreamInfo
  *
  * Function to return human readable name for the stream type
  * of the given @info (ex: "audio", "video", "subtitle")
@@ -95,7 +95,7 @@ gst_play_stream_info_get_index (const GstPlayStreamInfo * info)
  * Since: 1.20
  */
 const gchar *
-gst_play_stream_info_get_stream_type (const GstPlayStreamInfo * info)
+gtk_gst_play_stream_info_get_stream_type (const GtkGstPlayStreamInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_STREAM_INFO (info), NULL);
 
@@ -108,14 +108,14 @@ gst_play_stream_info_get_stream_type (const GstPlayStreamInfo * info)
 }
 
 /**
- * gst_play_stream_info_get_tags:
- * @info: a #GstPlayStreamInfo
+ * gtk_gst_play_stream_info_get_tags:
+ * @info: a #GtkGstPlayStreamInfo
  *
  * Returns: (transfer none) (nullable): the tags contained in this stream.
  * Since: 1.20
  */
 GstTagList *
-gst_play_stream_info_get_tags (const GstPlayStreamInfo * info)
+gtk_gst_play_stream_info_get_tags (const GtkGstPlayStreamInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_STREAM_INFO (info), NULL);
 
@@ -123,16 +123,16 @@ gst_play_stream_info_get_tags (const GstPlayStreamInfo * info)
 }
 
 /**
- * gst_play_stream_info_get_codec:
- * @info: a #GstPlayStreamInfo
+ * gtk_gst_play_stream_info_get_codec:
+ * @info: a #GtkGstPlayStreamInfo
  *
- * A string describing codec used in #GstPlayStreamInfo.
+ * A string describing codec used in #GtkGstPlayStreamInfo.
  *
  * Returns: (nullable): codec string or %NULL on unknown.
  * Since: 1.20
  */
 const gchar *
-gst_play_stream_info_get_codec (const GstPlayStreamInfo * info)
+gtk_gst_play_stream_info_get_codec (const GtkGstPlayStreamInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_STREAM_INFO (info), NULL);
 
@@ -140,15 +140,15 @@ gst_play_stream_info_get_codec (const GstPlayStreamInfo * info)
 }
 
 /**
- * gst_play_stream_info_get_caps:
- * @info: a #GstPlayStreamInfo
+ * gtk_gst_play_stream_info_get_caps:
+ * @info: a #GtkGstPlayStreamInfo
  *
  * Returns: (nullable) (transfer none): the #GstCaps of the stream or %NULL if
  * unknown.
  * Since: 1.20
  */
 GstCaps *
-gst_play_stream_info_get_caps (const GstPlayStreamInfo * info)
+gtk_gst_play_stream_info_get_caps (const GtkGstPlayStreamInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_STREAM_INFO (info), NULL);
 
@@ -156,11 +156,11 @@ gst_play_stream_info_get_caps (const GstPlayStreamInfo * info)
 }
 
 /* Video information */
-G_DEFINE_TYPE (GstPlayVideoInfo, gst_play_video_info,
+G_DEFINE_TYPE (GtkGstPlayVideoInfo, gtk_gst_play_video_info,
     GST_TYPE_PLAY_STREAM_INFO);
 
 static void
-gst_play_video_info_init (GstPlayVideoInfo * info)
+gtk_gst_play_video_info_init (GtkGstPlayVideoInfo * info)
 {
   info->width = -1;
   info->height = -1;
@@ -171,20 +171,20 @@ gst_play_video_info_init (GstPlayVideoInfo * info)
 }
 
 static void
-gst_play_video_info_class_init (G_GNUC_UNUSED GstPlayVideoInfoClass * klass)
+gtk_gst_play_video_info_class_init (G_GNUC_UNUSED GtkGstPlayVideoInfoClass * klass)
 {
   /* nothing to do here */
 }
 
 /**
- * gst_play_video_info_get_width:
- * @info: a #GstPlayVideoInfo
+ * gtk_gst_play_video_info_get_width:
+ * @info: a #GtkGstPlayVideoInfo
  *
- * Returns: the width of video in #GstPlayVideoInfo or -1 if unknown.
+ * Returns: the width of video in #GtkGstPlayVideoInfo or -1 if unknown.
  * Since: 1.20
  */
 gint
-gst_play_video_info_get_width (const GstPlayVideoInfo * info)
+gtk_gst_play_video_info_get_width (const GtkGstPlayVideoInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_VIDEO_INFO (info), -1);
 
@@ -192,14 +192,14 @@ gst_play_video_info_get_width (const GstPlayVideoInfo * info)
 }
 
 /**
- * gst_play_video_info_get_height:
- * @info: a #GstPlayVideoInfo
+ * gtk_gst_play_video_info_get_height:
+ * @info: a #GtkGstPlayVideoInfo
  *
- * Returns: the height of video in #GstPlayVideoInfo or -1 if unknown.
+ * Returns: the height of video in #GtkGstPlayVideoInfo or -1 if unknown.
  * Since: 1.20
  */
 gint
-gst_play_video_info_get_height (const GstPlayVideoInfo * info)
+gtk_gst_play_video_info_get_height (const GtkGstPlayVideoInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_VIDEO_INFO (info), -1);
 
@@ -207,15 +207,15 @@ gst_play_video_info_get_height (const GstPlayVideoInfo * info)
 }
 
 /**
- * gst_play_video_info_get_framerate:
- * @info: a #GstPlayVideoInfo
+ * gtk_gst_play_video_info_get_framerate:
+ * @info: a #GtkGstPlayVideoInfo
  * @fps_n: (out): Numerator of frame rate
  * @fps_d: (out): Denominator of frame rate
  *
  * Since: 1.20
  */
 void
-gst_play_video_info_get_framerate (const GstPlayVideoInfo * info,
+gtk_gst_play_video_info_get_framerate (const GtkGstPlayVideoInfo * info,
     gint * fps_n, gint * fps_d)
 {
   g_return_if_fail (GST_IS_PLAY_VIDEO_INFO (info));
@@ -225,8 +225,8 @@ gst_play_video_info_get_framerate (const GstPlayVideoInfo * info,
 }
 
 /**
- * gst_play_video_info_get_pixel_aspect_ratio:
- * @info: a #GstPlayVideoInfo
+ * gtk_gst_play_video_info_get_pixel_aspect_ratio:
+ * @info: a #GtkGstPlayVideoInfo
  * @par_n: (out): numerator
  * @par_d: (out): denominator
  *
@@ -235,7 +235,7 @@ gst_play_video_info_get_framerate (const GstPlayVideoInfo * info,
  * Since: 1.20
  */
 void
-gst_play_video_info_get_pixel_aspect_ratio (const GstPlayVideoInfo * info,
+gtk_gst_play_video_info_get_pixel_aspect_ratio (const GtkGstPlayVideoInfo * info,
     guint * par_n, guint * par_d)
 {
   g_return_if_fail (GST_IS_PLAY_VIDEO_INFO (info));
@@ -245,14 +245,14 @@ gst_play_video_info_get_pixel_aspect_ratio (const GstPlayVideoInfo * info,
 }
 
 /**
- * gst_play_video_info_get_bitrate:
- * @info: a #GstPlayVideoInfo
+ * gtk_gst_play_video_info_get_bitrate:
+ * @info: a #GtkGstPlayVideoInfo
  *
- * Returns: the current bitrate of video in #GstPlayVideoInfo or -1 if unknown.
+ * Returns: the current bitrate of video in #GtkGstPlayVideoInfo or -1 if unknown.
  * Since: 1.20
  */
 gint
-gst_play_video_info_get_bitrate (const GstPlayVideoInfo * info)
+gtk_gst_play_video_info_get_bitrate (const GtkGstPlayVideoInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_VIDEO_INFO (info), -1);
 
@@ -260,14 +260,14 @@ gst_play_video_info_get_bitrate (const GstPlayVideoInfo * info)
 }
 
 /**
- * gst_play_video_info_get_max_bitrate:
- * @info: a #GstPlayVideoInfo
+ * gtk_gst_play_video_info_get_max_bitrate:
+ * @info: a #GtkGstPlayVideoInfo
  *
- * Returns: the maximum bitrate of video in #GstPlayVideoInfo or -1 if unknown.
+ * Returns: the maximum bitrate of video in #GtkGstPlayVideoInfo or -1 if unknown.
  * Since: 1.20
  */
 gint
-gst_play_video_info_get_max_bitrate (const GstPlayVideoInfo * info)
+gtk_gst_play_video_info_get_max_bitrate (const GtkGstPlayVideoInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_VIDEO_INFO (info), -1);
 
@@ -275,11 +275,11 @@ gst_play_video_info_get_max_bitrate (const GstPlayVideoInfo * info)
 }
 
 /* Audio information */
-G_DEFINE_TYPE (GstPlayAudioInfo, gst_play_audio_info,
+G_DEFINE_TYPE (GtkGstPlayAudioInfo, gtk_gst_play_audio_info,
     GST_TYPE_PLAY_STREAM_INFO);
 
 static void
-gst_play_audio_info_init (GstPlayAudioInfo * info)
+gtk_gst_play_audio_info_init (GtkGstPlayAudioInfo * info)
 {
   info->channels = 0;
   info->sample_rate = 0;
@@ -288,32 +288,32 @@ gst_play_audio_info_init (GstPlayAudioInfo * info)
 }
 
 static void
-gst_play_audio_info_finalize (GObject * object)
+gtk_gst_play_audio_info_finalize (GObject * object)
 {
-  GstPlayAudioInfo *info = GST_PLAY_AUDIO_INFO (object);
+  GtkGstPlayAudioInfo *info = GTL_GST_PLAY_AUDIO_INFO (object);
 
   g_free (info->language);
 
-  G_OBJECT_CLASS (gst_play_audio_info_parent_class)->finalize (object);
+  G_OBJECT_CLASS (gtk_gst_play_audio_info_parent_class)->finalize (object);
 }
 
 static void
-gst_play_audio_info_class_init (GstPlayAudioInfoClass * klass)
+gtk_gst_play_audio_info_class_init (GtkGstPlayAudioInfoClass * klass)
 {
   GObjectClass *gobject_class = (GObjectClass *) klass;
 
-  gobject_class->finalize = gst_play_audio_info_finalize;
+  gobject_class->finalize = gtk_gst_play_audio_info_finalize;
 }
 
 /**
- * gst_play_audio_info_get_language:
- * @info: a #GstPlayAudioInfo
+ * gtk_gst_play_audio_info_get_language:
+ * @info: a #GtkGstPlayAudioInfo
  *
  * Returns: (nullable): the language of the stream, or %NULL if unknown.
  * Since: 1.20
  */
 const gchar *
-gst_play_audio_info_get_language (const GstPlayAudioInfo * info)
+gtk_gst_play_audio_info_get_language (const GtkGstPlayAudioInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_AUDIO_INFO (info), NULL);
 
@@ -321,14 +321,14 @@ gst_play_audio_info_get_language (const GstPlayAudioInfo * info)
 }
 
 /**
- * gst_play_audio_info_get_channels:
- * @info: a #GstPlayAudioInfo
+ * gtk_gst_play_audio_info_get_channels:
+ * @info: a #GtkGstPlayAudioInfo
  *
- * Returns: the number of audio channels in #GstPlayAudioInfo or 0 if unknown.
+ * Returns: the number of audio channels in #GtkGstPlayAudioInfo or 0 if unknown.
  * Since: 1.20
  */
 gint
-gst_play_audio_info_get_channels (const GstPlayAudioInfo * info)
+gtk_gst_play_audio_info_get_channels (const GtkGstPlayAudioInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_AUDIO_INFO (info), 0);
 
@@ -336,14 +336,14 @@ gst_play_audio_info_get_channels (const GstPlayAudioInfo * info)
 }
 
 /**
- * gst_play_audio_info_get_sample_rate:
- * @info: a #GstPlayAudioInfo
+ * gtk_gst_play_audio_info_get_sample_rate:
+ * @info: a #GtkGstPlayAudioInfo
  *
- * Returns: the audio sample rate in #GstPlayAudioInfo or 0 if unknown.
+ * Returns: the audio sample rate in #GtkGstPlayAudioInfo or 0 if unknown.
  * Since: 1.20
  */
 gint
-gst_play_audio_info_get_sample_rate (const GstPlayAudioInfo * info)
+gtk_gst_play_audio_info_get_sample_rate (const GtkGstPlayAudioInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_AUDIO_INFO (info), 0);
 
@@ -351,14 +351,14 @@ gst_play_audio_info_get_sample_rate (const GstPlayAudioInfo * info)
 }
 
 /**
- * gst_play_audio_info_get_bitrate:
- * @info: a #GstPlayAudioInfo
+ * gtk_gst_play_audio_info_get_bitrate:
+ * @info: a #GtkGstPlayAudioInfo
  *
- * Returns: the audio bitrate in #GstPlayAudioInfo or -1 if unknown.
+ * Returns: the audio bitrate in #GtkGstPlayAudioInfo or -1 if unknown.
  * Since: 1.20
  */
 gint
-gst_play_audio_info_get_bitrate (const GstPlayAudioInfo * info)
+gtk_gst_play_audio_info_get_bitrate (const GtkGstPlayAudioInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_AUDIO_INFO (info), -1);
 
@@ -366,14 +366,14 @@ gst_play_audio_info_get_bitrate (const GstPlayAudioInfo * info)
 }
 
 /**
- * gst_play_audio_info_get_max_bitrate:
- * @info: a #GstPlayAudioInfo
+ * gtk_gst_play_audio_info_get_max_bitrate:
+ * @info: a #GtkGstPlayAudioInfo
  *
- * Returns: the audio maximum bitrate in #GstPlayAudioInfo or -1 if unknown.
+ * Returns: the audio maximum bitrate in #GtkGstPlayAudioInfo or -1 if unknown.
  * Since: 1.20
  */
 gint
-gst_play_audio_info_get_max_bitrate (const GstPlayAudioInfo * info)
+gtk_gst_play_audio_info_get_max_bitrate (const GtkGstPlayAudioInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_AUDIO_INFO (info), -1);
 
@@ -381,42 +381,42 @@ gst_play_audio_info_get_max_bitrate (const GstPlayAudioInfo * info)
 }
 
 /* Subtitle information */
-G_DEFINE_TYPE (GstPlaySubtitleInfo, gst_play_subtitle_info,
+G_DEFINE_TYPE (GtkGstPlaySubtitleInfo, gtk_gst_play_subtitle_info,
     GST_TYPE_PLAY_STREAM_INFO);
 
 static void
-gst_play_subtitle_info_init (G_GNUC_UNUSED GstPlaySubtitleInfo * info)
+gtk_gst_play_subtitle_info_init (G_GNUC_UNUSED GtkGstPlaySubtitleInfo * info)
 {
   /* nothing to do */
 }
 
 static void
-gst_play_subtitle_info_finalize (GObject * object)
+gtk_gst_play_subtitle_info_finalize (GObject * object)
 {
-  GstPlaySubtitleInfo *info = GST_PLAY_SUBTITLE_INFO (object);
+  GtkGstPlaySubtitleInfo *info = GTL_GST_PLAY_SUBTITLE_INFO (object);
 
   g_free (info->language);
 
-  G_OBJECT_CLASS (gst_play_subtitle_info_parent_class)->finalize (object);
+  G_OBJECT_CLASS (gtk_gst_play_subtitle_info_parent_class)->finalize (object);
 }
 
 static void
-gst_play_subtitle_info_class_init (GstPlaySubtitleInfoClass * klass)
+gtk_gst_play_subtitle_info_class_init (GtkGstPlaySubtitleInfoClass * klass)
 {
   GObjectClass *gobject_class = (GObjectClass *) klass;
 
-  gobject_class->finalize = gst_play_subtitle_info_finalize;
+  gobject_class->finalize = gtk_gst_play_subtitle_info_finalize;
 }
 
 /**
- * gst_play_subtitle_info_get_language:
- * @info: a #GstPlaySubtitleInfo
+ * gtk_gst_play_subtitle_info_get_language:
+ * @info: a #GtkGstPlaySubtitleInfo
  *
  * Returns: (nullable): the language of the stream, or %NULL if unknown.
  * Since: 1.20
  */
 const gchar *
-gst_play_subtitle_info_get_language (const GstPlaySubtitleInfo * info)
+gtk_gst_play_subtitle_info_get_language (const GtkGstPlaySubtitleInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_SUBTITLE_INFO (info), NULL);
 
@@ -424,10 +424,10 @@ gst_play_subtitle_info_get_language (const GstPlaySubtitleInfo * info)
 }
 
 /* Global media information */
-G_DEFINE_TYPE (GstPlayMediaInfo, gst_play_media_info, G_TYPE_OBJECT);
+G_DEFINE_TYPE (GtkGstPlayMediaInfo, gtk_gst_play_media_info, G_TYPE_OBJECT);
 
 static void
-gst_play_media_info_init (GstPlayMediaInfo * info)
+gtk_gst_play_media_info_init (GtkGstPlayMediaInfo * info)
 {
   info->duration = -1;
   info->is_live = FALSE;
@@ -435,9 +435,9 @@ gst_play_media_info_init (GstPlayMediaInfo * info)
 }
 
 static void
-gst_play_media_info_finalize (GObject * object)
+gtk_gst_play_media_info_finalize (GObject * object)
 {
-  GstPlayMediaInfo *info = GST_PLAY_MEDIA_INFO (object);
+  GtkGstPlayMediaInfo *info = GTL_GST_PLAY_MEDIA_INFO (object);
 
   g_free (info->uri);
 
@@ -463,41 +463,41 @@ gst_play_media_info_finalize (GObject * object)
   if (info->stream_list)
     g_list_free_full (info->stream_list, g_object_unref);
 
-  G_OBJECT_CLASS (gst_play_media_info_parent_class)->finalize (object);
+  G_OBJECT_CLASS (gtk_gst_play_media_info_parent_class)->finalize (object);
 }
 
 static void
-gst_play_media_info_class_init (GstPlayMediaInfoClass * klass)
+gtk_gst_play_media_info_class_init (GtkGstPlayMediaInfoClass * klass)
 {
   GObjectClass *oclass = (GObjectClass *) klass;
 
-  oclass->finalize = gst_play_media_info_finalize;
+  oclass->finalize = gtk_gst_play_media_info_finalize;
 }
 
-static GstPlayVideoInfo *
-gst_play_video_info_new (void)
+static GtkGstPlayVideoInfo *
+gtk_gst_play_video_info_new (void)
 {
   return g_object_new (GST_TYPE_PLAY_VIDEO_INFO, NULL);
 }
 
-static GstPlayAudioInfo *
-gst_play_audio_info_new (void)
+static GtkGstPlayAudioInfo *
+gtk_gst_play_audio_info_new (void)
 {
   return g_object_new (GST_TYPE_PLAY_AUDIO_INFO, NULL);
 }
 
-static GstPlaySubtitleInfo *
-gst_play_subtitle_info_new (void)
+static GtkGstPlaySubtitleInfo *
+gtk_gst_play_subtitle_info_new (void)
 {
   return g_object_new (GST_TYPE_PLAY_SUBTITLE_INFO, NULL);
 }
 
-static GstPlayStreamInfo *
-gst_play_video_info_copy (GstPlayVideoInfo * ref)
+static GtkGstPlayStreamInfo *
+gtk_gst_play_video_info_copy (GtkGstPlayVideoInfo * ref)
 {
-  GstPlayVideoInfo *ret;
+  GtkGstPlayVideoInfo *ret;
 
-  ret = gst_play_video_info_new ();
+  ret = gtk_gst_play_video_info_new ();
 
   ret->width = ref->width;
   ret->height = ref->height;
@@ -508,15 +508,15 @@ gst_play_video_info_copy (GstPlayVideoInfo * ref)
   ret->bitrate = ref->bitrate;
   ret->max_bitrate = ref->max_bitrate;
 
-  return (GstPlayStreamInfo *) ret;
+  return (GtkGstPlayStreamInfo *) ret;
 }
 
-static GstPlayStreamInfo *
-gst_play_audio_info_copy (GstPlayAudioInfo * ref)
+static GtkGstPlayStreamInfo *
+gtk_gst_play_audio_info_copy (GtkGstPlayAudioInfo * ref)
 {
-  GstPlayAudioInfo *ret;
+  GtkGstPlayAudioInfo *ret;
 
-  ret = gst_play_audio_info_new ();
+  ret = gtk_gst_play_audio_info_new ();
 
   ret->sample_rate = ref->sample_rate;
   ret->channels = ref->channels;
@@ -526,35 +526,35 @@ gst_play_audio_info_copy (GstPlayAudioInfo * ref)
   if (ref->language)
     ret->language = g_strdup (ref->language);
 
-  return (GstPlayStreamInfo *) ret;
+  return (GtkGstPlayStreamInfo *) ret;
 }
 
-static GstPlayStreamInfo *
-gst_play_subtitle_info_copy (GstPlaySubtitleInfo * ref)
+static GtkGstPlayStreamInfo *
+gtk_gst_play_subtitle_info_copy (GtkGstPlaySubtitleInfo * ref)
 {
-  GstPlaySubtitleInfo *ret;
+  GtkGstPlaySubtitleInfo *ret;
 
-  ret = gst_play_subtitle_info_new ();
+  ret = gtk_gst_play_subtitle_info_new ();
   if (ref->language)
     ret->language = g_strdup (ref->language);
 
-  return (GstPlayStreamInfo *) ret;
+  return (GtkGstPlayStreamInfo *) ret;
 }
 
-GstPlayStreamInfo *
-gst_play_stream_info_copy (GstPlayStreamInfo * ref)
+GtkGstPlayStreamInfo *
+gtk_gst_play_stream_info_copy (GtkGstPlayStreamInfo * ref)
 {
-  GstPlayStreamInfo *info = NULL;
+  GtkGstPlayStreamInfo *info = NULL;
 
   if (!ref)
     return NULL;
 
   if (GST_IS_PLAY_VIDEO_INFO (ref))
-    info = gst_play_video_info_copy ((GstPlayVideoInfo *) ref);
+    info = gtk_gst_play_video_info_copy ((GtkGstPlayVideoInfo *) ref);
   else if (GST_IS_PLAY_AUDIO_INFO (ref))
-    info = gst_play_audio_info_copy ((GstPlayAudioInfo *) ref);
+    info = gtk_gst_play_audio_info_copy ((GtkGstPlayAudioInfo *) ref);
   else
-    info = gst_play_subtitle_info_copy ((GstPlaySubtitleInfo *) ref);
+    info = gtk_gst_play_subtitle_info_copy ((GtkGstPlaySubtitleInfo *) ref);
 
   info->stream_index = ref->stream_index;
   if (ref->tags)
@@ -569,16 +569,16 @@ gst_play_stream_info_copy (GstPlayStreamInfo * ref)
   return info;
 }
 
-GstPlayMediaInfo *
-gst_play_media_info_copy (GstPlayMediaInfo * ref)
+GtkGstPlayMediaInfo *
+gtk_gst_play_media_info_copy (GtkGstPlayMediaInfo * ref)
 {
   GList *l;
-  GstPlayMediaInfo *info;
+  GtkGstPlayMediaInfo *info;
 
   if (!ref)
     return NULL;
 
-  info = gst_play_media_info_new (ref->uri);
+  info = gtk_gst_play_media_info_new (ref->uri);
   info->duration = ref->duration;
   info->seekable = ref->seekable;
   info->is_live = ref->is_live;
@@ -592,9 +592,9 @@ gst_play_media_info_copy (GstPlayMediaInfo * ref)
     info->image_sample = gst_sample_ref (ref->image_sample);
 
   for (l = ref->stream_list; l != NULL; l = l->next) {
-    GstPlayStreamInfo *s;
+    GtkGstPlayStreamInfo *s;
 
-    s = gst_play_stream_info_copy ((GstPlayStreamInfo *) l->data);
+    s = gtk_gst_play_stream_info_copy ((GtkGstPlayStreamInfo *) l->data);
     info->stream_list = g_list_append (info->stream_list, s);
 
     if (GST_IS_PLAY_AUDIO_INFO (s))
@@ -609,27 +609,27 @@ gst_play_media_info_copy (GstPlayMediaInfo * ref)
   return info;
 }
 
-GstPlayStreamInfo *
-gst_play_stream_info_new (gint stream_index, GType type)
+GtkGstPlayStreamInfo *
+gtk_gst_play_stream_info_new (gint stream_index, GType type)
 {
-  GstPlayStreamInfo *info = NULL;
+  GtkGstPlayStreamInfo *info = NULL;
 
   if (type == GST_TYPE_PLAY_AUDIO_INFO)
-    info = (GstPlayStreamInfo *) gst_play_audio_info_new ();
+    info = (GtkGstPlayStreamInfo *) gtk_gst_play_audio_info_new ();
   else if (type == GST_TYPE_PLAY_VIDEO_INFO)
-    info = (GstPlayStreamInfo *) gst_play_video_info_new ();
+    info = (GtkGstPlayStreamInfo *) gtk_gst_play_video_info_new ();
   else
-    info = (GstPlayStreamInfo *) gst_play_subtitle_info_new ();
+    info = (GtkGstPlayStreamInfo *) gtk_gst_play_subtitle_info_new ();
 
   info->stream_index = stream_index;
 
   return info;
 }
 
-GstPlayMediaInfo *
-gst_play_media_info_new (const gchar * uri)
+GtkGstPlayMediaInfo *
+gtk_gst_play_media_info_new (const gchar * uri)
 {
-  GstPlayMediaInfo *info;
+  GtkGstPlayMediaInfo *info;
 
   g_return_val_if_fail (uri != NULL, NULL);
 
@@ -640,14 +640,14 @@ gst_play_media_info_new (const gchar * uri)
 }
 
 /**
- * gst_play_media_info_get_uri:
- * @info: a #GstPlayMediaInfo
+ * gtk_gst_play_media_info_get_uri:
+ * @info: a #GtkGstPlayMediaInfo
  *
- * Returns: the URI associated with #GstPlayMediaInfo.
+ * Returns: the URI associated with #GtkGstPlayMediaInfo.
  * Since: 1.20
  */
 const gchar *
-gst_play_media_info_get_uri (const GstPlayMediaInfo * info)
+gtk_gst_play_media_info_get_uri (const GtkGstPlayMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_MEDIA_INFO (info), NULL);
 
@@ -655,14 +655,14 @@ gst_play_media_info_get_uri (const GstPlayMediaInfo * info)
 }
 
 /**
- * gst_play_media_info_is_seekable:
- * @info: a #GstPlayMediaInfo
+ * gtk_gst_play_media_info_is_seekable:
+ * @info: a #GtkGstPlayMediaInfo
  *
  * Returns: %TRUE if the media is seekable.
  * Since: 1.20
  */
 gboolean
-gst_play_media_info_is_seekable (const GstPlayMediaInfo * info)
+gtk_gst_play_media_info_is_seekable (const GtkGstPlayMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_MEDIA_INFO (info), FALSE);
 
@@ -670,14 +670,14 @@ gst_play_media_info_is_seekable (const GstPlayMediaInfo * info)
 }
 
 /**
- * gst_play_media_info_is_live:
- * @info: a #GstPlayMediaInfo
+ * gtk_gst_play_media_info_is_live:
+ * @info: a #GtkGstPlayMediaInfo
  *
  * Returns: %TRUE if the media is live.
  * Since: 1.20
  */
 gboolean
-gst_play_media_info_is_live (const GstPlayMediaInfo * info)
+gtk_gst_play_media_info_is_live (const GtkGstPlayMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_MEDIA_INFO (info), FALSE);
 
@@ -685,15 +685,15 @@ gst_play_media_info_is_live (const GstPlayMediaInfo * info)
 }
 
 /**
- * gst_play_media_info_get_stream_list:
- * @info: a #GstPlayMediaInfo
+ * gtk_gst_play_media_info_get_stream_list:
+ * @info: a #GtkGstPlayMediaInfo
  *
- * Returns: (transfer none) (element-type GstPlayStreamInfo): A #GList of
- * matching #GstPlayStreamInfo.
+ * Returns: (transfer none) (element-type GtkGstPlayStreamInfo): A #GList of
+ * matching #GtkGstPlayStreamInfo.
  * Since: 1.20
  */
 GList *
-gst_play_media_info_get_stream_list (const GstPlayMediaInfo * info)
+gtk_gst_play_media_info_get_stream_list (const GtkGstPlayMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_MEDIA_INFO (info), NULL);
 
@@ -701,15 +701,15 @@ gst_play_media_info_get_stream_list (const GstPlayMediaInfo * info)
 }
 
 /**
- * gst_play_media_info_get_video_streams:
- * @info: a #GstPlayMediaInfo
+ * gtk_gst_play_media_info_get_video_streams:
+ * @info: a #GtkGstPlayMediaInfo
  *
- * Returns: (transfer none) (element-type GstPlayVideoInfo): A #GList of
- * matching #GstPlayVideoInfo.
+ * Returns: (transfer none) (element-type GtkGstPlayVideoInfo): A #GList of
+ * matching #GtkGstPlayVideoInfo.
  * Since: 1.20
  */
 GList *
-gst_play_media_info_get_video_streams (const GstPlayMediaInfo * info)
+gtk_gst_play_media_info_get_video_streams (const GtkGstPlayMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_MEDIA_INFO (info), NULL);
 
@@ -717,15 +717,15 @@ gst_play_media_info_get_video_streams (const GstPlayMediaInfo * info)
 }
 
 /**
- * gst_play_media_info_get_subtitle_streams:
- * @info: a #GstPlayMediaInfo
+ * gtk_gst_play_media_info_get_subtitle_streams:
+ * @info: a #GtkGstPlayMediaInfo
  *
- * Returns: (transfer none) (element-type GstPlaySubtitleInfo): A #GList of
- * matching #GstPlaySubtitleInfo.
+ * Returns: (transfer none) (element-type GtkGstPlaySubtitleInfo): A #GList of
+ * matching #GtkGstPlaySubtitleInfo.
  * Since: 1.20
  */
 GList *
-gst_play_media_info_get_subtitle_streams (const GstPlayMediaInfo * info)
+gtk_gst_play_media_info_get_subtitle_streams (const GtkGstPlayMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_MEDIA_INFO (info), NULL);
 
@@ -733,15 +733,15 @@ gst_play_media_info_get_subtitle_streams (const GstPlayMediaInfo * info)
 }
 
 /**
- * gst_play_media_info_get_audio_streams:
- * @info: a #GstPlayMediaInfo
+ * gtk_gst_play_media_info_get_audio_streams:
+ * @info: a #GtkGstPlayMediaInfo
  *
- * Returns: (transfer none) (element-type GstPlayAudioInfo): A #GList of
- * matching #GstPlayAudioInfo.
+ * Returns: (transfer none) (element-type GtkGstPlayAudioInfo): A #GList of
+ * matching #GtkGstPlayAudioInfo.
  * Since: 1.20
  */
 GList *
-gst_play_media_info_get_audio_streams (const GstPlayMediaInfo * info)
+gtk_gst_play_media_info_get_audio_streams (const GtkGstPlayMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_MEDIA_INFO (info), NULL);
 
@@ -749,14 +749,14 @@ gst_play_media_info_get_audio_streams (const GstPlayMediaInfo * info)
 }
 
 /**
- * gst_play_media_info_get_duration:
- * @info: a #GstPlayMediaInfo
+ * gtk_gst_play_media_info_get_duration:
+ * @info: a #GtkGstPlayMediaInfo
  *
  * Returns: duration of the media.
  * Since: 1.20
  */
 GstClockTime
-gst_play_media_info_get_duration (const GstPlayMediaInfo * info)
+gtk_gst_play_media_info_get_duration (const GtkGstPlayMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_MEDIA_INFO (info), -1);
 
@@ -764,14 +764,14 @@ gst_play_media_info_get_duration (const GstPlayMediaInfo * info)
 }
 
 /**
- * gst_play_media_info_get_tags:
- * @info: a #GstPlayMediaInfo
+ * gtk_gst_play_media_info_get_tags:
+ * @info: a #GtkGstPlayMediaInfo
  *
  * Returns: (transfer none) (nullable): the tags contained in media info.
  * Since: 1.20
  */
 GstTagList *
-gst_play_media_info_get_tags (const GstPlayMediaInfo * info)
+gtk_gst_play_media_info_get_tags (const GtkGstPlayMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_MEDIA_INFO (info), NULL);
 
@@ -779,14 +779,14 @@ gst_play_media_info_get_tags (const GstPlayMediaInfo * info)
 }
 
 /**
- * gst_play_media_info_get_title:
- * @info: a #GstPlayMediaInfo
+ * gtk_gst_play_media_info_get_title:
+ * @info: a #GtkGstPlayMediaInfo
  *
  * Returns: (nullable): the media title or %NULL if unknown.
  * Since: 1.20
  */
 const gchar *
-gst_play_media_info_get_title (const GstPlayMediaInfo * info)
+gtk_gst_play_media_info_get_title (const GtkGstPlayMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_MEDIA_INFO (info), NULL);
 
@@ -794,14 +794,14 @@ gst_play_media_info_get_title (const GstPlayMediaInfo * info)
 }
 
 /**
- * gst_play_media_info_get_container_format:
- * @info: a #GstPlayMediaInfo
+ * gtk_gst_play_media_info_get_container_format:
+ * @info: a #GtkGstPlayMediaInfo
  *
  * Returns: (nullable): the container format or %NULL if unknown.
  * Since: 1.20
  */
 const gchar *
-gst_play_media_info_get_container_format (const GstPlayMediaInfo * info)
+gtk_gst_play_media_info_get_container_format (const GtkGstPlayMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_MEDIA_INFO (info), NULL);
 
@@ -809,8 +809,8 @@ gst_play_media_info_get_container_format (const GstPlayMediaInfo * info)
 }
 
 /**
- * gst_play_media_info_get_image_sample:
- * @info: a #GstPlayMediaInfo
+ * gtk_gst_play_media_info_get_image_sample:
+ * @info: a #GtkGstPlayMediaInfo
  *
  * Function to get the image (or preview-image) stored in taglist.
  * Application can use `gst_sample_*_()` API's to get caps, buffer etc.
@@ -819,7 +819,7 @@ gst_play_media_info_get_container_format (const GstPlayMediaInfo * info)
  * Since: 1.20
  */
 GstSample *
-gst_play_media_info_get_image_sample (const GstPlayMediaInfo * info)
+gtk_gst_play_media_info_get_image_sample (const GtkGstPlayMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_MEDIA_INFO (info), NULL);
 
@@ -827,14 +827,14 @@ gst_play_media_info_get_image_sample (const GstPlayMediaInfo * info)
 }
 
 /**
- * gst_play_media_info_get_number_of_streams:
- * @info: a #GstPlayMediaInfo
+ * gtk_gst_play_media_info_get_number_of_streams:
+ * @info: a #GtkGstPlayMediaInfo
  *
  * Returns: number of total streams.
  * Since: 1.20
  */
 guint
-gst_play_media_info_get_number_of_streams (const GstPlayMediaInfo * info)
+gtk_gst_play_media_info_get_number_of_streams (const GtkGstPlayMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_MEDIA_INFO (info), 0);
 
@@ -842,14 +842,14 @@ gst_play_media_info_get_number_of_streams (const GstPlayMediaInfo * info)
 }
 
 /**
- * gst_play_media_info_get_number_of_video_streams:
- * @info: a #GstPlayMediaInfo
+ * gtk_gst_play_media_info_get_number_of_video_streams:
+ * @info: a #GtkGstPlayMediaInfo
  *
  * Returns: number of video streams.
  * Since: 1.20
  */
 guint
-gst_play_media_info_get_number_of_video_streams (const GstPlayMediaInfo * info)
+gtk_gst_play_media_info_get_number_of_video_streams (const GtkGstPlayMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_MEDIA_INFO (info), 0);
 
@@ -857,14 +857,14 @@ gst_play_media_info_get_number_of_video_streams (const GstPlayMediaInfo * info)
 }
 
 /**
- * gst_play_media_info_get_number_of_audio_streams:
- * @info: a #GstPlayMediaInfo
+ * gtk_gst_play_media_info_get_number_of_audio_streams:
+ * @info: a #GtkGstPlayMediaInfo
  *
  * Returns: number of audio streams.
  * Since: 1.20
  */
 guint
-gst_play_media_info_get_number_of_audio_streams (const GstPlayMediaInfo * info)
+gtk_gst_play_media_info_get_number_of_audio_streams (const GtkGstPlayMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_MEDIA_INFO (info), 0);
 
@@ -872,14 +872,14 @@ gst_play_media_info_get_number_of_audio_streams (const GstPlayMediaInfo * info)
 }
 
 /**
- * gst_play_media_info_get_number_of_subtitle_streams:
- * @info: a #GstPlayMediaInfo
+ * gtk_gst_play_media_info_get_number_of_subtitle_streams:
+ * @info: a #GtkGstPlayMediaInfo
  *
  * Returns: number of subtitle streams.
  * Since: 1.20
  */
-guint gst_play_media_info_get_number_of_subtitle_streams
-    (const GstPlayMediaInfo * info)
+guint gtk_gst_play_media_info_get_number_of_subtitle_streams
+    (const GtkGstPlayMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAY_MEDIA_INFO (info), 0);
 
@@ -887,49 +887,49 @@ guint gst_play_media_info_get_number_of_subtitle_streams
 }
 
 /**
- * gst_play_get_video_streams:
- * @info: a #GstPlayMediaInfo
+ * gtk_gst_play_get_video_streams:
+ * @info: a #GtkGstPlayMediaInfo
  *
- * Returns: (transfer none) (element-type GstPlayVideoInfo): A #GList of
- * matching #GstPlayVideoInfo.
+ * Returns: (transfer none) (element-type GtkGstPlayVideoInfo): A #GList of
+ * matching #GtkGstPlayVideoInfo.
  * Since: 1.20
  */
 #ifndef GST_REMOVE_DEPRECATED
 GList *
-gst_play_get_video_streams (const GstPlayMediaInfo * info)
+gtk_gst_play_get_video_streams (const GtkGstPlayMediaInfo * info)
 {
-  return gst_play_media_info_get_video_streams (info);
+  return gtk_gst_play_media_info_get_video_streams (info);
 }
 #endif
 
 /**
- * gst_play_get_audio_streams:
- * @info: a #GstPlayMediaInfo
+ * gtk_gst_play_get_audio_streams:
+ * @info: a #GtkGstPlayMediaInfo
  *
- * Returns: (transfer none) (element-type GstPlayAudioInfo): A #GList of
- * matching #GstPlayAudioInfo.
+ * Returns: (transfer none) (element-type GtkGstPlayAudioInfo): A #GList of
+ * matching #GtkGstPlayAudioInfo.
  * Since: 1.20
  */
 #ifndef GST_REMOVE_DEPRECATED
 GList *
-gst_play_get_audio_streams (const GstPlayMediaInfo * info)
+gtk_gst_play_get_audio_streams (const GtkGstPlayMediaInfo * info)
 {
-  return gst_play_media_info_get_audio_streams (info);
+  return gtk_gst_play_media_info_get_audio_streams (info);
 }
 #endif
 
 /**
- * gst_play_get_subtitle_streams:
- * @info: a #GstPlayMediaInfo
+ * gtk_gst_play_get_subtitle_streams:
+ * @info: a #GtkGstPlayMediaInfo
  *
- * Returns: (transfer none) (element-type GstPlaySubtitleInfo): A #GList of
- * matching #GstPlaySubtitleInfo.
+ * Returns: (transfer none) (element-type GtkGstPlaySubtitleInfo): A #GList of
+ * matching #GtkGstPlaySubtitleInfo.
  * Since: 1.20
  */
 #ifndef GST_REMOVE_DEPRECATED
 GList *
-gst_play_get_subtitle_streams (const GstPlayMediaInfo * info)
+gtk_gst_play_get_subtitle_streams (const GtkGstPlayMediaInfo * info)
 {
-  return gst_play_media_info_get_subtitle_streams (info);
+  return gtk_gst_play_media_info_get_subtitle_streams (info);
 }
 #endif
diff --git a/subprojects/gstreamer-player-1.0/gst/play/gstplay-media-info.h b/subprojects/gstreamer-player-1.0/gst/play/gstplay-media-info.h
index b78698a..238acf0 100644
--- a/subprojects/gstreamer-player-1.0/gst/play/gstplay-media-info.h
+++ b/subprojects/gstreamer-player-1.0/gst/play/gstplay-media-info.h
@@ -18,8 +18,8 @@
  * Boston, MA 02110-1301, USA.
  */
 
-#ifndef __GST_PLAY_MEDIA_INFO_H__
-#define __GST_PLAY_MEDIA_INFO_H__
+#ifndef __GTL_GST_PLAY_MEDIA_INFO_H__
+#define __GTL_GST_PLAY_MEDIA_INFO_H__
 
 #include <gst/gst.h>
 #include <gst/play/play-prelude.h>
@@ -31,91 +31,91 @@ G_BEGIN_DECLS
  * Since: 1.20
  */
 #define GST_TYPE_PLAY_STREAM_INFO \
-  (gst_play_stream_info_get_type ())
-#define GST_PLAY_STREAM_INFO(obj) \
-  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_PLAY_STREAM_INFO,GstPlayStreamInfo))
-#define GST_PLAY_STREAM_INFO_CLASS(klass) \
-  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_PLAY_STREAM_INFO,GstPlayStreamInfo))
+  (gtk_gst_play_stream_info_get_type ())
+#define GTL_GST_PLAY_STREAM_INFO(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_PLAY_STREAM_INFO,GtkGstPlayStreamInfo))
+#define GTL_GST_PLAY_STREAM_INFO_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_PLAY_STREAM_INFO,GtkGstPlayStreamInfo))
 #define GST_IS_PLAY_STREAM_INFO(obj) \
   (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_PLAY_STREAM_INFO))
 #define GST_IS_PLAY_STREAM_INFO_CLASS(klass) \
   (G_TYPE_CHECK_CLASS_TYPE((klass),GST_TYPE_PLAY_STREAM_INFO))
 
 /**
- * GstPlayStreamInfo:
+ * GtkGstPlayStreamInfo:
  *
  * Base structure for information concerning a media stream. Depending on
  * the stream type, one can find more media-specific information in
- * #GstPlayVideoInfo, #GstPlayAudioInfo, #GstPlaySubtitleInfo.
+ * #GtkGstPlayVideoInfo, #GtkGstPlayAudioInfo, #GtkGstPlaySubtitleInfo.
  * Since: 1.20
  */
-typedef struct _GstPlayStreamInfo GstPlayStreamInfo;
-typedef struct _GstPlayStreamInfoClass GstPlayStreamInfoClass;
+typedef struct _GstPlayStreamInfo GtkGstPlayStreamInfo;
+typedef struct _GstPlayStreamInfoClass GtkGstPlayStreamInfoClass;
 
-GST_PLAY_API
-GType         gst_play_stream_info_get_type (void);
+GTL_GST_PLAY_API
+GType         gtk_gst_play_stream_info_get_type (void);
 
-GST_PLAY_API
-gint          gst_play_stream_info_get_index (const GstPlayStreamInfo *info);
+GTL_GST_PLAY_API
+gint          gtk_gst_play_stream_info_get_index (const GtkGstPlayStreamInfo *info);
 
-GST_PLAY_API
-const gchar*  gst_play_stream_info_get_stream_type (const GstPlayStreamInfo *info);
+GTL_GST_PLAY_API
+const gchar*  gtk_gst_play_stream_info_get_stream_type (const GtkGstPlayStreamInfo *info);
 
-GST_PLAY_API
-GstTagList*   gst_play_stream_info_get_tags  (const GstPlayStreamInfo *info);
+GTL_GST_PLAY_API
+GstTagList*   gtk_gst_play_stream_info_get_tags  (const GtkGstPlayStreamInfo *info);
 
-GST_PLAY_API
-GstCaps*      gst_play_stream_info_get_caps  (const GstPlayStreamInfo *info);
+GTL_GST_PLAY_API
+GstCaps*      gtk_gst_play_stream_info_get_caps  (const GtkGstPlayStreamInfo *info);
 
-GST_PLAY_API
-const gchar*  gst_play_stream_info_get_codec (const GstPlayStreamInfo *info);
+GTL_GST_PLAY_API
+const gchar*  gtk_gst_play_stream_info_get_codec (const GtkGstPlayStreamInfo *info);
 
 /**
  * GST_TYPE_PLAY_VIDEO_INFO:
  * Since: 1.20
  */
 #define GST_TYPE_PLAY_VIDEO_INFO \
-  (gst_play_video_info_get_type ())
-#define GST_PLAY_VIDEO_INFO(obj) \
-  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_PLAY_VIDEO_INFO, GstPlayVideoInfo))
-#define GST_PLAY_VIDEO_INFO_CLASS(klass) \
-  (G_TYPE_CHECK_CLASS_CAST((obj),GST_TYPE_PLAY_VIDEO_INFO, GstPlayVideoInfoClass))
+  (gtk_gst_play_video_info_get_type ())
+#define GTL_GST_PLAY_VIDEO_INFO(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_PLAY_VIDEO_INFO, GtkGstPlayVideoInfo))
+#define GTL_GST_PLAY_VIDEO_INFO_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST((obj),GST_TYPE_PLAY_VIDEO_INFO, GtkGstPlayVideoInfoClass))
 #define GST_IS_PLAY_VIDEO_INFO(obj) \
   (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_PLAY_VIDEO_INFO))
 #define GST_IS_PLAY_VIDEO_INFO_CLASS(klass) \
   (G_TYPE_CHECK_CLASS_TYPE((obj),GST_TYPE_PLAY_VIDEO_INFO))
 
 /**
- * GstPlayVideoInfo:
+ * GtkGstPlayVideoInfo:
  *
- * #GstPlayStreamInfo specific to video streams.
+ * #GtkGstPlayStreamInfo specific to video streams.
  * Since: 1.20
  */
-typedef struct _GstPlayVideoInfo GstPlayVideoInfo;
-typedef struct _GstPlayVideoInfoClass GstPlayVideoInfoClass;
+typedef struct _GstPlayVideoInfo GtkGstPlayVideoInfo;
+typedef struct _GstPlayVideoInfoClass GtkGstPlayVideoInfoClass;
 
-GST_PLAY_API
-GType         gst_play_video_info_get_type (void);
+GTL_GST_PLAY_API
+GType         gtk_gst_play_video_info_get_type (void);
 
-GST_PLAY_API
-gint          gst_play_video_info_get_bitrate     (const GstPlayVideoInfo * info);
+GTL_GST_PLAY_API
+gint          gtk_gst_play_video_info_get_bitrate     (const GtkGstPlayVideoInfo * info);
 
-GST_PLAY_API
-gint          gst_play_video_info_get_max_bitrate (const GstPlayVideoInfo * info);
+GTL_GST_PLAY_API
+gint          gtk_gst_play_video_info_get_max_bitrate (const GtkGstPlayVideoInfo * info);
 
-GST_PLAY_API
-gint          gst_play_video_info_get_width       (const GstPlayVideoInfo * info);
+GTL_GST_PLAY_API
+gint          gtk_gst_play_video_info_get_width       (const GtkGstPlayVideoInfo * info);
 
-GST_PLAY_API
-gint          gst_play_video_info_get_height      (const GstPlayVideoInfo * info);
+GTL_GST_PLAY_API
+gint          gtk_gst_play_video_info_get_height      (const GtkGstPlayVideoInfo * info);
 
-GST_PLAY_API
-void          gst_play_video_info_get_framerate   (const GstPlayVideoInfo * info,
+GTL_GST_PLAY_API
+void          gtk_gst_play_video_info_get_framerate   (const GtkGstPlayVideoInfo * info,
                                                      gint * fps_n,
                                                      gint * fps_d);
 
-GST_PLAY_API
-void          gst_play_video_info_get_pixel_aspect_ratio (const GstPlayVideoInfo * info,
+GTL_GST_PLAY_API
+void          gtk_gst_play_video_info_get_pixel_aspect_ratio (const GtkGstPlayVideoInfo * info,
                                                             guint * par_n,
                                                             guint * par_d);
 
@@ -124,161 +124,161 @@ void          gst_play_video_info_get_pixel_aspect_ratio (const GstPlayVideoInfo
  * Since: 1.20
  */
 #define GST_TYPE_PLAY_AUDIO_INFO \
-  (gst_play_audio_info_get_type ())
-#define GST_PLAY_AUDIO_INFO(obj) \
-  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_PLAY_AUDIO_INFO, GstPlayAudioInfo))
-#define GST_PLAY_AUDIO_INFO_CLASS(klass) \
-  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_PLAY_AUDIO_INFO, GstPlayAudioInfoClass))
+  (gtk_gst_play_audio_info_get_type ())
+#define GTL_GST_PLAY_AUDIO_INFO(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_PLAY_AUDIO_INFO, GtkGstPlayAudioInfo))
+#define GTL_GST_PLAY_AUDIO_INFO_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_PLAY_AUDIO_INFO, GtkGstPlayAudioInfoClass))
 #define GST_IS_PLAY_AUDIO_INFO(obj) \
   (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_PLAY_AUDIO_INFO))
 #define GST_IS_PLAY_AUDIO_INFO_CLASS(klass) \
   (G_TYPE_CHECK_CLASS_TYPE((klass),GST_TYPE_PLAY_AUDIO_INFO))
 
 /**
- * GstPlayAudioInfo:
+ * GtkGstPlayAudioInfo:
  *
- * #GstPlayStreamInfo specific to audio streams.
+ * #GtkGstPlayStreamInfo specific to audio streams.
  * Since: 1.20
  */
-typedef struct _GstPlayAudioInfo GstPlayAudioInfo;
-typedef struct _GstPlayAudioInfoClass GstPlayAudioInfoClass;
+typedef struct _GstPlayAudioInfo GtkGstPlayAudioInfo;
+typedef struct _GstPlayAudioInfoClass GtkGstPlayAudioInfoClass;
 
-GST_PLAY_API
-GType         gst_play_audio_info_get_type (void);
+GTL_GST_PLAY_API
+GType         gtk_gst_play_audio_info_get_type (void);
 
-GST_PLAY_API
-gint          gst_play_audio_info_get_channels    (const GstPlayAudioInfo* info);
+GTL_GST_PLAY_API
+gint          gtk_gst_play_audio_info_get_channels    (const GtkGstPlayAudioInfo* info);
 
-GST_PLAY_API
-gint          gst_play_audio_info_get_sample_rate (const GstPlayAudioInfo* info);
+GTL_GST_PLAY_API
+gint          gtk_gst_play_audio_info_get_sample_rate (const GtkGstPlayAudioInfo* info);
 
-GST_PLAY_API
-gint          gst_play_audio_info_get_bitrate     (const GstPlayAudioInfo* info);
+GTL_GST_PLAY_API
+gint          gtk_gst_play_audio_info_get_bitrate     (const GtkGstPlayAudioInfo* info);
 
-GST_PLAY_API
-gint          gst_play_audio_info_get_max_bitrate (const GstPlayAudioInfo* info);
+GTL_GST_PLAY_API
+gint          gtk_gst_play_audio_info_get_max_bitrate (const GtkGstPlayAudioInfo* info);
 
-GST_PLAY_API
-const gchar*  gst_play_audio_info_get_language    (const GstPlayAudioInfo* info);
+GTL_GST_PLAY_API
+const gchar*  gtk_gst_play_audio_info_get_language    (const GtkGstPlayAudioInfo* info);
 
 /**
  * GST_TYPE_PLAY_SUBTITLE_INFO:
  * Since: 1.20
  */
 #define GST_TYPE_PLAY_SUBTITLE_INFO \
-  (gst_play_subtitle_info_get_type ())
-#define GST_PLAY_SUBTITLE_INFO(obj) \
-  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_PLAY_SUBTITLE_INFO, GstPlaySubtitleInfo))
-#define GST_PLAY_SUBTITLE_INFO_CLASS(klass) \
-  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_PLAY_SUBTITLE_INFO,GstPlaySubtitleInfoClass))
+  (gtk_gst_play_subtitle_info_get_type ())
+#define GTL_GST_PLAY_SUBTITLE_INFO(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_PLAY_SUBTITLE_INFO, GtkGstPlaySubtitleInfo))
+#define GTL_GST_PLAY_SUBTITLE_INFO_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_PLAY_SUBTITLE_INFO,GtkGstPlaySubtitleInfoClass))
 #define GST_IS_PLAY_SUBTITLE_INFO(obj) \
   (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_PLAY_SUBTITLE_INFO))
 #define GST_IS_PLAY_SUBTITLE_INFO_CLASS(klass) \
   (G_TYPE_CHECK_CLASS_TYPE((klass),GST_TYPE_PLAY_SUBTITLE_INFO))
 
 /**
- * GstPlaySubtitleInfo:
+ * GtkGstPlaySubtitleInfo:
  *
- * #GstPlayStreamInfo specific to subtitle streams.
+ * #GtkGstPlayStreamInfo specific to subtitle streams.
  * Since: 1.20
  */
-typedef struct _GstPlaySubtitleInfo GstPlaySubtitleInfo;
-typedef struct _GstPlaySubtitleInfoClass GstPlaySubtitleInfoClass;
+typedef struct _GstPlaySubtitleInfo GtkGstPlaySubtitleInfo;
+typedef struct _GstPlaySubtitleInfoClass GtkGstPlaySubtitleInfoClass;
 
-GST_PLAY_API
-GType         gst_play_subtitle_info_get_type (void);
+GTL_GST_PLAY_API
+GType         gtk_gst_play_subtitle_info_get_type (void);
 
-GST_PLAY_API
-const gchar * gst_play_subtitle_info_get_language (const GstPlaySubtitleInfo* info);
+GTL_GST_PLAY_API
+const gchar * gtk_gst_play_subtitle_info_get_language (const GtkGstPlaySubtitleInfo* info);
 
 /**
  * GST_TYPE_PLAY_MEDIA_INFO:
  * Since: 1.20
  */
 #define GST_TYPE_PLAY_MEDIA_INFO \
-  (gst_play_media_info_get_type())
-#define GST_PLAY_MEDIA_INFO(obj) \
-  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_PLAY_MEDIA_INFO,GstPlayMediaInfo))
-#define GST_PLAY_MEDIA_INFO_CLASS(klass) \
-  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_PLAY_MEDIA_INFO,GstPlayMediaInfoClass))
+  (gtk_gst_play_media_info_get_type())
+#define GTL_GST_PLAY_MEDIA_INFO(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_PLAY_MEDIA_INFO,GtkGstPlayMediaInfo))
+#define GTL_GST_PLAY_MEDIA_INFO_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_PLAY_MEDIA_INFO,GtkGstPlayMediaInfoClass))
 #define GST_IS_PLAY_MEDIA_INFO(obj) \
   (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_PLAY_MEDIA_INFO))
 #define GST_IS_PLAY_MEDIA_INFO_CLASS(klass) \
   (G_TYPE_CHECK_CLASS_TYPE((klass),GST_TYPE_PLAY_MEDIA_INFO))
 
 /**
- * GstPlayMediaInfo:
+ * GtkGstPlayMediaInfo:
  *
  * Structure containing the media information of a URI.
  * Since: 1.20
  */
-typedef struct _GstPlayMediaInfo GstPlayMediaInfo;
-typedef struct _GstPlayMediaInfoClass GstPlayMediaInfoClass;
+typedef struct _GstPlayMediaInfo GtkGstPlayMediaInfo;
+typedef struct _GstPlayMediaInfoClass GtkGstPlayMediaInfoClass;
 
 #ifdef G_DEFINE_AUTOPTR_CLEANUP_FUNC
-G_DEFINE_AUTOPTR_CLEANUP_FUNC(GstPlayMediaInfo, g_object_unref)
+G_DEFINE_AUTOPTR_CLEANUP_FUNC(GtkGstPlayMediaInfo, g_object_unref)
 #endif
 
-GST_PLAY_API
-GType         gst_play_media_info_get_type (void);
+GTL_GST_PLAY_API
+GType         gtk_gst_play_media_info_get_type (void);
 
-GST_PLAY_API
-const gchar * gst_play_media_info_get_uri (const GstPlayMediaInfo *info);
+GTL_GST_PLAY_API
+const gchar * gtk_gst_play_media_info_get_uri (const GtkGstPlayMediaInfo *info);
 
-GST_PLAY_API
-gboolean      gst_play_media_info_is_seekable (const GstPlayMediaInfo *info);
+GTL_GST_PLAY_API
+gboolean      gtk_gst_play_media_info_is_seekable (const GtkGstPlayMediaInfo *info);
 
-GST_PLAY_API
-gboolean      gst_play_media_info_is_live (const GstPlayMediaInfo *info);
+GTL_GST_PLAY_API
+gboolean      gtk_gst_play_media_info_is_live (const GtkGstPlayMediaInfo *info);
 
-GST_PLAY_API
-GstClockTime  gst_play_media_info_get_duration (const GstPlayMediaInfo *info);
+GTL_GST_PLAY_API
+GstClockTime  gtk_gst_play_media_info_get_duration (const GtkGstPlayMediaInfo *info);
 
-GST_PLAY_API
-GList*        gst_play_media_info_get_stream_list (const GstPlayMediaInfo *info);
+GTL_GST_PLAY_API
+GList*        gtk_gst_play_media_info_get_stream_list (const GtkGstPlayMediaInfo *info);
 
-GST_PLAY_API
-guint         gst_play_media_info_get_number_of_streams (const GstPlayMediaInfo *info);
+GTL_GST_PLAY_API
+guint         gtk_gst_play_media_info_get_number_of_streams (const GtkGstPlayMediaInfo *info);
 
-GST_PLAY_API
-GList*        gst_play_media_info_get_video_streams (const GstPlayMediaInfo *info);
+GTL_GST_PLAY_API
+GList*        gtk_gst_play_media_info_get_video_streams (const GtkGstPlayMediaInfo *info);
 
-GST_PLAY_API
-guint         gst_play_media_info_get_number_of_video_streams (const GstPlayMediaInfo *info);
+GTL_GST_PLAY_API
+guint         gtk_gst_play_media_info_get_number_of_video_streams (const GtkGstPlayMediaInfo *info);
 
-GST_PLAY_API
-GList*        gst_play_media_info_get_audio_streams (const GstPlayMediaInfo *info);
+GTL_GST_PLAY_API
+GList*        gtk_gst_play_media_info_get_audio_streams (const GtkGstPlayMediaInfo *info);
 
-GST_PLAY_API
-guint         gst_play_media_info_get_number_of_audio_streams (const GstPlayMediaInfo *info);
+GTL_GST_PLAY_API
+guint         gtk_gst_play_media_info_get_number_of_audio_streams (const GtkGstPlayMediaInfo *info);
 
-GST_PLAY_API
-GList*        gst_play_media_info_get_subtitle_streams (const GstPlayMediaInfo *info);
+GTL_GST_PLAY_API
+GList*        gtk_gst_play_media_info_get_subtitle_streams (const GtkGstPlayMediaInfo *info);
 
-GST_PLAY_API
-guint         gst_play_media_info_get_number_of_subtitle_streams (const GstPlayMediaInfo *info);
+GTL_GST_PLAY_API
+guint         gtk_gst_play_media_info_get_number_of_subtitle_streams (const GtkGstPlayMediaInfo *info);
 
-GST_PLAY_API
-GstTagList*   gst_play_media_info_get_tags (const GstPlayMediaInfo *info);
+GTL_GST_PLAY_API
+GstTagList*   gtk_gst_play_media_info_get_tags (const GtkGstPlayMediaInfo *info);
 
-GST_PLAY_API
-const gchar*  gst_play_media_info_get_title (const GstPlayMediaInfo *info);
+GTL_GST_PLAY_API
+const gchar*  gtk_gst_play_media_info_get_title (const GtkGstPlayMediaInfo *info);
 
-GST_PLAY_API
-const gchar*  gst_play_media_info_get_container_format (const GstPlayMediaInfo *info);
+GTL_GST_PLAY_API
+const gchar*  gtk_gst_play_media_info_get_container_format (const GtkGstPlayMediaInfo *info);
 
-GST_PLAY_API
-GstSample*    gst_play_media_info_get_image_sample (const GstPlayMediaInfo *info);
+GTL_GST_PLAY_API
+GstSample*    gtk_gst_play_media_info_get_image_sample (const GtkGstPlayMediaInfo *info);
 
-GST_PLAY_DEPRECATED_FOR(gst_play_media_info_get_video_streams)
-GList*        gst_play_get_video_streams    (const GstPlayMediaInfo *info);
+GTL_GST_PLAY_DEPRECATED_FOR(gtk_gst_play_media_info_get_video_streams)
+GList*        gtk_gst_play_get_video_streams    (const GtkGstPlayMediaInfo *info);
 
-GST_PLAY_DEPRECATED_FOR(gst_play_media_info_get_audio_streams)
-GList*        gst_play_get_audio_streams    (const GstPlayMediaInfo *info);
+GTL_GST_PLAY_DEPRECATED_FOR(gtk_gst_play_media_info_get_audio_streams)
+GList*        gtk_gst_play_get_audio_streams    (const GtkGstPlayMediaInfo *info);
 
-GST_PLAY_DEPRECATED_FOR(gst_play_media_info_get_subtitle_streams)
-GList*        gst_play_get_subtitle_streams (const GstPlayMediaInfo *info);
+GTL_GST_PLAY_DEPRECATED_FOR(gtk_gst_play_media_info_get_subtitle_streams)
+GList*        gtk_gst_play_get_subtitle_streams (const GtkGstPlayMediaInfo *info);
 
 G_END_DECLS
 
-#endif /* __GST_PLAY_MEDIA_INFO_H */
+#endif /* __GTL_GST_PLAY_MEDIA_INFO_H */
diff --git a/subprojects/gstreamer-player-1.0/gst/play/gstplay-message-private.h b/subprojects/gstreamer-player-1.0/gst/play/gstplay-message-private.h
index 3925e70..dc0f117 100644
--- a/subprojects/gstreamer-player-1.0/gst/play/gstplay-message-private.h
+++ b/subprojects/gstreamer-player-1.0/gst/play/gstplay-message-private.h
@@ -19,24 +19,24 @@
  * Boston, MA 02110-1301, USA.
  */
 
-#ifndef __GST_PLAY_MESSAGE_PRIVATE_H__
-#define __GST_PLAY_MESSAGE_PRIVATE_H__
+#ifndef __GTL_GST_PLAY_MESSAGE_PRIVATE_H__
+#define __GTL_GST_PLAY_MESSAGE_PRIVATE_H__
 
-#define GST_PLAY_MESSAGE_DATA "gst-play-message-data"
-#define GST_PLAY_MESSAGE_DATA_TYPE "play-message-type"
-#define GST_PLAY_MESSAGE_DATA_URI "uri"
-#define GST_PLAY_MESSAGE_DATA_POSITION "position"
-#define GST_PLAY_MESSAGE_DATA_DURATION "duration"
-#define GST_PLAY_MESSAGE_DATA_PLAY_STATE "play-state"
-#define GST_PLAY_MESSAGE_DATA_BUFFERING_PERCENT "bufferring-percent"
-#define GST_PLAY_MESSAGE_DATA_ERROR "error"
-#define GST_PLAY_MESSAGE_DATA_ERROR_DETAILS "error-details"
-#define GST_PLAY_MESSAGE_DATA_WARNING "warning"
-#define GST_PLAY_MESSAGE_DATA_WARNING_DETAILS "warning-details"
-#define GST_PLAY_MESSAGE_DATA_VIDEO_WIDTH "video-width"
-#define GST_PLAY_MESSAGE_DATA_VIDEO_HEIGHT "video-height"
-#define GST_PLAY_MESSAGE_DATA_MEDIA_INFO "media-info"
-#define GST_PLAY_MESSAGE_DATA_VOLUME "volume"
-#define GST_PLAY_MESSAGE_DATA_IS_MUTED "is-muted"
+#define GTL_GST_PLAY_MESSAGE_DATA "gst-play-message-data"
+#define GTL_GST_PLAY_MESSAGE_DATA_TYPE "play-message-type"
+#define GTL_GST_PLAY_MESSAGE_DATA_URI "uri"
+#define GTL_GST_PLAY_MESSAGE_DATA_POSITION "position"
+#define GTL_GST_PLAY_MESSAGE_DATA_DURATION "duration"
+#define GTL_GST_PLAY_MESSAGE_DATA_PLAY_STATE "play-state"
+#define GTL_GST_PLAY_MESSAGE_DATA_BUFFERING_PERCENT "bufferring-percent"
+#define GTL_GST_PLAY_MESSAGE_DATA_ERROR "error"
+#define GTL_GST_PLAY_MESSAGE_DATA_ERROR_DETAILS "error-details"
+#define GTL_GST_PLAY_MESSAGE_DATA_WARNING "warning"
+#define GTL_GST_PLAY_MESSAGE_DATA_WARNING_DETAILS "warning-details"
+#define GTL_GST_PLAY_MESSAGE_DATA_VIDEO_WIDTH "video-width"
+#define GTL_GST_PLAY_MESSAGE_DATA_VIDEO_HEIGHT "video-height"
+#define GTL_GST_PLAY_MESSAGE_DATA_MEDIA_INFO "media-info"
+#define GTL_GST_PLAY_MESSAGE_DATA_VOLUME "volume"
+#define GTL_GST_PLAY_MESSAGE_DATA_IS_MUTED "is-muted"
 
 #endif
diff --git a/subprojects/gstreamer-player-1.0/gst/play/gstplay-signal-adapter.c b/subprojects/gstreamer-player-1.0/gst/play/gstplay-signal-adapter.c
index fe02e03..6b4a40a 100644
--- a/subprojects/gstreamer-player-1.0/gst/play/gstplay-signal-adapter.c
+++ b/subprojects/gstreamer-player-1.0/gst/play/gstplay-signal-adapter.c
@@ -27,8 +27,8 @@
 #include "gstplay-signal-adapter.h"
 #include "gstplay-message-private.h"
 
-GST_DEBUG_CATEGORY_STATIC (gst_play_signal_adapter_debug);
-#define GST_CAT_DEFAULT gst_play_signal_adapter_debug
+GST_DEBUG_CATEGORY_STATIC (gtk_gst_play_signal_adapter_debug);
+#define GST_CAT_DEFAULT gtk_gst_play_signal_adapter_debug
 
 enum
 {
@@ -61,7 +61,7 @@ struct _GstPlaySignalAdapter
 {
   GObject parent;
   GstBus *bus;
-  GstPlay *play;
+  GtkGstPlay *play;
   GSource *source;
 };
 
@@ -71,70 +71,70 @@ struct _GstPlaySignalAdapterClass
 };
 
 #define _do_init \
-  GST_DEBUG_CATEGORY_INIT (gst_play_signal_adapter_debug, "gst-play-signal-adapter", \
-      0, "GstPlay signal adapter")
+  GST_DEBUG_CATEGORY_INIT (gtk_gst_play_signal_adapter_debug, "gst-play-signal-adapter", \
+      0, "GtkGstPlay signal adapter")
 
-#define parent_class gst_play_signal_adapter_parent_class
-G_DEFINE_TYPE_WITH_CODE (GstPlaySignalAdapter, gst_play_signal_adapter,
+#define parent_class gtk_gst_play_signal_adapter_parent_class
+G_DEFINE_TYPE_WITH_CODE (GtkGstPlaySignalAdapter, gtk_gst_play_signal_adapter,
     G_TYPE_OBJECT, _do_init);
 
 static guint signals[SIGNAL_LAST] = { 0, };
 
 static void
-gst_play_signal_adapter_emit (GstPlaySignalAdapter * self,
+gtk_gst_play_signal_adapter_emit (GtkGstPlaySignalAdapter * self,
     const GstStructure * message_data)
 {
-  GstPlayMessage play_message_type;
+  GtkGstPlayMessage play_message_type;
   g_return_if_fail (g_str_equal (gst_structure_get_name (message_data),
-          GST_PLAY_MESSAGE_DATA));
+          GTL_GST_PLAY_MESSAGE_DATA));
 
   GST_LOG ("Emitting message %" GST_PTR_FORMAT, message_data);
-  gst_structure_get (message_data, GST_PLAY_MESSAGE_DATA_TYPE,
+  gst_structure_get (message_data, GTL_GST_PLAY_MESSAGE_DATA_TYPE,
       GST_TYPE_PLAY_MESSAGE, &play_message_type, NULL);
 
   switch (play_message_type) {
-    case GST_PLAY_MESSAGE_URI_LOADED:{
+    case GTL_GST_PLAY_MESSAGE_URI_LOADED:{
       const gchar *uri =
-          gst_structure_get_string (message_data, GST_PLAY_MESSAGE_DATA_URI);
+          gst_structure_get_string (message_data, GTL_GST_PLAY_MESSAGE_DATA_URI);
       g_signal_emit (self, signals[SIGNAL_URI_LOADED], 0, uri);
       break;
     }
-    case GST_PLAY_MESSAGE_POSITION_UPDATED:{
+    case GTL_GST_PLAY_MESSAGE_POSITION_UPDATED:{
       GstClockTime pos = GST_CLOCK_TIME_NONE;
-      gst_structure_get (message_data, GST_PLAY_MESSAGE_DATA_POSITION,
+      gst_structure_get (message_data, GTL_GST_PLAY_MESSAGE_DATA_POSITION,
           GST_TYPE_CLOCK_TIME, &pos, NULL);
       g_signal_emit (self, signals[SIGNAL_POSITION_UPDATED], 0, pos);
       break;
     }
-    case GST_PLAY_MESSAGE_DURATION_CHANGED:{
+    case GTL_GST_PLAY_MESSAGE_DURATION_CHANGED:{
       GstClockTime duration = GST_CLOCK_TIME_NONE;
-      gst_structure_get (message_data, GST_PLAY_MESSAGE_DATA_DURATION,
+      gst_structure_get (message_data, GTL_GST_PLAY_MESSAGE_DATA_DURATION,
           GST_TYPE_CLOCK_TIME, &duration, NULL);
       g_signal_emit (self, signals[SIGNAL_DURATION_CHANGED], 0, duration);
       break;
     }
-    case GST_PLAY_MESSAGE_STATE_CHANGED:{
-      GstPlayState state = 0;
-      gst_structure_get (message_data, GST_PLAY_MESSAGE_DATA_PLAY_STATE,
+    case GTL_GST_PLAY_MESSAGE_STATE_CHANGED:{
+      GtkGstPlayState state = 0;
+      gst_structure_get (message_data, GTL_GST_PLAY_MESSAGE_DATA_PLAY_STATE,
           GST_TYPE_PLAY_STATE, &state, NULL);
       g_signal_emit (self, signals[SIGNAL_STATE_CHANGED], 0, state);
       break;
     }
-    case GST_PLAY_MESSAGE_BUFFERING:{
+    case GTL_GST_PLAY_MESSAGE_BUFFERING:{
       guint percent = 0;
       gst_structure_get (message_data,
-          GST_PLAY_MESSAGE_DATA_BUFFERING_PERCENT, G_TYPE_UINT, &percent, NULL);
+          GTL_GST_PLAY_MESSAGE_DATA_BUFFERING_PERCENT, G_TYPE_UINT, &percent, NULL);
       g_signal_emit (self, signals[SIGNAL_BUFFERING], 0, percent);
       break;
     }
-    case GST_PLAY_MESSAGE_END_OF_STREAM:
+    case GTL_GST_PLAY_MESSAGE_END_OF_STREAM:
       g_signal_emit (self, signals[SIGNAL_END_OF_STREAM], 0);
       break;
-    case GST_PLAY_MESSAGE_ERROR:{
+    case GTL_GST_PLAY_MESSAGE_ERROR:{
       GError *error = NULL;
       GstStructure *details = NULL;
-      gst_structure_get (message_data, GST_PLAY_MESSAGE_DATA_ERROR,
-          G_TYPE_ERROR, &error, GST_PLAY_MESSAGE_DATA_ERROR_DETAILS,
+      gst_structure_get (message_data, GTL_GST_PLAY_MESSAGE_DATA_ERROR,
+          G_TYPE_ERROR, &error, GTL_GST_PLAY_MESSAGE_DATA_ERROR_DETAILS,
           GST_TYPE_STRUCTURE, &details, NULL);
       g_signal_emit (self, signals[SIGNAL_ERROR], 0, error, details);
       g_error_free (error);
@@ -142,11 +142,11 @@ gst_play_signal_adapter_emit (GstPlaySignalAdapter * self,
         gst_structure_free (details);
       break;
     }
-    case GST_PLAY_MESSAGE_WARNING:{
+    case GTL_GST_PLAY_MESSAGE_WARNING:{
       GError *error = NULL;
       GstStructure *details = NULL;
-      gst_structure_get (message_data, GST_PLAY_MESSAGE_DATA_WARNING,
-          G_TYPE_ERROR, &error, GST_PLAY_MESSAGE_DATA_WARNING_DETAILS,
+      gst_structure_get (message_data, GTL_GST_PLAY_MESSAGE_DATA_WARNING,
+          G_TYPE_ERROR, &error, GTL_GST_PLAY_MESSAGE_DATA_WARNING_DETAILS,
           GST_TYPE_STRUCTURE, &details, NULL);
       g_signal_emit (self, signals[SIGNAL_WARNING], 0, error, details);
       g_error_free (error);
@@ -154,41 +154,41 @@ gst_play_signal_adapter_emit (GstPlaySignalAdapter * self,
         gst_structure_free (details);
       break;
     }
-    case GST_PLAY_MESSAGE_VIDEO_DIMENSIONS_CHANGED:{
+    case GTL_GST_PLAY_MESSAGE_VIDEO_DIMENSIONS_CHANGED:{
       guint width = 0;
       guint height = 0;
       gst_structure_get (message_data,
-          GST_PLAY_MESSAGE_DATA_VIDEO_WIDTH, G_TYPE_UINT, &width,
-          GST_PLAY_MESSAGE_DATA_VIDEO_HEIGHT, G_TYPE_UINT, &height, NULL);
+          GTL_GST_PLAY_MESSAGE_DATA_VIDEO_WIDTH, G_TYPE_UINT, &width,
+          GTL_GST_PLAY_MESSAGE_DATA_VIDEO_HEIGHT, G_TYPE_UINT, &height, NULL);
       g_signal_emit (self, signals[SIGNAL_VIDEO_DIMENSIONS_CHANGED], 0,
           width, height);
       break;
     }
-    case GST_PLAY_MESSAGE_MEDIA_INFO_UPDATED:{
-      GstPlayMediaInfo *media_info;
-      gst_structure_get (message_data, GST_PLAY_MESSAGE_DATA_MEDIA_INFO,
+    case GTL_GST_PLAY_MESSAGE_MEDIA_INFO_UPDATED:{
+      GtkGstPlayMediaInfo *media_info;
+      gst_structure_get (message_data, GTL_GST_PLAY_MESSAGE_DATA_MEDIA_INFO,
           GST_TYPE_PLAY_MEDIA_INFO, &media_info, NULL);
       g_signal_emit (self, signals[SIGNAL_MEDIA_INFO_UPDATED], 0, media_info);
       g_object_unref (media_info);
       break;
     }
-    case GST_PLAY_MESSAGE_VOLUME_CHANGED:{
+    case GTL_GST_PLAY_MESSAGE_VOLUME_CHANGED:{
       gdouble volume;
-      gst_structure_get (message_data, GST_PLAY_MESSAGE_DATA_VOLUME,
+      gst_structure_get (message_data, GTL_GST_PLAY_MESSAGE_DATA_VOLUME,
           G_TYPE_DOUBLE, &volume, NULL);
       g_signal_emit (self, signals[SIGNAL_VOLUME_CHANGED], 0, volume);
       break;
     }
-    case GST_PLAY_MESSAGE_MUTE_CHANGED:{
+    case GTL_GST_PLAY_MESSAGE_MUTE_CHANGED:{
       gboolean is_muted;
-      gst_structure_get (message_data, GST_PLAY_MESSAGE_DATA_IS_MUTED,
+      gst_structure_get (message_data, GTL_GST_PLAY_MESSAGE_DATA_IS_MUTED,
           G_TYPE_BOOLEAN, &is_muted, NULL);
       g_signal_emit (self, signals[SIGNAL_MUTE_CHANGED], 0, is_muted);
       break;
     }
-    case GST_PLAY_MESSAGE_SEEK_DONE:{
+    case GTL_GST_PLAY_MESSAGE_SEEK_DONE:{
       GstClockTime pos;
-      gst_structure_get (message_data, GST_PLAY_MESSAGE_DATA_POSITION,
+      gst_structure_get (message_data, GTL_GST_PLAY_MESSAGE_DATA_POSITION,
           GST_TYPE_CLOCK_TIME, &pos, NULL);
       g_signal_emit (self, signals[SIGNAL_SEEK_DONE], 0, pos);
       break;
@@ -203,12 +203,12 @@ gst_play_signal_adapter_emit (GstPlaySignalAdapter * self,
  * callback for the bus-message in-sync handling
  */
 static GstBusSyncReply
-    gst_play_signal_adapter_bus_sync_handler
+    gtk_gst_play_signal_adapter_bus_sync_handler
     (GstBus * bus, GstMessage * message, gpointer user_data)
 {
-  GstPlaySignalAdapter *self = GST_PLAY_SIGNAL_ADAPTER (user_data);
+  GtkGstPlaySignalAdapter *self = GTL_GST_PLAY_SIGNAL_ADAPTER (user_data);
   const GstStructure *message_data = gst_message_get_structure (message);
-  gst_play_signal_adapter_emit (self, message_data);
+  gtk_gst_play_signal_adapter_emit (self, message_data);
   gst_message_unref (message);
   return GST_BUS_DROP;
 }
@@ -218,51 +218,51 @@ static GstBusSyncReply
  * pre: there is a message on the bus
  */
 static gboolean
-gst_play_signal_adapter_on_message (GstBus * bus,
+gtk_gst_play_signal_adapter_on_message (GstBus * bus,
     GstMessage * message, gpointer user_data)
 {
-  GstPlaySignalAdapter *self = GST_PLAY_SIGNAL_ADAPTER (user_data);
+  GtkGstPlaySignalAdapter *self = GTL_GST_PLAY_SIGNAL_ADAPTER (user_data);
   const GstStructure *message_data = gst_message_get_structure (message);
-  gst_play_signal_adapter_emit (self, message_data);
+  gtk_gst_play_signal_adapter_emit (self, message_data);
   return TRUE;
 }
 
 /**
- * gst_play_signal_adapter_new:
- * @play: (transfer none): #GstPlay instance to emit signals for.
+ * gtk_gst_play_signal_adapter_new:
+ * @play: (transfer none): #GtkGstPlay instance to emit signals for.
  *
  * A bus-watching #GSource will be created and attached to the the
  * thread-default #GMainContext. The attached callback will emit the
  * corresponding signal for the message received. Matching signals for play
  * messages from the bus will be emitted by it on the created adapter object.
  *
- * Returns: (transfer full): A new #GstPlaySignalAdapter to connect signal handlers to.
+ * Returns: (transfer full): A new #GtkGstPlaySignalAdapter to connect signal handlers to.
  *
  * Since: 1.20
  */
-GstPlaySignalAdapter *
-gst_play_signal_adapter_new (GstPlay * play)
+GtkGstPlaySignalAdapter *
+gtk_gst_play_signal_adapter_new (GtkGstPlay * play)
 {
-  GstPlaySignalAdapter *self = NULL;
+  GtkGstPlaySignalAdapter *self = NULL;
   GMainContext *context = NULL;
 
   g_return_val_if_fail (GST_IS_PLAY (play), NULL);
 
   self = g_object_new (GST_TYPE_PLAY_SIGNAL_ADAPTER, NULL);
   self->play = play;
-  self->bus = gst_play_get_message_bus (play);
+  self->bus = gtk_gst_play_get_message_bus (play);
   self->source = gst_bus_create_watch (self->bus);
 
   context = g_main_context_get_thread_default ();
   g_source_attach (self->source, context);
   g_source_set_callback (self->source,
-      (GSourceFunc) gst_play_signal_adapter_on_message, self, NULL);
+      (GSourceFunc) gtk_gst_play_signal_adapter_on_message, self, NULL);
   return self;
 }
 
 /**
- * gst_play_signal_adapter_new_with_main_context:
- * @play: (transfer none): #GstPlay instance to emit signals for.
+ * gtk_gst_play_signal_adapter_new_with_main_context:
+ * @play: (transfer none): #GtkGstPlay instance to emit signals for.
  * @context: A #GMainContext on which the main-loop will process play bus messages on.
  *
  * A bus-watching #GSource will be created and attached to the @context. The
@@ -270,85 +270,85 @@ gst_play_signal_adapter_new (GstPlay * play)
  * received. Matching signals for play messages from the bus will be emitted by
  * it on the created adapter object.
  *
- * Returns: (transfer full): A new #GstPlaySignalAdapter to connect signal handlers to.
+ * Returns: (transfer full): A new #GtkGstPlaySignalAdapter to connect signal handlers to.
  *
  * Since: 1.20
  */
-GstPlaySignalAdapter *
-gst_play_signal_adapter_new_with_main_context (GstPlay * play,
+GtkGstPlaySignalAdapter *
+gtk_gst_play_signal_adapter_new_with_main_context (GtkGstPlay * play,
     GMainContext * context)
 {
-  GstPlaySignalAdapter *self = NULL;
+  GtkGstPlaySignalAdapter *self = NULL;
 
   g_return_val_if_fail (GST_IS_PLAY (play), NULL);
   g_return_val_if_fail (context != NULL, NULL);
 
   self = g_object_new (GST_TYPE_PLAY_SIGNAL_ADAPTER, NULL);
   self->play = play;
-  self->bus = gst_play_get_message_bus (play);
+  self->bus = gtk_gst_play_get_message_bus (play);
   self->source = gst_bus_create_watch (self->bus);
 
   g_source_attach (self->source, context);
   g_source_set_callback (self->source,
-      (GSourceFunc) gst_play_signal_adapter_on_message, self, NULL);
+      (GSourceFunc) gtk_gst_play_signal_adapter_on_message, self, NULL);
   return self;
 }
 
 /**
- * gst_play_signal_adapter_new_sync_emit:
- * @play: (transfer none): #GstPlay instance to emit signals for.
+ * gtk_gst_play_signal_adapter_new_sync_emit:
+ * @play: (transfer none): #GtkGstPlay instance to emit signals for.
  *
  * Create an adapter that synchronously emits its signals, from the thread in
  * which the messages have been posted.
  *
- * Returns: (transfer full): A new #GstPlaySignalAdapter to connect signal handlers to.
+ * Returns: (transfer full): A new #GtkGstPlaySignalAdapter to connect signal handlers to.
  *
  * Since: 1.20
  */
-GstPlaySignalAdapter *
-gst_play_signal_adapter_new_sync_emit (GstPlay * play)
+GtkGstPlaySignalAdapter *
+gtk_gst_play_signal_adapter_new_sync_emit (GtkGstPlay * play)
 {
   GstBus *bus = NULL;
-  GstPlaySignalAdapter *self = NULL;
+  GtkGstPlaySignalAdapter *self = NULL;
 
   g_return_val_if_fail (GST_IS_PLAY (play), NULL);
 
-  bus = gst_play_get_message_bus (play);
+  bus = gtk_gst_play_get_message_bus (play);
 
   self = g_object_new (GST_TYPE_PLAY_SIGNAL_ADAPTER, NULL);
   self->play = play;
   self->bus = bus;
   gst_bus_set_sync_handler (self->bus,
-      gst_play_signal_adapter_bus_sync_handler, self, NULL);
+      gtk_gst_play_signal_adapter_bus_sync_handler, self, NULL);
   return self;
 }
 
 
 /**
- * gst_play_signal_adapter_get_play:
- * @adapter: #GstPlaySignalAdapter instance
+ * gtk_gst_play_signal_adapter_get_play:
+ * @adapter: #GtkGstPlaySignalAdapter instance
  *
- * Returns: (transfer none): The #GstPlay owning this signal adapter.
+ * Returns: (transfer none): The #GtkGstPlay owning this signal adapter.
  *
  * Since: 1.20
  */
-GstPlay *
-gst_play_signal_adapter_get_play (GstPlaySignalAdapter * adapter)
+GtkGstPlay *
+gtk_gst_play_signal_adapter_get_play (GtkGstPlaySignalAdapter * adapter)
 {
   g_return_val_if_fail (GST_IS_PLAY_SIGNAL_ADAPTER (adapter), NULL);
   return adapter->play;
 }
 
 static void
-gst_play_signal_adapter_init (GstPlaySignalAdapter * self)
+gtk_gst_play_signal_adapter_init (GtkGstPlaySignalAdapter * self)
 {
   self->source = NULL;
 }
 
 static void
-gst_play_signal_adapter_dispose (GObject * object)
+gtk_gst_play_signal_adapter_dispose (GObject * object)
 {
-  GstPlaySignalAdapter *self = GST_PLAY_SIGNAL_ADAPTER (object);
+  GtkGstPlaySignalAdapter *self = GTL_GST_PLAY_SIGNAL_ADAPTER (object);
 
   if (self->source) {
     g_source_destroy (self->source);
@@ -362,10 +362,10 @@ gst_play_signal_adapter_dispose (GObject * object)
 }
 
 static void
-gst_play_signal_adapter_get_property (GObject * object, guint prop_id,
+gtk_gst_play_signal_adapter_get_property (GObject * object, guint prop_id,
     GValue * value, GParamSpec * pspec)
 {
-  GstPlaySignalAdapter *self = GST_PLAY_SIGNAL_ADAPTER (object);
+  GtkGstPlaySignalAdapter *self = GTL_GST_PLAY_SIGNAL_ADAPTER (object);
 
   switch (prop_id) {
     case PROP_PLAY:
@@ -378,16 +378,16 @@ gst_play_signal_adapter_get_property (GObject * object, guint prop_id,
 }
 
 static void
-gst_play_signal_adapter_class_init (GstPlaySignalAdapterClass * klass)
+gtk_gst_play_signal_adapter_class_init (GtkGstPlaySignalAdapterClass * klass)
 {
   GObjectClass *gobject_class = (GObjectClass *) klass;
 
-  gobject_class->dispose = gst_play_signal_adapter_dispose;
-  gobject_class->get_property = gst_play_signal_adapter_get_property;
+  gobject_class->dispose = gtk_gst_play_signal_adapter_dispose;
+  gobject_class->get_property = gtk_gst_play_signal_adapter_get_property;
 
   param_specs[PROP_PLAY] =
       g_param_spec_object ("play", "Play",
-      "GstPlay owning this adapter",
+      "GtkGstPlay owning this adapter",
       GST_TYPE_PLAY, G_PARAM_READABLE | G_PARAM_STATIC_STRINGS);
 
   signals[SIGNAL_URI_LOADED] =
@@ -421,8 +421,8 @@ gst_play_signal_adapter_class_init (GstPlaySignalAdapterClass * klass)
       NULL, NULL, G_TYPE_NONE, 0, G_TYPE_INVALID);
 
   /**
-   * GstPlaySignalAdapter::error:
-   * @adapter: The #GstPlaySignalAdapter
+   * GtkGstPlaySignalAdapter::error:
+   * @adapter: The #GtkGstPlaySignalAdapter
    * @error: The error
    * @details: (nullable): Additional error details
    *
@@ -454,8 +454,8 @@ gst_play_signal_adapter_class_init (GstPlaySignalAdapterClass * klass)
       NULL, NULL, G_TYPE_NONE, 1, G_TYPE_BOOLEAN);
 
   /**
-   * GstPlaySignalAdapter::warning:
-   * @adapter: The #GstPlaySignalAdapter
+   * GtkGstPlaySignalAdapter::warning:
+   * @adapter: The #GtkGstPlaySignalAdapter
    * @error: The warning
    * @details: (nullable): Additional warning details
    *
diff --git a/subprojects/gstreamer-player-1.0/gst/play/gstplay-signal-adapter.h b/subprojects/gstreamer-player-1.0/gst/play/gstplay-signal-adapter.h
index da0082c..1a2c276 100644
--- a/subprojects/gstreamer-player-1.0/gst/play/gstplay-signal-adapter.h
+++ b/subprojects/gstreamer-player-1.0/gst/play/gstplay-signal-adapter.h
@@ -19,45 +19,45 @@
  * Boston, MA 02110-1301, USA.
  */
 
-#ifndef __GST_PLAY_SIGNAL_ADAPTER_H__
-#define __GST_PLAY_SIGNAL_ADAPTER_H__
+#ifndef __GTL_GST_PLAY_SIGNAL_ADAPTER_H__
+#define __GTL_GST_PLAY_SIGNAL_ADAPTER_H__
 
 #include <gst/play/gstplay-types.h>
 
 G_BEGIN_DECLS
 
-#define GST_TYPE_PLAY_SIGNAL_ADAPTER             (gst_play_signal_adapter_get_type ())
+#define GST_TYPE_PLAY_SIGNAL_ADAPTER             (gtk_gst_play_signal_adapter_get_type ())
 #define GST_IS_PLAY_SIGNAL_ADAPTER(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_PLAY_SIGNAL_ADAPTER))
 #define GST_IS_PLAY_SIGNAL_ADAPTER_CLASS(klass)  (G_TYPE_CHECK_CLASS_TYPE ((klass), GST_TYPE_PLAY_SIGNAL_ADAPTER))
-#define GST_PLAY_SIGNAL_ADAPTER_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GST_TYPE_PLAY_SIGNAL_ADAPTER, GstPlaySignalAdapterClass))
-#define GST_PLAY_SIGNAL_ADAPTER(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PLAY_SIGNAL_ADAPTER, GstPlaySignalAdapter))
-#define GST_PLAY_SIGNAL_ADAPTER_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_PLAY_SIGNAL_ADAPTER, GstPlaySignalAdapterClass))
+#define GTL_GST_PLAY_SIGNAL_ADAPTER_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GST_TYPE_PLAY_SIGNAL_ADAPTER, GtkGstPlaySignalAdapterClass))
+#define GTL_GST_PLAY_SIGNAL_ADAPTER(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PLAY_SIGNAL_ADAPTER, GtkGstPlaySignalAdapter))
+#define GTL_GST_PLAY_SIGNAL_ADAPTER_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_PLAY_SIGNAL_ADAPTER, GtkGstPlaySignalAdapterClass))
 
 /**
- * GST_PLAY_SIGNAL_ADAPTER_CAST:
+ * GTL_GST_PLAY_SIGNAL_ADAPTER_CAST:
  * Since: 1.20
  */
-#define GST_PLAY_SIGNAL_ADAPTER_CAST(obj)        ((GstPlaySignalAdapter*)(obj))
+#define GTL_GST_PLAY_SIGNAL_ADAPTER_CAST(obj)        ((GtkGstPlaySignalAdapter*)(obj))
 
 #ifdef G_DEFINE_AUTOPTR_CLEANUP_FUNC
-G_DEFINE_AUTOPTR_CLEANUP_FUNC(GstPlaySignalAdapter, g_object_unref)
+G_DEFINE_AUTOPTR_CLEANUP_FUNC(GtkGstPlaySignalAdapter, g_object_unref)
 #endif
 
-GST_PLAY_API
-GType                  gst_play_signal_adapter_get_type               (void);
+GTL_GST_PLAY_API
+GType                  gtk_gst_play_signal_adapter_get_type               (void);
 
-GST_PLAY_API
-GstPlaySignalAdapter * gst_play_signal_adapter_new                    (GstPlay * play);
+GTL_GST_PLAY_API
+GtkGstPlaySignalAdapter * gtk_gst_play_signal_adapter_new                    (GtkGstPlay * play);
 
-GST_PLAY_API
-GstPlaySignalAdapter * gst_play_signal_adapter_new_with_main_context  (GstPlay * play, GMainContext * context);
+GTL_GST_PLAY_API
+GtkGstPlaySignalAdapter * gtk_gst_play_signal_adapter_new_with_main_context  (GtkGstPlay * play, GMainContext * context);
 
-GST_PLAY_API
-GstPlaySignalAdapter * gst_play_signal_adapter_new_sync_emit          (GstPlay * play);
+GTL_GST_PLAY_API
+GtkGstPlaySignalAdapter * gtk_gst_play_signal_adapter_new_sync_emit          (GtkGstPlay * play);
 
-GST_PLAY_API
-GstPlay              * gst_play_signal_adapter_get_play               (GstPlaySignalAdapter * adapter);
+GTL_GST_PLAY_API
+GtkGstPlay              * gtk_gst_play_signal_adapter_get_play               (GtkGstPlaySignalAdapter * adapter);
 
 G_END_DECLS
 
-#endif /* __GST_PLAY_SIGNAL_ADAPTER_H__ */
+#endif /* __GTL_GST_PLAY_SIGNAL_ADAPTER_H__ */
diff --git a/subprojects/gstreamer-player-1.0/gst/play/gstplay-types.h b/subprojects/gstreamer-player-1.0/gst/play/gstplay-types.h
index da6c19f..303fa40 100644
--- a/subprojects/gstreamer-player-1.0/gst/play/gstplay-types.h
+++ b/subprojects/gstreamer-player-1.0/gst/play/gstplay-types.h
@@ -18,8 +18,8 @@
  * Boston, MA 02110-1301, USA.
  */
 
-#ifndef __GST_PLAY_TYPES_H__
-#define __GST_PLAY_TYPES_H__
+#ifndef __GTL_GST_PLAY_TYPES_H__
+#define __GTL_GST_PLAY_TYPES_H__
 
 #include <gst/gst.h>
 #include <gst/play/play-prelude.h>
@@ -27,21 +27,21 @@
 G_BEGIN_DECLS
 
 /**
- * GstPlay:
+ * GtkGstPlay:
  * Since: 1.20
  */
-typedef struct _GstPlay GstPlay;
-typedef struct _GstPlayClass GstPlayClass;
+typedef struct _GstPlay GtkGstPlay;
+typedef struct _GstPlayClass GtkGstPlayClass;
 
 /**
- * GstPlaySignalAdapter:
+ * GtkGstPlaySignalAdapter:
  * Since: 1.20
  */
-typedef struct _GstPlaySignalAdapter GstPlaySignalAdapter;
-typedef struct _GstPlaySignalAdapterClass GstPlaySignalAdapterClass;
+typedef struct _GstPlaySignalAdapter GtkGstPlaySignalAdapter;
+typedef struct _GstPlaySignalAdapterClass GtkGstPlaySignalAdapterClass;
 
 G_END_DECLS
 
-#endif /* __GST_PLAY_TYPES_H__ */
+#endif /* __GTL_GST_PLAY_TYPES_H__ */
 
 
diff --git a/subprojects/gstreamer-player-1.0/gst/play/gstplay-video-overlay-video-renderer.c b/subprojects/gstreamer-player-1.0/gst/play/gstplay-video-overlay-video-renderer.c
index f1005bd..d685d90 100644
--- a/subprojects/gstreamer-player-1.0/gst/play/gstplay-video-overlay-video-renderer.c
+++ b/subprojects/gstreamer-player-1.0/gst/play/gstplay-video-overlay-video-renderer.c
@@ -20,7 +20,7 @@
 
 /**
  * SECTION:gstplay-videooverlayvideorenderer
- * @title: GstPlayVideoOverlayVideoRenderer
+ * @title: GtkGstPlayVideoOverlayVideoRenderer
  * @short_description: Play Video Overlay Video Renderer
  *
  */
@@ -51,8 +51,8 @@ struct _GstPlayVideoOverlayVideoRendererClass
 };
 
 static void
-    gst_play_video_overlay_video_renderer_interface_init
-    (GstPlayVideoRendererInterface * iface);
+    gtk_gst_play_video_overlay_video_renderer_interface_init
+    (GtkGstPlayVideoRendererInterface * iface);
 
 enum
 {
@@ -62,21 +62,21 @@ enum
   VIDEO_OVERLAY_VIDEO_RENDERER_PROP_LAST
 };
 
-G_DEFINE_TYPE_WITH_CODE (GstPlayVideoOverlayVideoRenderer,
-    gst_play_video_overlay_video_renderer, G_TYPE_OBJECT,
+G_DEFINE_TYPE_WITH_CODE (GtkGstPlayVideoOverlayVideoRenderer,
+    gtk_gst_play_video_overlay_video_renderer, G_TYPE_OBJECT,
     G_IMPLEMENT_INTERFACE (GST_TYPE_PLAY_VIDEO_RENDERER,
-        gst_play_video_overlay_video_renderer_interface_init));
+        gtk_gst_play_video_overlay_video_renderer_interface_init));
 
 static GParamSpec
     * video_overlay_video_renderer_param_specs
     [VIDEO_OVERLAY_VIDEO_RENDERER_PROP_LAST] = { NULL, };
 
 static void
-gst_play_video_overlay_video_renderer_set_property (GObject * object,
+gtk_gst_play_video_overlay_video_renderer_set_property (GObject * object,
     guint prop_id, const GValue * value, GParamSpec * pspec)
 {
-  GstPlayVideoOverlayVideoRenderer *self =
-      GST_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER (object);
+  GtkGstPlayVideoOverlayVideoRenderer *self =
+      GTL_GST_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER (object);
 
   switch (prop_id) {
     case VIDEO_OVERLAY_VIDEO_RENDERER_PROP_WINDOW_HANDLE:
@@ -95,11 +95,11 @@ gst_play_video_overlay_video_renderer_set_property (GObject * object,
 }
 
 static void
-gst_play_video_overlay_video_renderer_get_property (GObject * object,
+gtk_gst_play_video_overlay_video_renderer_get_property (GObject * object,
     guint prop_id, GValue * value, GParamSpec * pspec)
 {
-  GstPlayVideoOverlayVideoRenderer *self =
-      GST_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER (object);
+  GtkGstPlayVideoOverlayVideoRenderer *self =
+      GTL_GST_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER (object);
 
   switch (prop_id) {
     case VIDEO_OVERLAY_VIDEO_RENDERER_PROP_WINDOW_HANDLE:
@@ -115,10 +115,10 @@ gst_play_video_overlay_video_renderer_get_property (GObject * object,
 }
 
 static void
-gst_play_video_overlay_video_renderer_finalize (GObject * object)
+gtk_gst_play_video_overlay_video_renderer_finalize (GObject * object)
 {
-  GstPlayVideoOverlayVideoRenderer *self =
-      GST_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER (object);
+  GtkGstPlayVideoOverlayVideoRenderer *self =
+      GTL_GST_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER (object);
 
   if (self->video_overlay)
     gst_object_unref (self->video_overlay);
@@ -127,20 +127,20 @@ gst_play_video_overlay_video_renderer_finalize (GObject * object)
     gst_object_unref (self->video_sink);
 
   G_OBJECT_CLASS
-      (gst_play_video_overlay_video_renderer_parent_class)->finalize (object);
+      (gtk_gst_play_video_overlay_video_renderer_parent_class)->finalize (object);
 }
 
 static void
-    gst_play_video_overlay_video_renderer_class_init
-    (GstPlayVideoOverlayVideoRendererClass * klass)
+    gtk_gst_play_video_overlay_video_renderer_class_init
+    (GtkGstPlayVideoOverlayVideoRendererClass * klass)
 {
   GObjectClass *gobject_class = G_OBJECT_CLASS (klass);
 
   gobject_class->set_property =
-      gst_play_video_overlay_video_renderer_set_property;
+      gtk_gst_play_video_overlay_video_renderer_set_property;
   gobject_class->get_property =
-      gst_play_video_overlay_video_renderer_get_property;
-  gobject_class->finalize = gst_play_video_overlay_video_renderer_finalize;
+      gtk_gst_play_video_overlay_video_renderer_get_property;
+  gobject_class->finalize = gtk_gst_play_video_overlay_video_renderer_finalize;
 
   video_overlay_video_renderer_param_specs
       [VIDEO_OVERLAY_VIDEO_RENDERER_PROP_WINDOW_HANDLE] =
@@ -160,24 +160,24 @@ static void
 }
 
 static void
-    gst_play_video_overlay_video_renderer_init
-    (GstPlayVideoOverlayVideoRenderer * self)
+    gtk_gst_play_video_overlay_video_renderer_init
+    (GtkGstPlayVideoOverlayVideoRenderer * self)
 {
   self->x = self->y = self->width = self->height = -1;
   self->video_sink = NULL;
 }
 
-static GstElement *gst_play_video_overlay_video_renderer_create_video_sink
-    (GstPlayVideoRenderer * iface, GstPlay * play)
+static GstElement *gtk_gst_play_video_overlay_video_renderer_create_video_sink
+    (GtkGstPlayVideoRenderer * iface, GtkGstPlay * play)
 {
   GstElement *video_overlay;
-  GstPlayVideoOverlayVideoRenderer *self =
-      GST_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER (iface);
+  GtkGstPlayVideoOverlayVideoRenderer *self =
+      GTL_GST_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER (iface);
 
   if (self->video_overlay)
     gst_object_unref (self->video_overlay);
 
-  video_overlay = gst_play_get_pipeline (play);
+  video_overlay = gtk_gst_play_get_pipeline (play);
   g_return_val_if_fail (GST_IS_VIDEO_OVERLAY (video_overlay), NULL);
 
   self->video_overlay = GST_VIDEO_OVERLAY (video_overlay);
@@ -192,29 +192,29 @@ static GstElement *gst_play_video_overlay_video_renderer_create_video_sink
 }
 
 static void
-    gst_play_video_overlay_video_renderer_interface_init
-    (GstPlayVideoRendererInterface * iface)
+    gtk_gst_play_video_overlay_video_renderer_interface_init
+    (GtkGstPlayVideoRendererInterface * iface)
 {
   iface->create_video_sink =
-      gst_play_video_overlay_video_renderer_create_video_sink;
+      gtk_gst_play_video_overlay_video_renderer_create_video_sink;
 }
 
 /**
- * gst_play_video_overlay_video_renderer_new:
+ * gtk_gst_play_video_overlay_video_renderer_new:
  * @window_handle: (allow-none): Window handle to use or %NULL
  *
  * Returns: (transfer full):
  * Since: 1.20
  */
-GstPlayVideoRenderer *
-gst_play_video_overlay_video_renderer_new (gpointer window_handle)
+GtkGstPlayVideoRenderer *
+gtk_gst_play_video_overlay_video_renderer_new (gpointer window_handle)
 {
   return g_object_new (GST_TYPE_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER,
       "window-handle", window_handle, NULL);
 }
 
 /**
- * gst_play_video_overlay_video_renderer_new_with_sink:
+ * gtk_gst_play_video_overlay_video_renderer_new_with_sink:
  * @window_handle: (allow-none): Window handle to use or %NULL
  * @video_sink: (transfer floating): the custom video_sink element to be set for the video renderer
  *
@@ -222,8 +222,8 @@ gst_play_video_overlay_video_renderer_new (gpointer window_handle)
  *
  * Since: 1.20
  */
-GstPlayVideoRenderer *
-gst_play_video_overlay_video_renderer_new_with_sink (gpointer window_handle,
+GtkGstPlayVideoRenderer *
+gtk_gst_play_video_overlay_video_renderer_new_with_sink (gpointer window_handle,
     GstElement * video_sink)
 {
   return g_object_new (GST_TYPE_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER,
@@ -231,16 +231,16 @@ gst_play_video_overlay_video_renderer_new_with_sink (gpointer window_handle,
 }
 
 /**
- * gst_play_video_overlay_video_renderer_set_window_handle:
- * @self: #GstPlayVideoRenderer instance
+ * gtk_gst_play_video_overlay_video_renderer_set_window_handle:
+ * @self: #GtkGstPlayVideoRenderer instance
  * @window_handle: handle referencing to the platform specific window
  *
  * Sets the platform specific window handle into which the video
  * should be rendered
  * Since: 1.20
  **/
-void gst_play_video_overlay_video_renderer_set_window_handle
-    (GstPlayVideoOverlayVideoRenderer * self, gpointer window_handle)
+void gtk_gst_play_video_overlay_video_renderer_set_window_handle
+    (GtkGstPlayVideoOverlayVideoRenderer * self, gpointer window_handle)
 {
   g_return_if_fail (GST_IS_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER (self));
 
@@ -248,16 +248,16 @@ void gst_play_video_overlay_video_renderer_set_window_handle
 }
 
 /**
- * gst_play_video_overlay_video_renderer_get_window_handle:
- * @self: #GstPlayVideoRenderer instance
+ * gtk_gst_play_video_overlay_video_renderer_get_window_handle:
+ * @self: #GtkGstPlayVideoRenderer instance
  *
  * Returns: (transfer none): The currently set, platform specific window
  * handle
  * Since: 1.20
  */
 gpointer
-    gst_play_video_overlay_video_renderer_get_window_handle
-    (GstPlayVideoOverlayVideoRenderer * self) {
+    gtk_gst_play_video_overlay_video_renderer_get_window_handle
+    (GtkGstPlayVideoOverlayVideoRenderer * self) {
   gpointer window_handle;
 
   g_return_val_if_fail (GST_IS_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER (self), NULL);
@@ -268,15 +268,15 @@ gpointer
 }
 
 /**
- * gst_play_video_overlay_video_renderer_expose:
- * @self: a #GstPlayVideoOverlayVideoRenderer instance.
+ * gtk_gst_play_video_overlay_video_renderer_expose:
+ * @self: a #GtkGstPlayVideoOverlayVideoRenderer instance.
  *
  * Tell an overlay that it has been exposed. This will redraw the current frame
  * in the drawable even if the pipeline is PAUSED.
  * Since: 1.20
  */
-void gst_play_video_overlay_video_renderer_expose
-    (GstPlayVideoOverlayVideoRenderer * self)
+void gtk_gst_play_video_overlay_video_renderer_expose
+    (GtkGstPlayVideoOverlayVideoRenderer * self)
 {
   g_return_if_fail (GST_IS_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER (self));
 
@@ -285,19 +285,19 @@ void gst_play_video_overlay_video_renderer_expose
 }
 
 /**
- * gst_play_video_overlay_video_renderer_set_render_rectangle:
- * @self: a #GstPlayVideoOverlayVideoRenderer instance
+ * gtk_gst_play_video_overlay_video_renderer_set_render_rectangle:
+ * @self: a #GtkGstPlayVideoOverlayVideoRenderer instance
  * @x: the horizontal offset of the render area inside the window
  * @y: the vertical offset of the render area inside the window
  * @width: the width of the render area inside the window
  * @height: the height of the render area inside the window
  *
  * Configure a subregion as a video target within the window set by
- * gst_play_video_overlay_video_renderer_set_window_handle(). If this is not
+ * gtk_gst_play_video_overlay_video_renderer_set_window_handle(). If this is not
  * used or not supported the video will fill the area of the window set as the
  * overlay to 100%. By specifying the rectangle, the video can be overlaid to
  * a specific region of that window only. After setting the new rectangle one
- * should call gst_play_video_overlay_video_renderer_expose() to force a
+ * should call gtk_gst_play_video_overlay_video_renderer_expose() to force a
  * redraw. To unset the region pass -1 for the @width and @height parameters.
  *
  * This method is needed for non fullscreen video overlay in UI toolkits that
@@ -305,8 +305,8 @@ void gst_play_video_overlay_video_renderer_expose
  *
  * Since: 1.20
  */
-void gst_play_video_overlay_video_renderer_set_render_rectangle
-    (GstPlayVideoOverlayVideoRenderer * self, gint x, gint y, gint width,
+void gtk_gst_play_video_overlay_video_renderer_set_render_rectangle
+    (GtkGstPlayVideoOverlayVideoRenderer * self, gint x, gint y, gint width,
     gint height)
 {
   g_return_if_fail (GST_IS_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER (self));
@@ -322,20 +322,20 @@ void gst_play_video_overlay_video_renderer_set_render_rectangle
 }
 
 /**
- * gst_play_video_overlay_video_renderer_get_render_rectangle:
- * @self: a #GstPlayVideoOverlayVideoRenderer instance
+ * gtk_gst_play_video_overlay_video_renderer_get_render_rectangle:
+ * @self: a #GtkGstPlayVideoOverlayVideoRenderer instance
  * @x: (out) (allow-none): the horizontal offset of the render area inside the window
  * @y: (out) (allow-none): the vertical offset of the render area inside the window
  * @width: (out) (allow-none): the width of the render area inside the window
  * @height: (out) (allow-none): the height of the render area inside the window
  *
- * Return the currently configured render rectangle. See gst_play_video_overlay_video_renderer_set_render_rectangle()
+ * Return the currently configured render rectangle. See gtk_gst_play_video_overlay_video_renderer_set_render_rectangle()
  * for details.
  *
  * Since: 1.20
  */
-void gst_play_video_overlay_video_renderer_get_render_rectangle
-    (GstPlayVideoOverlayVideoRenderer * self, gint * x, gint * y,
+void gtk_gst_play_video_overlay_video_renderer_get_render_rectangle
+    (GtkGstPlayVideoOverlayVideoRenderer * self, gint * x, gint * y,
     gint * width, gint * height)
 {
   g_return_if_fail (GST_IS_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER (self));
diff --git a/subprojects/gstreamer-player-1.0/gst/play/gstplay-video-overlay-video-renderer.h b/subprojects/gstreamer-player-1.0/gst/play/gstplay-video-overlay-video-renderer.h
index 2d3b701..8a3e7a1 100644
--- a/subprojects/gstreamer-player-1.0/gst/play/gstplay-video-overlay-video-renderer.h
+++ b/subprojects/gstreamer-player-1.0/gst/play/gstplay-video-overlay-video-renderer.h
@@ -18,8 +18,8 @@
  * Boston, MA 02110-1301, USA.
  */
 
-#ifndef __GST_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER_H__
-#define __GST_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER_H__
+#ifndef __GTL_GST_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER_H__
+#define __GTL_GST_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER_H__
 
 #include <gst/play/gstplay-types.h>
 #include <gst/play/gstplay-video-renderer.h>
@@ -27,55 +27,55 @@
 G_BEGIN_DECLS
 
 /**
- * GstPlayVideoOverlayVideoRenderer:
+ * GtkGstPlayVideoOverlayVideoRenderer:
  * Since: 1.20
  */
 typedef struct _GstPlayVideoOverlayVideoRenderer
-    GstPlayVideoOverlayVideoRenderer;
+    GtkGstPlayVideoOverlayVideoRenderer;
 typedef struct _GstPlayVideoOverlayVideoRendererClass
-    GstPlayVideoOverlayVideoRendererClass;
+    GtkGstPlayVideoOverlayVideoRendererClass;
 
-#define GST_TYPE_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER             (gst_play_video_overlay_video_renderer_get_type ())
+#define GST_TYPE_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER             (gtk_gst_play_video_overlay_video_renderer_get_type ())
 #define GST_IS_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER))
 #define GST_IS_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER_CLASS(klass)  (G_TYPE_CHECK_CLASS_TYPE ((klass), GST_TYPE_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER))
-#define GST_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GST_TYPE_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER, GstPlayVideoOverlayVideoRendererClass))
-#define GST_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER, GstPlayVideoOverlayVideoRenderer))
-#define GST_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER, GstPlayVideoOverlayVideoRendererClass))
+#define GTL_GST_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GST_TYPE_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER, GtkGstPlayVideoOverlayVideoRendererClass))
+#define GTL_GST_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER, GtkGstPlayVideoOverlayVideoRenderer))
+#define GTL_GST_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER, GtkGstPlayVideoOverlayVideoRendererClass))
 
 /**
- * GST_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER_CAST:
+ * GTL_GST_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER_CAST:
  * Since: 1.20
  */
-#define GST_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER_CAST(obj)        ((GstPlayVideoOverlayVideoRenderer*)(obj))
+#define GTL_GST_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER_CAST(obj)        ((GtkGstPlayVideoOverlayVideoRenderer*)(obj))
 
 #ifdef G_DEFINE_AUTOPTR_CLEANUP_FUNC
-G_DEFINE_AUTOPTR_CLEANUP_FUNC(GstPlayVideoOverlayVideoRenderer, g_object_unref)
+G_DEFINE_AUTOPTR_CLEANUP_FUNC(GtkGstPlayVideoOverlayVideoRenderer, g_object_unref)
 #endif
 
-GST_PLAY_API
-GType gst_play_video_overlay_video_renderer_get_type (void);
+GTL_GST_PLAY_API
+GType gtk_gst_play_video_overlay_video_renderer_get_type (void);
 
-GST_PLAY_API
-GstPlayVideoRenderer * gst_play_video_overlay_video_renderer_new (gpointer window_handle);
+GTL_GST_PLAY_API
+GtkGstPlayVideoRenderer * gtk_gst_play_video_overlay_video_renderer_new (gpointer window_handle);
 
-GST_PLAY_API
-GstPlayVideoRenderer * gst_play_video_overlay_video_renderer_new_with_sink (gpointer window_handle, GstElement * video_sink);
+GTL_GST_PLAY_API
+GtkGstPlayVideoRenderer * gtk_gst_play_video_overlay_video_renderer_new_with_sink (gpointer window_handle, GstElement * video_sink);
 
-GST_PLAY_API
-void gst_play_video_overlay_video_renderer_set_window_handle (GstPlayVideoOverlayVideoRenderer * self, gpointer window_handle);
+GTL_GST_PLAY_API
+void gtk_gst_play_video_overlay_video_renderer_set_window_handle (GtkGstPlayVideoOverlayVideoRenderer * self, gpointer window_handle);
 
-GST_PLAY_API
-gpointer gst_play_video_overlay_video_renderer_get_window_handle (GstPlayVideoOverlayVideoRenderer * self);
+GTL_GST_PLAY_API
+gpointer gtk_gst_play_video_overlay_video_renderer_get_window_handle (GtkGstPlayVideoOverlayVideoRenderer * self);
 
-GST_PLAY_API
-void gst_play_video_overlay_video_renderer_expose (GstPlayVideoOverlayVideoRenderer * self);
+GTL_GST_PLAY_API
+void gtk_gst_play_video_overlay_video_renderer_expose (GtkGstPlayVideoOverlayVideoRenderer * self);
 
-GST_PLAY_API
-void gst_play_video_overlay_video_renderer_set_render_rectangle (GstPlayVideoOverlayVideoRenderer * self, gint x, gint y, gint width, gint height);
+GTL_GST_PLAY_API
+void gtk_gst_play_video_overlay_video_renderer_set_render_rectangle (GtkGstPlayVideoOverlayVideoRenderer * self, gint x, gint y, gint width, gint height);
 
-GST_PLAY_API
-void gst_play_video_overlay_video_renderer_get_render_rectangle (GstPlayVideoOverlayVideoRenderer * self, gint *x, gint *y, gint *width, gint *height);
+GTL_GST_PLAY_API
+void gtk_gst_play_video_overlay_video_renderer_get_render_rectangle (GtkGstPlayVideoOverlayVideoRenderer * self, gint *x, gint *y, gint *width, gint *height);
 
 G_END_DECLS
 
-#endif /* __GST_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER_H__ */
+#endif /* __GTL_GST_PLAY_VIDEO_OVERLAY_VIDEO_RENDERER_H__ */
diff --git a/subprojects/gstreamer-player-1.0/gst/play/gstplay-video-renderer-private.h b/subprojects/gstreamer-player-1.0/gst/play/gstplay-video-renderer-private.h
index 2131134..09c9b04 100644
--- a/subprojects/gstreamer-player-1.0/gst/play/gstplay-video-renderer-private.h
+++ b/subprojects/gstreamer-player-1.0/gst/play/gstplay-video-renderer-private.h
@@ -18,16 +18,16 @@
  * Boston, MA 02110-1301, USA.
  */
 
-#ifndef __GST_PLAY_VIDEO_RENDERER_PRIVATE_H__
-#define __GST_PLAY_VIDEO_RENDERER_PRIVATE_H__
+#ifndef __GTL_GST_PLAY_VIDEO_RENDERER_PRIVATE_H__
+#define __GTL_GST_PLAY_VIDEO_RENDERER_PRIVATE_H__
 
 #include <gst/play/gstplay-video-renderer.h>
 
 G_BEGIN_DECLS
 
-G_GNUC_INTERNAL GstElement * gst_play_video_renderer_create_video_sink (GstPlayVideoRenderer *
-    self, GstPlay * play);
+G_GNUC_INTERNAL GstElement * gtk_gst_play_video_renderer_create_video_sink (GtkGstPlayVideoRenderer *
+    self, GtkGstPlay * play);
 
 G_END_DECLS
 
-#endif /* __GST_PLAY_VIDEO_RENDERER_PRIVATE_H__ */
+#endif /* __GTL_GST_PLAY_VIDEO_RENDERER_PRIVATE_H__ */
diff --git a/subprojects/gstreamer-player-1.0/gst/play/gstplay-video-renderer.c b/subprojects/gstreamer-player-1.0/gst/play/gstplay-video-renderer.c
index ba48f85..4f54646 100644
--- a/subprojects/gstreamer-player-1.0/gst/play/gstplay-video-renderer.c
+++ b/subprojects/gstreamer-player-1.0/gst/play/gstplay-video-renderer.c
@@ -25,24 +25,24 @@
 #include "gstplay-video-renderer.h"
 #include "gstplay-video-renderer-private.h"
 
-G_DEFINE_INTERFACE (GstPlayVideoRenderer, gst_play_video_renderer,
+G_DEFINE_INTERFACE (GtkGstPlayVideoRenderer, gtk_gst_play_video_renderer,
     G_TYPE_OBJECT);
 
 static void
-gst_play_video_renderer_default_init (G_GNUC_UNUSED
-    GstPlayVideoRendererInterface * iface)
+gtk_gst_play_video_renderer_default_init (G_GNUC_UNUSED
+    GtkGstPlayVideoRendererInterface * iface)
 {
 
 }
 
 GstElement *
-gst_play_video_renderer_create_video_sink (GstPlayVideoRenderer * self,
-    GstPlay * play)
+gtk_gst_play_video_renderer_create_video_sink (GtkGstPlayVideoRenderer * self,
+    GtkGstPlay * play)
 {
-  GstPlayVideoRendererInterface *iface;
+  GtkGstPlayVideoRendererInterface *iface;
 
   g_return_val_if_fail (GST_IS_PLAY_VIDEO_RENDERER (self), NULL);
-  iface = GST_PLAY_VIDEO_RENDERER_GET_INTERFACE (self);
+  iface = GTL_GST_PLAY_VIDEO_RENDERER_GET_INTERFACE (self);
   g_return_val_if_fail (iface->create_video_sink != NULL, NULL);
 
   return iface->create_video_sink (self, play);
diff --git a/subprojects/gstreamer-player-1.0/gst/play/gstplay-video-renderer.h b/subprojects/gstreamer-player-1.0/gst/play/gstplay-video-renderer.h
index 802b57b..f633218 100644
--- a/subprojects/gstreamer-player-1.0/gst/play/gstplay-video-renderer.h
+++ b/subprojects/gstreamer-player-1.0/gst/play/gstplay-video-renderer.h
@@ -18,8 +18,8 @@
  * Boston, MA 02110-1301, USA.
  */
 
-#ifndef __GST_PLAY_VIDEO_RENDERER_H__
-#define __GST_PLAY_VIDEO_RENDERER_H__
+#ifndef __GTL_GST_PLAY_VIDEO_RENDERER_H__
+#define __GTL_GST_PLAY_VIDEO_RENDERER_H__
 
 #include <gst/gst.h>
 #include <gst/play/gstplay-types.h>
@@ -27,35 +27,35 @@
 G_BEGIN_DECLS
 
 /**
- * GstPlayVideoRenderer:
+ * GtkGstPlayVideoRenderer:
  * Since: 1.20
  */
-typedef struct _GstPlayVideoRenderer GstPlayVideoRenderer;
-typedef struct _GstPlayVideoRendererInterface GstPlayVideoRendererInterface;
+typedef struct _GstPlayVideoRenderer GtkGstPlayVideoRenderer;
+typedef struct _GstPlayVideoRendererInterface GtkGstPlayVideoRendererInterface;
 
-#define GST_TYPE_PLAY_VIDEO_RENDERER                (gst_play_video_renderer_get_type ())
-#define GST_PLAY_VIDEO_RENDERER(obj)                (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PLAY_VIDEO_RENDERER, GstPlayVideoRenderer))
+#define GST_TYPE_PLAY_VIDEO_RENDERER                (gtk_gst_play_video_renderer_get_type ())
+#define GTL_GST_PLAY_VIDEO_RENDERER(obj)                (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PLAY_VIDEO_RENDERER, GtkGstPlayVideoRenderer))
 #define GST_IS_PLAY_VIDEO_RENDERER(obj)             (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_PLAY_VIDEO_RENDERER))
 
 /**
- * GST_PLAY_VIDEO_RENDERER_GET_INTERFACE:
+ * GTL_GST_PLAY_VIDEO_RENDERER_GET_INTERFACE:
  * Since: 1.20
  */
-#define GST_PLAY_VIDEO_RENDERER_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), GST_TYPE_PLAY_VIDEO_RENDERER, GstPlayVideoRendererInterface))
+#define GTL_GST_PLAY_VIDEO_RENDERER_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), GST_TYPE_PLAY_VIDEO_RENDERER, GtkGstPlayVideoRendererInterface))
 
 struct _GstPlayVideoRendererInterface {
   GTypeInterface parent_iface;
 
-  GstElement * (*create_video_sink) (GstPlayVideoRenderer * self, GstPlay * play);
+  GstElement * (*create_video_sink) (GtkGstPlayVideoRenderer * self, GtkGstPlay * play);
 };
 
 #ifdef G_DEFINE_AUTOPTR_CLEANUP_FUNC
-G_DEFINE_AUTOPTR_CLEANUP_FUNC(GstPlayVideoRenderer, g_object_unref)
+G_DEFINE_AUTOPTR_CLEANUP_FUNC(GtkGstPlayVideoRenderer, g_object_unref)
 #endif
 
-GST_PLAY_API
-GType        gst_play_video_renderer_get_type       (void);
+GTL_GST_PLAY_API
+GType        gtk_gst_play_video_renderer_get_type       (void);
 
 G_END_DECLS
 
-#endif /* __GST_PLAY_VIDEO_RENDERER_H__ */
+#endif /* __GTL_GST_PLAY_VIDEO_RENDERER_H__ */
diff --git a/subprojects/gstreamer-player-1.0/gst/play/gstplay-visualization.c b/subprojects/gstreamer-player-1.0/gst/play/gstplay-visualization.c
index c00d223..e7e1566 100644
--- a/subprojects/gstreamer-player-1.0/gst/play/gstplay-visualization.c
+++ b/subprojects/gstreamer-player-1.0/gst/play/gstplay-visualization.c
@@ -21,7 +21,7 @@
 
 /**
  * SECTION:gstplay-visualization
- * @title: GstPlayVisualization
+ * @title: GtkGstPlayVisualization
  * @short_description: Play Visualization
  *
  */
@@ -38,19 +38,19 @@ static GMutex vis_lock;
 static GQueue vis_list = G_QUEUE_INIT;
 static guint32 vis_cookie;
 
-G_DEFINE_BOXED_TYPE (GstPlayVisualization, gst_play_visualization,
-    (GBoxedCopyFunc) gst_play_visualization_copy,
-    (GBoxedFreeFunc) gst_play_visualization_free);
+G_DEFINE_BOXED_TYPE (GtkGstPlayVisualization, gtk_gst_play_visualization,
+    (GBoxedCopyFunc) gtk_gst_play_visualization_copy,
+    (GBoxedFreeFunc) gtk_gst_play_visualization_free);
 
 /**
- * gst_play_visualization_free:
- * @vis: #GstPlayVisualization instance
+ * gtk_gst_play_visualization_free:
+ * @vis: #GtkGstPlayVisualization instance
  *
- * Frees a #GstPlayVisualization.
+ * Frees a #GtkGstPlayVisualization.
  * Since: 1.20
  */
 void
-gst_play_visualization_free (GstPlayVisualization * vis)
+gtk_gst_play_visualization_free (GtkGstPlayVisualization * vis)
 {
   g_return_if_fail (vis != NULL);
 
@@ -60,23 +60,23 @@ gst_play_visualization_free (GstPlayVisualization * vis)
 }
 
 /**
- * gst_play_visualization_copy:
- * @vis: #GstPlayVisualization instance
+ * gtk_gst_play_visualization_copy:
+ * @vis: #GtkGstPlayVisualization instance
  *
- * Makes a copy of the #GstPlayVisualization. The result must be
- * freed using gst_play_visualization_free().
+ * Makes a copy of the #GtkGstPlayVisualization. The result must be
+ * freed using gtk_gst_play_visualization_free().
  *
  * Returns: (transfer full): an allocated copy of @vis.
  * Since: 1.20
  */
-GstPlayVisualization *
-gst_play_visualization_copy (const GstPlayVisualization * vis)
+GtkGstPlayVisualization *
+gtk_gst_play_visualization_copy (const GtkGstPlayVisualization * vis)
 {
-  GstPlayVisualization *ret;
+  GtkGstPlayVisualization *ret;
 
   g_return_val_if_fail (vis != NULL, NULL);
 
-  ret = g_new0 (GstPlayVisualization, 1);
+  ret = g_new0 (GtkGstPlayVisualization, 1);
   ret->name = vis->name ? g_strdup (vis->name) : NULL;
   ret->description = vis->description ? g_strdup (vis->description) : NULL;
 
@@ -84,16 +84,16 @@ gst_play_visualization_copy (const GstPlayVisualization * vis)
 }
 
 /**
- * gst_play_visualizations_free:
- * @viss: a %NULL terminated array of #GstPlayVisualization to free
+ * gtk_gst_play_visualizations_free:
+ * @viss: a %NULL terminated array of #GtkGstPlayVisualization to free
  *
- * Frees a %NULL terminated array of #GstPlayVisualization.
+ * Frees a %NULL terminated array of #GtkGstPlayVisualization.
  * Since: 1.20
  */
 void
-gst_play_visualizations_free (GstPlayVisualization ** viss)
+gtk_gst_play_visualizations_free (GtkGstPlayVisualization ** viss)
 {
-  GstPlayVisualization **p;
+  GtkGstPlayVisualization **p;
 
   g_return_if_fail (viss != NULL);
 
@@ -108,12 +108,12 @@ gst_play_visualizations_free (GstPlayVisualization ** viss)
 }
 
 static void
-gst_play_update_visualization_list (void)
+gtk_gst_play_update_visualization_list (void)
 {
   GList *features;
   GList *l;
   guint32 cookie;
-  GstPlayVisualization *vis;
+  GtkGstPlayVisualization *vis;
 
   g_mutex_lock (&vis_lock);
 
@@ -126,7 +126,7 @@ gst_play_update_visualization_list (void)
 
   /* if update is needed then first free the existing list */
   while ((vis = g_queue_pop_head (&vis_list)))
-    gst_play_visualization_free (vis);
+    gtk_gst_play_visualization_free (vis);
 
   features = gst_registry_get_feature_list (gst_registry_get (),
       GST_TYPE_ELEMENT_FACTORY);
@@ -139,7 +139,7 @@ gst_play_update_visualization_list (void)
         GST_ELEMENT_METADATA_KLASS);
 
     if (strstr (klass, "Visualization")) {
-      vis = g_new0 (GstPlayVisualization, 1);
+      vis = g_new0 (GtkGstPlayVisualization, 1);
 
       vis->name = g_strdup (gst_plugin_feature_get_name (feature));
       vis->description =
@@ -156,27 +156,27 @@ gst_play_update_visualization_list (void)
 }
 
 /**
- * gst_play_visualizations_get:
+ * gtk_gst_play_visualizations_get:
  *
- * Returns: (transfer full) (array zero-terminated=1) (element-type GstPlayVisualization):
+ * Returns: (transfer full) (array zero-terminated=1) (element-type GtkGstPlayVisualization):
  *  a %NULL terminated array containing all available
- *  visualizations. Use gst_play_visualizations_free() after
+ *  visualizations. Use gtk_gst_play_visualizations_free() after
  *  usage.
  * Since: 1.20
  */
-GstPlayVisualization **
-gst_play_visualizations_get (void)
+GtkGstPlayVisualization **
+gtk_gst_play_visualizations_get (void)
 {
   gint i = 0;
   GList *l;
-  GstPlayVisualization **ret;
+  GtkGstPlayVisualization **ret;
 
-  gst_play_update_visualization_list ();
+  gtk_gst_play_update_visualization_list ();
 
   g_mutex_lock (&vis_lock);
-  ret = g_new0 (GstPlayVisualization *, g_queue_get_length (&vis_list) + 1);
+  ret = g_new0 (GtkGstPlayVisualization *, g_queue_get_length (&vis_list) + 1);
   for (l = vis_list.head; l; l = l->next)
-    ret[i++] = gst_play_visualization_copy (l->data);
+    ret[i++] = gtk_gst_play_visualization_copy (l->data);
   g_mutex_unlock (&vis_lock);
 
   return ret;
diff --git a/subprojects/gstreamer-player-1.0/gst/play/gstplay-visualization.h b/subprojects/gstreamer-player-1.0/gst/play/gstplay-visualization.h
index 4c9bc86..3422cc6 100644
--- a/subprojects/gstreamer-player-1.0/gst/play/gstplay-visualization.h
+++ b/subprojects/gstreamer-player-1.0/gst/play/gstplay-visualization.h
@@ -19,21 +19,21 @@
  * Boston, MA 02110-1301, USA.
  */
 
-#ifndef __GST_PLAY_VISUALIZATION_H__
-#define __GST_PLAY_VISUALIZATION_H__
+#ifndef __GTL_GST_PLAY_VISUALIZATION_H__
+#define __GTL_GST_PLAY_VISUALIZATION_H__
 
 #include <gst/gst.h>
 #include <gst/play/play-prelude.h>
 
 G_BEGIN_DECLS
 
-typedef struct _GstPlayVisualization GstPlayVisualization;
+typedef struct _GstPlayVisualization GtkGstPlayVisualization;
 /**
- * GstPlayVisualization:
+ * GtkGstPlayVisualization:
  * @name: name of the visualization.
  * @description: description of the visualization.
  *
- * A #GstPlayVisualization descriptor.
+ * A #GtkGstPlayVisualization descriptor.
  * Since: 1.20
  */
 struct _GstPlayVisualization {
@@ -41,25 +41,25 @@ struct _GstPlayVisualization {
   gchar *description;
 };
 
-GST_PLAY_API
-GType                     gst_play_visualization_get_type (void);
+GTL_GST_PLAY_API
+GType                     gtk_gst_play_visualization_get_type (void);
 
-GST_PLAY_API
-GstPlayVisualization *  gst_play_visualization_copy  (const GstPlayVisualization *vis);
+GTL_GST_PLAY_API
+GtkGstPlayVisualization *  gtk_gst_play_visualization_copy  (const GtkGstPlayVisualization *vis);
 
-GST_PLAY_API
-void                      gst_play_visualization_free  (GstPlayVisualization *vis);
+GTL_GST_PLAY_API
+void                      gtk_gst_play_visualization_free  (GtkGstPlayVisualization *vis);
 
-GST_PLAY_API
-GstPlayVisualization ** gst_play_visualizations_get  (void);
+GTL_GST_PLAY_API
+GtkGstPlayVisualization ** gtk_gst_play_visualizations_get  (void);
 
-GST_PLAY_API
-void                      gst_play_visualizations_free (GstPlayVisualization **viss);
+GTL_GST_PLAY_API
+void                      gtk_gst_play_visualizations_free (GtkGstPlayVisualization **viss);
 
 #ifdef G_DEFINE_AUTOPTR_CLEANUP_FUNC
-G_DEFINE_AUTOPTR_CLEANUP_FUNC(GstPlayVisualization, gst_play_visualization_free)
+G_DEFINE_AUTOPTR_CLEANUP_FUNC(GtkGstPlayVisualization, gtk_gst_play_visualization_free)
 #endif
 
 G_END_DECLS
 
-#endif /* __GST_PLAY_VISUALIZATION_H__ */
+#endif /* __GTL_GST_PLAY_VISUALIZATION_H__ */
diff --git a/subprojects/gstreamer-player-1.0/gst/play/gstplay.c b/subprojects/gstreamer-player-1.0/gst/play/gstplay.c
index f99bbe1..24b3e44 100644
--- a/subprojects/gstreamer-player-1.0/gst/play/gstplay.c
+++ b/subprojects/gstreamer-player-1.0/gst/play/gstplay.c
@@ -23,10 +23,10 @@
 
 /**
  * SECTION:gstplay
- * @title: GstPlay
+ * @title: GtkGstPlay
  * @short_description: Player
  * @symbols:
- * - GstPlay
+ * - GtkGstPlay
  *
  * Since: 1.20
  */
@@ -61,8 +61,8 @@
 
 #include <string.h>
 
-GST_DEBUG_CATEGORY_STATIC (gst_play_debug);
-#define GST_CAT_DEFAULT gst_play_debug
+GST_DEBUG_CATEGORY_STATIC (gtk_gst_play_debug);
+#define GST_CAT_DEFAULT gtk_gst_play_debug
 
 #define DEFAULT_URI NULL
 #define DEFAULT_POSITION GST_CLOCK_TIME_NONE
@@ -75,11 +75,11 @@ GST_DEBUG_CATEGORY_STATIC (gst_play_debug);
 #define DEFAULT_SUBTITLE_VIDEO_OFFSET 0
 
 /**
- * gst_play_error_quark:
+ * gtk_gst_play_error_quark:
  * Since: 1.20
  */
 GQuark
-gst_play_error_quark (void)
+gtk_gst_play_error_quark (void)
 {
   return g_quark_from_static_string ("gst-play-error-quark");
 }
@@ -131,17 +131,17 @@ enum
 
 enum
 {
-  GST_PLAY_FLAG_VIDEO = (1 << 0),
-  GST_PLAY_FLAG_AUDIO = (1 << 1),
-  GST_PLAY_FLAG_SUBTITLE = (1 << 2),
-  GST_PLAY_FLAG_VIS = (1 << 3)
+  GTL_GST_PLAY_FLAG_VIDEO = (1 << 0),
+  GTL_GST_PLAY_FLAG_AUDIO = (1 << 1),
+  GTL_GST_PLAY_FLAG_SUBTITLE = (1 << 2),
+  GTL_GST_PLAY_FLAG_VIS = (1 << 3)
 };
 
 struct _GstPlay
 {
   GstObject parent;
 
-  GstPlayVideoRenderer *video_renderer;
+  GtkGstPlayVideoRenderer *video_renderer;
 
   gchar *uri;
   gchar *redirect_uri;
@@ -166,12 +166,12 @@ struct _GstPlay
 
   gdouble rate;
 
-  GstPlayState app_state;
+  GtkGstPlayState app_state;
 
   gint buffering_percent;
 
   GstTagList *global_tags;
-  GstPlayMediaInfo *media_info;
+  GtkGstPlayMediaInfo *media_info;
 
   GstElement *current_vis_element;
 
@@ -197,80 +197,80 @@ struct _GstPlayClass
   GstObjectClass parent_class;
 };
 
-#define parent_class gst_play_parent_class
-G_DEFINE_TYPE (GstPlay, gst_play, GST_TYPE_OBJECT);
+#define parent_class gtk_gst_play_parent_class
+G_DEFINE_TYPE (GtkGstPlay, gtk_gst_play, GST_TYPE_OBJECT);
 
 static GParamSpec *param_specs[PROP_LAST] = { NULL, };
 
-static void gst_play_dispose (GObject * object);
-static void gst_play_finalize (GObject * object);
-static void gst_play_set_property (GObject * object, guint prop_id,
+static void gtk_gst_play_dispose (GObject * object);
+static void gtk_gst_play_finalize (GObject * object);
+static void gtk_gst_play_set_property (GObject * object, guint prop_id,
     const GValue * value, GParamSpec * pspec);
-static void gst_play_get_property (GObject * object, guint prop_id,
+static void gtk_gst_play_get_property (GObject * object, guint prop_id,
     GValue * value, GParamSpec * pspec);
-static void gst_play_constructed (GObject * object);
+static void gtk_gst_play_constructed (GObject * object);
 
-static gpointer gst_play_main (gpointer data);
+static gpointer gtk_gst_play_main (gpointer data);
 
-static void gst_play_set_playbin_video_sink (GstPlay * self);
+static void gtk_gst_play_set_playbin_video_sink (GtkGstPlay * self);
 
-static void gst_play_seek_internal_locked (GstPlay * self);
-static void gst_play_stop_internal (GstPlay * self, gboolean transient);
-static gboolean gst_play_pause_internal (gpointer user_data);
-static gboolean gst_play_play_internal (gpointer user_data);
-static gboolean gst_play_seek_internal (gpointer user_data);
-static void gst_play_set_rate_internal (GstPlay * self);
-static void change_state (GstPlay * self, GstPlayState state);
+static void gtk_gst_play_seek_internal_locked (GtkGstPlay * self);
+static void gtk_gst_play_stop_internal (GtkGstPlay * self, gboolean transient);
+static gboolean gtk_gst_play_pause_internal (gpointer user_data);
+static gboolean gtk_gst_play_play_internal (gpointer user_data);
+static gboolean gtk_gst_play_seek_internal (gpointer user_data);
+static void gtk_gst_play_set_rate_internal (GtkGstPlay * self);
+static void change_state (GtkGstPlay * self, GtkGstPlayState state);
 
-static GstPlayMediaInfo *gst_play_media_info_create (GstPlay * self);
+static GtkGstPlayMediaInfo *gtk_gst_play_media_info_create (GtkGstPlay * self);
 
-static void gst_play_streams_info_create (GstPlay * self,
-    GstPlayMediaInfo * media_info, const gchar * prop, GType type);
-static void gst_play_stream_info_update (GstPlay * self, GstPlayStreamInfo * s);
-static void gst_play_stream_info_update_tags_and_caps (GstPlay * self,
-    GstPlayStreamInfo * s);
-static GstPlayStreamInfo *gst_play_stream_info_find (GstPlayMediaInfo *
+static void gtk_gst_play_streams_info_create (GtkGstPlay * self,
+    GtkGstPlayMediaInfo * media_info, const gchar * prop, GType type);
+static void gtk_gst_play_stream_info_update (GtkGstPlay * self, GtkGstPlayStreamInfo * s);
+static void gtk_gst_play_stream_info_update_tags_and_caps (GtkGstPlay * self,
+    GtkGstPlayStreamInfo * s);
+static GtkGstPlayStreamInfo *gtk_gst_play_stream_info_find (GtkGstPlayMediaInfo *
     media_info, GType type, gint stream_index);
-static GstPlayStreamInfo *gst_play_stream_info_get_current (GstPlay *
+static GtkGstPlayStreamInfo *gtk_gst_play_stream_info_get_current (GtkGstPlay *
     self, const gchar * prop, GType type);
 
-static void gst_play_video_info_update (GstPlay * self,
-    GstPlayStreamInfo * stream_info);
-static void gst_play_audio_info_update (GstPlay * self,
-    GstPlayStreamInfo * stream_info);
-static void gst_play_subtitle_info_update (GstPlay * self,
-    GstPlayStreamInfo * stream_info);
+static void gtk_gst_play_video_info_update (GtkGstPlay * self,
+    GtkGstPlayStreamInfo * stream_info);
+static void gtk_gst_play_audio_info_update (GtkGstPlay * self,
+    GtkGstPlayStreamInfo * stream_info);
+static void gtk_gst_play_subtitle_info_update (GtkGstPlay * self,
+    GtkGstPlayStreamInfo * stream_info);
 
 /* For playbin3 */
-static void gst_play_streams_info_create_from_collection (GstPlay * self,
-    GstPlayMediaInfo * media_info, GstStreamCollection * collection);
-static void gst_play_stream_info_update_from_stream (GstPlay * self,
-    GstPlayStreamInfo * s, GstStream * stream);
-static GstPlayStreamInfo *gst_play_stream_info_find_from_stream_id
-    (GstPlayMediaInfo * media_info, const gchar * stream_id);
-static GstPlayStreamInfo *gst_play_stream_info_get_current_from_stream_id
-    (GstPlay * self, const gchar * stream_id, GType type);
+static void gtk_gst_play_streams_info_create_from_collection (GtkGstPlay * self,
+    GtkGstPlayMediaInfo * media_info, GstStreamCollection * collection);
+static void gtk_gst_play_stream_info_update_from_stream (GtkGstPlay * self,
+    GtkGstPlayStreamInfo * s, GstStream * stream);
+static GtkGstPlayStreamInfo *gtk_gst_play_stream_info_find_from_stream_id
+    (GtkGstPlayMediaInfo * media_info, const gchar * stream_id);
+static GtkGstPlayStreamInfo *gtk_gst_play_stream_info_get_current_from_stream_id
+    (GtkGstPlay * self, const gchar * stream_id, GType type);
 static void stream_notify_cb (GstStreamCollection * collection,
-    GstStream * stream, GParamSpec * pspec, GstPlay * self);
+    GstStream * stream, GParamSpec * pspec, GtkGstPlay * self);
 
-static void on_media_info_updated (GstPlay * self);
+static void on_media_info_updated (GtkGstPlay * self);
 
 static void *get_title (GstTagList * tags);
 static void *get_container_format (GstTagList * tags);
-static void *get_from_tags (GstPlay * self, GstPlayMediaInfo * media_info,
+static void *get_from_tags (GtkGstPlay * self, GtkGstPlayMediaInfo * media_info,
     void *(*func) (GstTagList *));
 static void *get_cover_sample (GstTagList * tags);
 
-static void remove_seek_source (GstPlay * self);
+static void remove_seek_source (GtkGstPlay * self);
 
-static gboolean query_position (GstPlay * self, GstClockTime * position);
+static gboolean query_position (GtkGstPlay * self, GstClockTime * position);
 
 static void
-gst_play_init (GstPlay * self)
+gtk_gst_play_init (GtkGstPlay * self)
 {
   GST_TRACE_OBJECT (self, "Initializing");
 
-  self = gst_play_get_instance_private (self);
+  self = gtk_gst_play_get_instance_private (self);
 
   g_mutex_init (&self->lock);
   g_cond_init (&self->cond);
@@ -300,7 +300,7 @@ gst_play_init (GstPlay * self)
  * Works same as gst_structure_set to set field/type/value triplets on message data
  */
 static void
-api_bus_post_message (GstPlay * self, GstPlayMessage message_type,
+api_bus_post_message (GtkGstPlay * self, GtkGstPlayMessage message_type,
     const gchar * firstfield, ...)
 {
   GstStructure *message_data = NULL;
@@ -308,9 +308,9 @@ api_bus_post_message (GstPlay * self, GstPlayMessage message_type,
   va_list varargs;
 
   GST_INFO ("Posting API-bus message-type: %s",
-      gst_play_message_get_name (message_type));
-  message_data = gst_structure_new (GST_PLAY_MESSAGE_DATA,
-      GST_PLAY_MESSAGE_DATA_TYPE, GST_TYPE_PLAY_MESSAGE, message_type, NULL);
+      gtk_gst_play_message_get_name (message_type));
+  message_data = gst_structure_new (GTL_GST_PLAY_MESSAGE_DATA,
+      GTL_GST_PLAY_MESSAGE_DATA_TYPE, GST_TYPE_PLAY_MESSAGE, message_type, NULL);
 
   va_start (varargs, firstfield);
   gst_structure_set_valist (message_data, firstfield, varargs);
@@ -341,15 +341,15 @@ config_quark_initialize (void)
 }
 
 static void
-gst_play_class_init (GstPlayClass * klass)
+gtk_gst_play_class_init (GtkGstPlayClass * klass)
 {
   GObjectClass *gobject_class = (GObjectClass *) klass;
 
-  gobject_class->set_property = gst_play_set_property;
-  gobject_class->get_property = gst_play_get_property;
-  gobject_class->dispose = gst_play_dispose;
-  gobject_class->finalize = gst_play_finalize;
-  gobject_class->constructed = gst_play_constructed;
+  gobject_class->set_property = gtk_gst_play_set_property;
+  gobject_class->get_property = gtk_gst_play_get_property;
+  gobject_class->dispose = gtk_gst_play_dispose;
+  gobject_class->finalize = gtk_gst_play_finalize;
+  gobject_class->constructed = gtk_gst_play_constructed;
 
   param_specs[PROP_VIDEO_RENDERER] =
       g_param_spec_object ("video-renderer",
@@ -440,9 +440,9 @@ gst_play_class_init (GstPlayClass * klass)
 }
 
 static void
-gst_play_dispose (GObject * object)
+gtk_gst_play_dispose (GObject * object)
 {
-  GstPlay *self = GST_PLAY (object);
+  GtkGstPlay *self = GST_PLAY (object);
 
   GST_TRACE_OBJECT (self, "Stopping main thread");
 
@@ -470,9 +470,9 @@ gst_play_dispose (GObject * object)
 }
 
 static void
-gst_play_finalize (GObject * object)
+gtk_gst_play_finalize (GObject * object)
 {
-  GstPlay *self = GST_PLAY (object);
+  GtkGstPlay *self = GST_PLAY (object);
 
   GST_TRACE_OBJECT (self, "Finalizing");
 
@@ -501,29 +501,29 @@ gst_play_finalize (GObject * object)
 }
 
 static void
-gst_play_constructed (GObject * object)
+gtk_gst_play_constructed (GObject * object)
 {
-  GstPlay *self = GST_PLAY (object);
+  GtkGstPlay *self = GST_PLAY (object);
 
   GST_TRACE_OBJECT (self, "Constructed");
 
   g_mutex_lock (&self->lock);
-  self->thread = g_thread_new ("GstPlay", gst_play_main, self);
+  self->thread = g_thread_new ("GtkGstPlay", gtk_gst_play_main, self);
   while (!self->loop || !g_main_loop_is_running (self->loop))
     g_cond_wait (&self->cond, &self->lock);
 
-  gst_play_set_playbin_video_sink (self);
+  gtk_gst_play_set_playbin_video_sink (self);
   g_mutex_unlock (&self->lock);
 
   G_OBJECT_CLASS (parent_class)->constructed (object);
 }
 
 static gboolean
-gst_play_set_uri_internal (gpointer user_data)
+gtk_gst_play_set_uri_internal (gpointer user_data)
 {
-  GstPlay *self = user_data;
+  GtkGstPlay *self = user_data;
 
-  gst_play_stop_internal (self, FALSE);
+  gtk_gst_play_stop_internal (self, FALSE);
 
   g_mutex_lock (&self->lock);
 
@@ -531,8 +531,8 @@ gst_play_set_uri_internal (gpointer user_data)
 
   g_object_set (self->playbin, "uri", self->uri, NULL);
 
-  api_bus_post_message (self, GST_PLAY_MESSAGE_URI_LOADED,
-      GST_PLAY_MESSAGE_DATA_URI, G_TYPE_STRING, self->uri, NULL);
+  api_bus_post_message (self, GTL_GST_PLAY_MESSAGE_URI_LOADED,
+      GTL_GST_PLAY_MESSAGE_DATA_URI, G_TYPE_STRING, self->uri, NULL);
 
   g_object_set (self->playbin, "suburi", NULL, NULL);
 
@@ -542,17 +542,17 @@ gst_play_set_uri_internal (gpointer user_data)
 }
 
 static gboolean
-gst_play_set_suburi_internal (gpointer user_data)
+gtk_gst_play_set_suburi_internal (gpointer user_data)
 {
-  GstPlay *self = user_data;
+  GtkGstPlay *self = user_data;
   GstClockTime position;
   GstState target_state;
 
   /* save the state and position */
   target_state = self->target_state;
-  position = gst_play_get_position (self);
+  position = gtk_gst_play_get_position (self);
 
-  gst_play_stop_internal (self, TRUE);
+  gtk_gst_play_stop_internal (self, TRUE);
   g_mutex_lock (&self->lock);
 
   GST_DEBUG_OBJECT (self, "Changing SUBURI to '%s'",
@@ -564,19 +564,19 @@ gst_play_set_suburi_internal (gpointer user_data)
 
   /* restore state and position */
   if (position != GST_CLOCK_TIME_NONE)
-    gst_play_seek (self, position);
+    gtk_gst_play_seek (self, position);
   if (target_state == GST_STATE_PAUSED)
-    gst_play_pause_internal (self);
+    gtk_gst_play_pause_internal (self);
   else if (target_state == GST_STATE_PLAYING)
-    gst_play_play_internal (self);
+    gtk_gst_play_play_internal (self);
 
   return G_SOURCE_REMOVE;
 }
 
 static void
-gst_play_set_rate_internal (GstPlay * self)
+gtk_gst_play_set_rate_internal (GtkGstPlay * self)
 {
-  self->seek_position = gst_play_get_position (self);
+  self->seek_position = gtk_gst_play_get_position (self);
 
   /* If there is no seek being dispatch to the main context currently do that,
    * otherwise we just updated the rate so that it will be taken by
@@ -587,20 +587,20 @@ gst_play_set_rate_internal (GstPlay * self)
     if (!self->seek_pending) {
       self->seek_source = g_idle_source_new ();
       g_source_set_callback (self->seek_source,
-          (GSourceFunc) gst_play_seek_internal, self, NULL);
+          (GSourceFunc) gtk_gst_play_seek_internal, self, NULL);
       g_source_attach (self->seek_source, self->context);
     }
   }
 }
 
 static void
-gst_play_set_playbin_video_sink (GstPlay * self)
+gtk_gst_play_set_playbin_video_sink (GtkGstPlay * self)
 {
   GstElement *video_sink = NULL;
 
   if (self->video_renderer != NULL) {
     video_sink =
-        gst_play_video_renderer_create_video_sink (self->video_renderer, self);
+        gtk_gst_play_video_renderer_create_video_sink (self->video_renderer, self);
   }
 
   if (video_sink) {
@@ -611,10 +611,10 @@ gst_play_set_playbin_video_sink (GstPlay * self)
 }
 
 static void
-gst_play_set_property (GObject * object, guint prop_id,
+gtk_gst_play_set_property (GObject * object, guint prop_id,
     const GValue * value, GParamSpec * pspec)
 {
-  GstPlay *self = GST_PLAY (object);
+  GtkGstPlay *self = GST_PLAY (object);
 
   switch (prop_id) {
     case PROP_VIDEO_RENDERER:
@@ -622,12 +622,12 @@ gst_play_set_property (GObject * object, guint prop_id,
       g_clear_object (&self->video_renderer);
       self->video_renderer = g_value_dup_object (value);
 
-      // When the video_renderer is a GstPlayerWrappedVideoRenderer it cannot be set
+      // When the video_renderer is a GtkGstPlayerWrappedVideoRenderer it cannot be set
       // at construction time because it requires a valid pipeline which is created
-      // only after GstPlay has been constructed. That is why the video renderer is
-      // set *after* GstPlay has been constructed.
+      // only after GtkGstPlay has been constructed. That is why the video renderer is
+      // set *after* GtkGstPlay has been constructed.
       if (self->thread) {
-        gst_play_set_playbin_video_sink (self);
+        gtk_gst_play_set_playbin_video_sink (self);
       }
       g_mutex_unlock (&self->lock);
       break;
@@ -645,7 +645,7 @@ gst_play_set_property (GObject * object, guint prop_id,
       g_mutex_unlock (&self->lock);
 
       g_main_context_invoke_full (self->context, G_PRIORITY_DEFAULT,
-          gst_play_set_uri_internal, self, NULL);
+          gtk_gst_play_set_uri_internal, self, NULL);
       break;
     }
     case PROP_SUBURI:{
@@ -657,7 +657,7 @@ gst_play_set_property (GObject * object, guint prop_id,
       g_mutex_unlock (&self->lock);
 
       g_main_context_invoke_full (self->context, G_PRIORITY_DEFAULT,
-          gst_play_set_suburi_internal, self, NULL);
+          gtk_gst_play_set_suburi_internal, self, NULL);
       break;
     }
     case PROP_VOLUME:
@@ -668,7 +668,7 @@ gst_play_set_property (GObject * object, guint prop_id,
       g_mutex_lock (&self->lock);
       self->rate = g_value_get_double (value);
       GST_DEBUG_OBJECT (self, "Set rate=%lf", g_value_get_double (value));
-      gst_play_set_rate_internal (self);
+      gtk_gst_play_set_rate_internal (self);
       g_mutex_unlock (&self->lock);
       break;
     case PROP_MUTE:
@@ -700,10 +700,10 @@ gst_play_set_property (GObject * object, guint prop_id,
 }
 
 static void
-gst_play_get_property (GObject * object, guint prop_id,
+gtk_gst_play_get_property (GObject * object, guint prop_id,
     GValue * value, GParamSpec * pspec)
 {
-  GstPlay *self = GST_PLAY (object);
+  GtkGstPlay *self = GST_PLAY (object);
 
   switch (prop_id) {
     case PROP_URI:
@@ -733,23 +733,23 @@ gst_play_get_property (GObject * object, guint prop_id,
       break;
     }
     case PROP_MEDIA_INFO:{
-      GstPlayMediaInfo *media_info = gst_play_get_media_info (self);
+      GtkGstPlayMediaInfo *media_info = gtk_gst_play_get_media_info (self);
       g_value_take_object (value, media_info);
       break;
     }
     case PROP_CURRENT_AUDIO_TRACK:{
-      GstPlayAudioInfo *audio_info = gst_play_get_current_audio_track (self);
+      GtkGstPlayAudioInfo *audio_info = gtk_gst_play_get_current_audio_track (self);
       g_value_take_object (value, audio_info);
       break;
     }
     case PROP_CURRENT_VIDEO_TRACK:{
-      GstPlayVideoInfo *video_info = gst_play_get_current_video_track (self);
+      GtkGstPlayVideoInfo *video_info = gtk_gst_play_get_current_video_track (self);
       g_value_take_object (value, video_info);
       break;
     }
     case PROP_CURRENT_SUBTITLE_TRACK:{
-      GstPlaySubtitleInfo *subtitle_info =
-          gst_play_get_current_subtitle_track (self);
+      GtkGstPlaySubtitleInfo *subtitle_info =
+          gtk_gst_play_get_current_subtitle_track (self);
       g_value_take_object (value, subtitle_info);
       break;
     }
@@ -799,7 +799,7 @@ gst_play_get_property (GObject * object, guint prop_id,
 static gboolean
 main_loop_running_cb (gpointer user_data)
 {
-  GstPlay *self = GST_PLAY (user_data);
+  GtkGstPlay *self = GST_PLAY (user_data);
 
   GST_TRACE_OBJECT (self, "Main loop running now");
 
@@ -811,30 +811,30 @@ main_loop_running_cb (gpointer user_data)
 }
 
 static void
-change_state (GstPlay * self, GstPlayState state)
+change_state (GtkGstPlay * self, GtkGstPlayState state)
 {
   if (state == self->app_state)
     return;
 
   GST_DEBUG_OBJECT (self, "Changing app state from %s to %s",
-      gst_play_state_get_name (self->app_state),
-      gst_play_state_get_name (state));
+      gtk_gst_play_state_get_name (self->app_state),
+      gtk_gst_play_state_get_name (state));
 
   self->app_state = state;
 
-  api_bus_post_message (self, GST_PLAY_MESSAGE_STATE_CHANGED,
-      GST_PLAY_MESSAGE_DATA_PLAY_STATE, GST_TYPE_PLAY_STATE,
+  api_bus_post_message (self, GTL_GST_PLAY_MESSAGE_STATE_CHANGED,
+      GTL_GST_PLAY_MESSAGE_DATA_PLAY_STATE, GST_TYPE_PLAY_STATE,
       self->app_state, NULL);
 }
 
 static gboolean
 tick_cb (gpointer user_data)
 {
-  GstPlay *self = GST_PLAY (user_data);
+  GtkGstPlay *self = GST_PLAY (user_data);
   GstClockTime position;
   if (query_position (self, &position)) {
-    api_bus_post_message (self, GST_PLAY_MESSAGE_POSITION_UPDATED,
-        GST_PLAY_MESSAGE_DATA_POSITION, GST_TYPE_CLOCK_TIME, position, NULL);
+    api_bus_post_message (self, GTL_GST_PLAY_MESSAGE_POSITION_UPDATED,
+        GTL_GST_PLAY_MESSAGE_DATA_POSITION, GST_TYPE_CLOCK_TIME, position, NULL);
   }
 
   return G_SOURCE_CONTINUE;
@@ -846,7 +846,7 @@ tick_cb (gpointer user_data)
  * and different.
  */
 static gboolean
-query_position (GstPlay * self, GstClockTime * position)
+query_position (GtkGstPlay * self, GstClockTime * position)
 {
   gint64 current_position;
   *position = self->cached_position;
@@ -865,7 +865,7 @@ query_position (GstPlay * self, GstClockTime * position)
 }
 
 static void
-add_tick_source (GstPlay * self)
+add_tick_source (GtkGstPlay * self)
 {
   guint position_update_interval_ms;
 
@@ -873,7 +873,7 @@ add_tick_source (GstPlay * self)
     return;
 
   position_update_interval_ms =
-      gst_play_config_get_position_update_interval (self->config);
+      gtk_gst_play_config_get_position_update_interval (self->config);
   if (!position_update_interval_ms)
     return;
 
@@ -883,7 +883,7 @@ add_tick_source (GstPlay * self)
 }
 
 static void
-remove_tick_source (GstPlay * self)
+remove_tick_source (GtkGstPlay * self)
 {
   if (!self->tick_source)
     return;
@@ -896,7 +896,7 @@ remove_tick_source (GstPlay * self)
 static gboolean
 ready_timeout_cb (gpointer user_data)
 {
-  GstPlay *self = user_data;
+  GtkGstPlay *self = user_data;
 
   if (self->target_state <= GST_STATE_READY) {
     GST_DEBUG_OBJECT (self, "Setting pipeline to NULL state");
@@ -909,7 +909,7 @@ ready_timeout_cb (gpointer user_data)
 }
 
 static void
-add_ready_timeout_source (GstPlay * self)
+add_ready_timeout_source (GtkGstPlay * self)
 {
   if (self->ready_timeout_source)
     return;
@@ -921,7 +921,7 @@ add_ready_timeout_source (GstPlay * self)
 }
 
 static void
-remove_ready_timeout_source (GstPlay * self)
+remove_ready_timeout_source (GtkGstPlay * self)
 {
   if (!self->ready_timeout_source)
     return;
@@ -933,14 +933,14 @@ remove_ready_timeout_source (GstPlay * self)
 
 
 static void
-on_error (GstPlay * self, GError * err, const GstStructure * details)
+on_error (GtkGstPlay * self, GError * err, const GstStructure * details)
 {
   GST_ERROR_OBJECT (self, "Error: %s (%s, %d)", err->message,
       g_quark_to_string (err->domain), err->code);
 
-  api_bus_post_message (self, GST_PLAY_MESSAGE_ERROR,
-      GST_PLAY_MESSAGE_DATA_ERROR, G_TYPE_ERROR, err,
-      GST_PLAY_MESSAGE_DATA_ERROR_DETAILS, GST_TYPE_STRUCTURE, details, NULL);
+  api_bus_post_message (self, GTL_GST_PLAY_MESSAGE_ERROR,
+      GTL_GST_PLAY_MESSAGE_DATA_ERROR, G_TYPE_ERROR, err,
+      GTL_GST_PLAY_MESSAGE_DATA_ERROR_DETAILS, GST_TYPE_STRUCTURE, details, NULL);
 
   g_error_free (err);
 
@@ -952,7 +952,7 @@ on_error (GstPlay * self, GError * err, const GstStructure * details)
   self->is_live = FALSE;
   self->is_eos = FALSE;
   gst_element_set_state (self->playbin, GST_STATE_NULL);
-  change_state (self, GST_PLAY_STATE_STOPPED);
+  change_state (self, GTL_GST_PLAY_STATE_STOPPED);
   self->buffering_percent = 100;
 
   g_mutex_lock (&self->lock);
@@ -974,7 +974,7 @@ on_error (GstPlay * self, GError * err, const GstStructure * details)
 }
 
 static void
-dump_dot_file (GstPlay * self, const gchar * name)
+dump_dot_file (GtkGstPlay * self, const gchar * name)
 {
   gchar *full_name;
 
@@ -989,7 +989,7 @@ dump_dot_file (GstPlay * self, const gchar * name)
 static void
 error_cb (G_GNUC_UNUSED GstBus * bus, GstMessage * msg, gpointer user_data)
 {
-  GstPlay *self = GST_PLAY (user_data);
+  GtkGstPlay *self = GST_PLAY (user_data);
   GError *err, *play_err;
   gchar *name, *debug, *message, *full_message;
   const GstStructure *details = NULL;
@@ -1016,7 +1016,7 @@ error_cb (G_GNUC_UNUSED GstBus * bus, GstMessage * msg, gpointer user_data)
     GST_ERROR_OBJECT (self, "Additional debug info: %s", debug);
 
   play_err =
-      g_error_new_literal (GST_PLAY_ERROR, GST_PLAY_ERROR_FAILED, full_message);
+      g_error_new_literal (GTL_GST_PLAY_ERROR, GTL_GST_PLAY_ERROR_FAILED, full_message);
   on_error (self, play_err, details);
 
   g_clear_error (&err);
@@ -1029,7 +1029,7 @@ error_cb (G_GNUC_UNUSED GstBus * bus, GstMessage * msg, gpointer user_data)
 static void
 warning_cb (G_GNUC_UNUSED GstBus * bus, GstMessage * msg, gpointer user_data)
 {
-  GstPlay *self = GST_PLAY (user_data);
+  GtkGstPlay *self = GST_PLAY (user_data);
   GError *err, *play_err;
   gchar *name, *debug, *message, *full_message;
   const GstStructure *details = NULL;
@@ -1056,19 +1056,19 @@ warning_cb (G_GNUC_UNUSED GstBus * bus, GstMessage * msg, gpointer user_data)
     GST_WARNING_OBJECT (self, "Additional debug info: %s", debug);
 
   play_err =
-      g_error_new_literal (GST_PLAY_ERROR, GST_PLAY_ERROR_FAILED, full_message);
+      g_error_new_literal (GTL_GST_PLAY_ERROR, GTL_GST_PLAY_ERROR_FAILED, full_message);
 
   GST_WARNING_OBJECT (self, "Warning: %s (%s, %d)", err->message,
       g_quark_to_string (err->domain), err->code);
 
   if (details != NULL) {
-    api_bus_post_message (self, GST_PLAY_MESSAGE_WARNING,
-        GST_PLAY_MESSAGE_DATA_WARNING, G_TYPE_ERROR, play_err,
-        GST_PLAY_MESSAGE_DATA_WARNING_DETAILS, GST_TYPE_STRUCTURE, details,
+    api_bus_post_message (self, GTL_GST_PLAY_MESSAGE_WARNING,
+        GTL_GST_PLAY_MESSAGE_DATA_WARNING, G_TYPE_ERROR, play_err,
+        GTL_GST_PLAY_MESSAGE_DATA_WARNING_DETAILS, GST_TYPE_STRUCTURE, details,
         NULL);
   } else {
-    api_bus_post_message (self, GST_PLAY_MESSAGE_WARNING,
-        GST_PLAY_MESSAGE_DATA_WARNING, G_TYPE_ERROR, play_err, NULL);
+    api_bus_post_message (self, GTL_GST_PLAY_MESSAGE_WARNING,
+        GTL_GST_PLAY_MESSAGE_DATA_WARNING, G_TYPE_ERROR, play_err, NULL);
   }
 
   g_clear_error (&play_err);
@@ -1083,16 +1083,16 @@ static void
 eos_cb (G_GNUC_UNUSED GstBus * bus, G_GNUC_UNUSED GstMessage * msg,
     gpointer user_data)
 {
-  GstPlay *self = GST_PLAY (user_data);
+  GtkGstPlay *self = GST_PLAY (user_data);
 
   GST_DEBUG_OBJECT (self, "End of stream");
 
   tick_cb (self);
   remove_tick_source (self);
 
-  api_bus_post_message (self, GST_PLAY_MESSAGE_END_OF_STREAM, NULL);
+  api_bus_post_message (self, GTL_GST_PLAY_MESSAGE_END_OF_STREAM, NULL);
 
-  change_state (self, GST_PLAY_STATE_STOPPED);
+  change_state (self, GTL_GST_PLAY_STATE_STOPPED);
   self->buffering_percent = 100;
   self->is_eos = TRUE;
 }
@@ -1100,7 +1100,7 @@ eos_cb (G_GNUC_UNUSED GstBus * bus, G_GNUC_UNUSED GstMessage * msg,
 static void
 buffering_cb (G_GNUC_UNUSED GstBus * bus, GstMessage * msg, gpointer user_data)
 {
-  GstPlay *self = GST_PLAY (user_data);
+  GtkGstPlay *self = GST_PLAY (user_data);
   gint percent;
 
   if (self->target_state < GST_STATE_PAUSED)
@@ -1118,19 +1118,19 @@ buffering_cb (G_GNUC_UNUSED GstBus * bus, GstMessage * msg, gpointer user_data)
     state_ret = gst_element_set_state (self->playbin, GST_STATE_PAUSED);
 
     if (state_ret == GST_STATE_CHANGE_FAILURE) {
-      on_error (self, g_error_new (GST_PLAY_ERROR, GST_PLAY_ERROR_FAILED,
+      on_error (self, g_error_new (GTL_GST_PLAY_ERROR, GTL_GST_PLAY_ERROR_FAILED,
               "Failed to handle buffering"), NULL);
       return;
     }
 
-    change_state (self, GST_PLAY_STATE_BUFFERING);
+    change_state (self, GTL_GST_PLAY_STATE_BUFFERING);
   }
 
   if (self->buffering_percent != percent) {
     self->buffering_percent = percent;
 
-    api_bus_post_message (self, GST_PLAY_MESSAGE_BUFFERING,
-        GST_PLAY_MESSAGE_DATA_BUFFERING_PERCENT, G_TYPE_UINT, percent, NULL);
+    api_bus_post_message (self, GTL_GST_PLAY_MESSAGE_BUFFERING,
+        GTL_GST_PLAY_MESSAGE_DATA_BUFFERING_PERCENT, G_TYPE_UINT, percent, NULL);
   }
 
   g_mutex_lock (&self->lock);
@@ -1149,13 +1149,13 @@ buffering_cb (G_GNUC_UNUSED GstBus * bus, GstMessage * msg, gpointer user_data)
     state_ret = gst_element_set_state (self->playbin, GST_STATE_PLAYING);
     /* Application state change is happening when the state change happened */
     if (state_ret == GST_STATE_CHANGE_FAILURE)
-      on_error (self, g_error_new (GST_PLAY_ERROR, GST_PLAY_ERROR_FAILED,
+      on_error (self, g_error_new (GTL_GST_PLAY_ERROR, GTL_GST_PLAY_ERROR_FAILED,
               "Failed to handle buffering"), NULL);
   } else if (percent == 100 && self->target_state >= GST_STATE_PAUSED) {
     g_mutex_unlock (&self->lock);
 
     GST_DEBUG_OBJECT (self, "Buffering finished - staying PAUSED");
-    change_state (self, GST_PLAY_STATE_PAUSED);
+    change_state (self, GTL_GST_PLAY_STATE_PAUSED);
   } else {
     g_mutex_unlock (&self->lock);
   }
@@ -1165,7 +1165,7 @@ static void
 clock_lost_cb (G_GNUC_UNUSED GstBus * bus, G_GNUC_UNUSED GstMessage * msg,
     gpointer user_data)
 {
-  GstPlay *self = GST_PLAY (user_data);
+  GtkGstPlay *self = GST_PLAY (user_data);
   GstStateChangeReturn state_ret;
 
   GST_DEBUG_OBJECT (self, "Clock lost");
@@ -1175,14 +1175,14 @@ clock_lost_cb (G_GNUC_UNUSED GstBus * bus, G_GNUC_UNUSED GstMessage * msg,
       state_ret = gst_element_set_state (self->playbin, GST_STATE_PLAYING);
 
     if (state_ret == GST_STATE_CHANGE_FAILURE)
-      on_error (self, g_error_new (GST_PLAY_ERROR, GST_PLAY_ERROR_FAILED,
+      on_error (self, g_error_new (GTL_GST_PLAY_ERROR, GTL_GST_PLAY_ERROR_FAILED,
               "Failed to handle clock loss"), NULL);
   }
 }
 
 
 static void
-check_video_dimensions_changed (GstPlay * self)
+check_video_dimensions_changed (GtkGstPlay * self)
 {
   GstElement *video_sink;
   GstPad *video_sink_pad;
@@ -1218,22 +1218,22 @@ check_video_dimensions_changed (GstPlay * self)
   gst_object_unref (video_sink);
 
 out:
-  api_bus_post_message (self, GST_PLAY_MESSAGE_VIDEO_DIMENSIONS_CHANGED,
-      GST_PLAY_MESSAGE_DATA_VIDEO_WIDTH, G_TYPE_UINT, width,
-      GST_PLAY_MESSAGE_DATA_VIDEO_HEIGHT, G_TYPE_UINT, height, NULL);
+  api_bus_post_message (self, GTL_GST_PLAY_MESSAGE_VIDEO_DIMENSIONS_CHANGED,
+      GTL_GST_PLAY_MESSAGE_DATA_VIDEO_WIDTH, G_TYPE_UINT, width,
+      GTL_GST_PLAY_MESSAGE_DATA_VIDEO_HEIGHT, G_TYPE_UINT, height, NULL);
 }
 
 static void
 notify_caps_cb (G_GNUC_UNUSED GObject * object,
     G_GNUC_UNUSED GParamSpec * pspec, gpointer user_data)
 {
-  GstPlay *self = GST_PLAY (user_data);
+  GtkGstPlay *self = GST_PLAY (user_data);
 
   check_video_dimensions_changed (self);
 }
 
 static void
-on_duration_changed (GstPlay * self, GstClockTime duration)
+on_duration_changed (GtkGstPlay * self, GstClockTime duration)
 {
   gboolean updated = FALSE;
 
@@ -1251,9 +1251,9 @@ on_duration_changed (GstPlay * self, GstClockTime duration)
   }
   g_mutex_unlock (&self->lock);
 
-  api_bus_post_message (self, GST_PLAY_MESSAGE_DURATION_CHANGED,
-      GST_PLAY_MESSAGE_DATA_DURATION, GST_TYPE_CLOCK_TIME,
-      gst_play_get_duration (self), NULL);
+  api_bus_post_message (self, GTL_GST_PLAY_MESSAGE_DURATION_CHANGED,
+      GTL_GST_PLAY_MESSAGE_DATA_DURATION, GST_TYPE_CLOCK_TIME,
+      gtk_gst_play_get_duration (self), NULL);
 
   if (updated) {
     on_media_info_updated (self);
@@ -1261,18 +1261,18 @@ on_duration_changed (GstPlay * self, GstClockTime duration)
 }
 
 static void
-on_seek_done (GstPlay * self)
+on_seek_done (GtkGstPlay * self)
 {
-  api_bus_post_message (self, GST_PLAY_MESSAGE_SEEK_DONE,
-      GST_PLAY_MESSAGE_DATA_POSITION, GST_TYPE_CLOCK_TIME,
-      gst_play_get_position (self), NULL);
+  api_bus_post_message (self, GTL_GST_PLAY_MESSAGE_SEEK_DONE,
+      GTL_GST_PLAY_MESSAGE_DATA_POSITION, GST_TYPE_CLOCK_TIME,
+      gtk_gst_play_get_position (self), NULL);
 }
 
 static void
 state_changed_cb (G_GNUC_UNUSED GstBus * bus, GstMessage * msg,
     gpointer user_data)
 {
-  GstPlay *self = GST_PLAY (user_data);
+  GtkGstPlay *self = GST_PLAY (user_data);
   GstState old_state, new_state, pending_state;
 
   gst_message_parse_state_changed (msg, &old_state, &new_state, &pending_state);
@@ -1304,7 +1304,7 @@ state_changed_cb (G_GNUC_UNUSED GstBus * bus, GstMessage * msg,
       g_mutex_lock (&self->lock);
       if (self->media_info)
         g_object_unref (self->media_info);
-      self->media_info = gst_play_media_info_create (self);
+      self->media_info = gtk_gst_play_media_info_create (self);
       g_mutex_unlock (&self->lock);
       on_media_info_updated (self);
 
@@ -1345,7 +1345,7 @@ state_changed_cb (G_GNUC_UNUSED GstBus * bus, GstMessage * msg,
           self->last_seek_time = GST_CLOCK_TIME_NONE;
         } else if (self->seek_source) {
           GST_DEBUG_OBJECT (self, "Seek finished but new seek is pending");
-          gst_play_seek_internal_locked (self);
+          gtk_gst_play_seek_internal_locked (self);
         } else {
           GST_DEBUG_OBJECT (self, "Seek finished");
           on_seek_done (self);
@@ -1354,7 +1354,7 @@ state_changed_cb (G_GNUC_UNUSED GstBus * bus, GstMessage * msg,
 
       if (self->seek_position != GST_CLOCK_TIME_NONE) {
         GST_DEBUG_OBJECT (self, "Seeking now that we reached PAUSED state");
-        gst_play_seek_internal_locked (self);
+        gtk_gst_play_seek_internal_locked (self);
         g_mutex_unlock (&self->lock);
       } else if (!self->seek_pending) {
         g_mutex_unlock (&self->lock);
@@ -1367,31 +1367,31 @@ state_changed_cb (G_GNUC_UNUSED GstBus * bus, GstMessage * msg,
 
           state_ret = gst_element_set_state (self->playbin, GST_STATE_PLAYING);
           if (state_ret == GST_STATE_CHANGE_FAILURE)
-            on_error (self, g_error_new (GST_PLAY_ERROR,
-                    GST_PLAY_ERROR_FAILED, "Failed to play"), NULL);
+            on_error (self, g_error_new (GTL_GST_PLAY_ERROR,
+                    GTL_GST_PLAY_ERROR_FAILED, "Failed to play"), NULL);
         } else if (self->buffering_percent == 100) {
-          change_state (self, GST_PLAY_STATE_PAUSED);
+          change_state (self, GTL_GST_PLAY_STATE_PAUSED);
         }
       } else {
         g_mutex_unlock (&self->lock);
       }
     } else if (new_state == GST_STATE_PLAYING
         && pending_state == GST_STATE_VOID_PENDING) {
-      /* api_bus_post_message (self, GST_PLAY_MESSAGE_POSITION_UPDATED, */
-      /*     GST_PLAY_MESSAGE_DATA_POSITION, GST_TYPE_CLOCK_TIME, 0, NULL); */
+      /* api_bus_post_message (self, GTL_GST_PLAY_MESSAGE_POSITION_UPDATED, */
+      /*     GTL_GST_PLAY_MESSAGE_DATA_POSITION, GST_TYPE_CLOCK_TIME, 0, NULL); */
 
       /* If no seek is currently pending, add the tick source. This can happen
        * if we seeked already but the state-change message was still queued up */
       if (!self->seek_pending) {
         add_tick_source (self);
-        change_state (self, GST_PLAY_STATE_PLAYING);
+        change_state (self, GTL_GST_PLAY_STATE_PLAYING);
       }
     } else if (new_state == GST_STATE_READY && old_state > GST_STATE_READY) {
-      change_state (self, GST_PLAY_STATE_STOPPED);
+      change_state (self, GTL_GST_PLAY_STATE_STOPPED);
     } else {
       /* Otherwise we neither reached PLAYING nor PAUSED, so must
        * wait for something to happen... i.e. are BUFFERING now */
-      change_state (self, GST_PLAY_STATE_BUFFERING);
+      change_state (self, GTL_GST_PLAY_STATE_BUFFERING);
     }
   }
 }
@@ -1400,7 +1400,7 @@ static void
 duration_changed_cb (G_GNUC_UNUSED GstBus * bus, G_GNUC_UNUSED GstMessage * msg,
     gpointer user_data)
 {
-  GstPlay *self = GST_PLAY (user_data);
+  GtkGstPlay *self = GST_PLAY (user_data);
   gint64 duration = GST_CLOCK_TIME_NONE;
 
   if (gst_element_query_duration (self->playbin, GST_FORMAT_TIME, &duration)) {
@@ -1412,7 +1412,7 @@ static void
 latency_cb (G_GNUC_UNUSED GstBus * bus, G_GNUC_UNUSED GstMessage * msg,
     gpointer user_data)
 {
-  GstPlay *self = GST_PLAY (user_data);
+  GtkGstPlay *self = GST_PLAY (user_data);
 
   GST_DEBUG_OBJECT (self, "Latency changed");
 
@@ -1423,7 +1423,7 @@ static void
 request_state_cb (G_GNUC_UNUSED GstBus * bus, GstMessage * msg,
     gpointer user_data)
 {
-  GstPlay *self = GST_PLAY (user_data);
+  GtkGstPlay *self = GST_PLAY (user_data);
   GstState state;
   GstStateChangeReturn state_ret;
 
@@ -1435,13 +1435,13 @@ request_state_cb (G_GNUC_UNUSED GstBus * bus, GstMessage * msg,
   self->target_state = state;
   state_ret = gst_element_set_state (self->playbin, state);
   if (state_ret == GST_STATE_CHANGE_FAILURE)
-    on_error (self, g_error_new (GST_PLAY_ERROR, GST_PLAY_ERROR_FAILED,
+    on_error (self, g_error_new (GTL_GST_PLAY_ERROR, GTL_GST_PLAY_ERROR_FAILED,
             "Failed to change to requested state %s",
             gst_element_state_get_name (state)), NULL);
 }
 
 static void
-media_info_update (GstPlay * self, GstPlayMediaInfo * info)
+media_info_update (GtkGstPlay * self, GtkGstPlayMediaInfo * info)
 {
   g_free (info->title);
   info->title = get_from_tags (self, info, get_title);
@@ -1460,7 +1460,7 @@ media_info_update (GstPlay * self, GstPlayMediaInfo * info)
 static void
 tags_cb (G_GNUC_UNUSED GstBus * bus, GstMessage * msg, gpointer user_data)
 {
-  GstPlay *self = GST_PLAY (user_data);
+  GtkGstPlay *self = GST_PLAY (user_data);
   GstTagList *tags = NULL;
 
   gst_message_parse_tag (msg, &tags);
@@ -1492,7 +1492,7 @@ tags_cb (G_GNUC_UNUSED GstBus * bus, GstMessage * msg, gpointer user_data)
 static void
 element_cb (G_GNUC_UNUSED GstBus * bus, GstMessage * msg, gpointer user_data)
 {
-  GstPlay *self = GST_PLAY (user_data);
+  GtkGstPlay *self = GST_PLAY (user_data);
   const GstStructure *s;
 
   s = gst_message_get_structure (msg);
@@ -1531,7 +1531,7 @@ element_cb (G_GNUC_UNUSED GstBus * bus, GstMessage * msg, gpointer user_data)
       /* Remember target state and restore after setting the URI */
       target_state = self->target_state;
 
-      gst_play_stop_internal (self, TRUE);
+      gtk_gst_play_stop_internal (self, TRUE);
 
       g_mutex_lock (&self->lock);
       g_free (self->redirect_uri);
@@ -1540,16 +1540,16 @@ element_cb (G_GNUC_UNUSED GstBus * bus, GstMessage * msg, gpointer user_data)
       g_mutex_unlock (&self->lock);
 
       if (target_state == GST_STATE_PAUSED)
-        gst_play_pause_internal (self);
+        gtk_gst_play_pause_internal (self);
       else if (target_state == GST_STATE_PLAYING)
-        gst_play_play_internal (self);
+        gtk_gst_play_play_internal (self);
     }
   }
 }
 
 /* Must be called with lock */
 static gboolean
-update_stream_collection (GstPlay * self, GstStreamCollection * collection)
+update_stream_collection (GtkGstPlay * self, GstStreamCollection * collection)
 {
   if (self->collection && self->collection == collection)
     return FALSE;
@@ -1561,7 +1561,7 @@ update_stream_collection (GstPlay * self, GstStreamCollection * collection)
       (GstObject *) collection);
   if (self->media_info) {
     gst_object_unref (self->media_info);
-    self->media_info = gst_play_media_info_create (self);
+    self->media_info = gtk_gst_play_media_info_create (self);
   }
 
   self->stream_notify_id =
@@ -1575,7 +1575,7 @@ static void
 stream_collection_cb (G_GNUC_UNUSED GstBus * bus, GstMessage * msg,
     gpointer user_data)
 {
-  GstPlay *self = GST_PLAY (user_data);
+  GtkGstPlay *self = GST_PLAY (user_data);
   GstStreamCollection *collection = NULL;
   gboolean updated = FALSE;
 
@@ -1597,7 +1597,7 @@ static void
 streams_selected_cb (G_GNUC_UNUSED GstBus * bus, GstMessage * msg,
     gpointer user_data)
 {
-  GstPlay *self = GST_PLAY (user_data);
+  GtkGstPlay *self = GST_PLAY (user_data);
   GstStreamCollection *collection = NULL;
   gboolean updated = FALSE;
   guint i, len;
@@ -1655,7 +1655,7 @@ streams_selected_cb (G_GNUC_UNUSED GstBus * bus, GstMessage * msg,
 }
 
 static void
-play_set_flag (GstPlay * self, gint pos)
+play_set_flag (GtkGstPlay * self, gint pos)
 {
   gint flags;
 
@@ -1667,7 +1667,7 @@ play_set_flag (GstPlay * self, gint pos)
 }
 
 static void
-play_clear_flag (GstPlay * self, gint pos)
+play_clear_flag (GtkGstPlay * self, gint pos)
 {
   gint flags;
 
@@ -1685,22 +1685,22 @@ play_clear_flag (GstPlay * self, gint pos)
  * application.
  */
 static void
-on_media_info_updated (GstPlay * self)
+on_media_info_updated (GtkGstPlay * self)
 {
-  GstPlayMediaInfo *media_info_copy;
+  GtkGstPlayMediaInfo *media_info_copy;
 
   g_mutex_lock (&self->lock);
-  media_info_copy = gst_play_media_info_copy (self->media_info);
+  media_info_copy = gtk_gst_play_media_info_copy (self->media_info);
   g_mutex_unlock (&self->lock);
 
-  api_bus_post_message (self, GST_PLAY_MESSAGE_MEDIA_INFO_UPDATED,
-      GST_PLAY_MESSAGE_DATA_MEDIA_INFO, GST_TYPE_PLAY_MEDIA_INFO,
+  api_bus_post_message (self, GTL_GST_PLAY_MESSAGE_MEDIA_INFO_UPDATED,
+      GTL_GST_PLAY_MESSAGE_DATA_MEDIA_INFO, GST_TYPE_PLAY_MEDIA_INFO,
       media_info_copy, NULL);
   g_object_unref (media_info_copy);
 }
 
 static GstCaps *
-get_caps (GstPlay * self, gint stream_index, GType type)
+get_caps (GtkGstPlay * self, gint stream_index, GType type)
 {
   GstPad *pad = NULL;
   GstCaps *caps = NULL;
@@ -1724,9 +1724,9 @@ get_caps (GstPlay * self, gint stream_index, GType type)
 }
 
 static void
-gst_play_subtitle_info_update (GstPlay * self, GstPlayStreamInfo * stream_info)
+gtk_gst_play_subtitle_info_update (GtkGstPlay * self, GtkGstPlayStreamInfo * stream_info)
 {
-  GstPlaySubtitleInfo *info = (GstPlaySubtitleInfo *) stream_info;
+  GtkGstPlaySubtitleInfo *info = (GtkGstPlaySubtitleInfo *) stream_info;
 
   if (stream_info->tags) {
 
@@ -1768,7 +1768,7 @@ gst_play_subtitle_info_update (GstPlay * self, GstPlayStreamInfo * stream_info)
         } else {
           g_object_get (G_OBJECT (self->playbin), "current-text", &text_index,
               NULL);
-          if (text_index == gst_play_stream_info_get_index (stream_info))
+          if (text_index == gtk_gst_play_stream_info_get_index (stream_info))
             info->language = g_path_get_basename (suburi);
         }
         g_free (suburi);
@@ -1784,9 +1784,9 @@ gst_play_subtitle_info_update (GstPlay * self, GstPlayStreamInfo * stream_info)
 }
 
 static void
-gst_play_video_info_update (GstPlay * self, GstPlayStreamInfo * stream_info)
+gtk_gst_play_video_info_update (GtkGstPlay * self, GtkGstPlayStreamInfo * stream_info)
 {
-  GstPlayVideoInfo *info = (GstPlayVideoInfo *) stream_info;
+  GtkGstPlayVideoInfo *info = (GtkGstPlayVideoInfo *) stream_info;
 
   if (stream_info->caps) {
     GstStructure *s;
@@ -1856,9 +1856,9 @@ gst_play_video_info_update (GstPlay * self, GstPlayStreamInfo * stream_info)
 }
 
 static void
-gst_play_audio_info_update (GstPlay * self, GstPlayStreamInfo * stream_info)
+gtk_gst_play_audio_info_update (GtkGstPlay * self, GtkGstPlayStreamInfo * stream_info)
 {
-  GstPlayAudioInfo *info = (GstPlayAudioInfo *) stream_info;
+  GtkGstPlayAudioInfo *info = (GtkGstPlayAudioInfo *) stream_info;
 
   if (stream_info->caps) {
     GstStructure *s;
@@ -1928,19 +1928,19 @@ gst_play_audio_info_update (GstPlay * self, GstPlayStreamInfo * stream_info)
       info->bitrate, info->max_bitrate);
 }
 
-static GstPlayStreamInfo *
-gst_play_stream_info_find (GstPlayMediaInfo * media_info,
+static GtkGstPlayStreamInfo *
+gtk_gst_play_stream_info_find (GtkGstPlayMediaInfo * media_info,
     GType type, gint stream_index)
 {
   GList *list, *l;
-  GstPlayStreamInfo *info = NULL;
+  GtkGstPlayStreamInfo *info = NULL;
 
   if (!media_info)
     return NULL;
 
-  list = gst_play_media_info_get_stream_list (media_info);
+  list = gtk_gst_play_media_info_get_stream_list (media_info);
   for (l = list; l != NULL; l = l->next) {
-    info = (GstPlayStreamInfo *) l->data;
+    info = (GtkGstPlayStreamInfo *) l->data;
     if ((G_OBJECT_TYPE (info) == type) && (info->stream_index == stream_index)) {
       return info;
     }
@@ -1949,19 +1949,19 @@ gst_play_stream_info_find (GstPlayMediaInfo * media_info,
   return NULL;
 }
 
-static GstPlayStreamInfo *
-gst_play_stream_info_find_from_stream_id (GstPlayMediaInfo * media_info,
+static GtkGstPlayStreamInfo *
+gtk_gst_play_stream_info_find_from_stream_id (GtkGstPlayMediaInfo * media_info,
     const gchar * stream_id)
 {
   GList *list, *l;
-  GstPlayStreamInfo *info = NULL;
+  GtkGstPlayStreamInfo *info = NULL;
 
   if (!media_info)
     return NULL;
 
-  list = gst_play_media_info_get_stream_list (media_info);
+  list = gtk_gst_play_media_info_get_stream_list (media_info);
   for (l = list; l != NULL; l = l->next) {
-    info = (GstPlayStreamInfo *) l->data;
+    info = (GtkGstPlayStreamInfo *) l->data;
     if (g_str_equal (info->stream_id, stream_id)) {
       return info;
     }
@@ -1971,7 +1971,7 @@ gst_play_stream_info_find_from_stream_id (GstPlayMediaInfo * media_info,
 }
 
 static gboolean
-is_track_enabled (GstPlay * self, gint pos)
+is_track_enabled (GtkGstPlay * self, gint pos)
 {
   gint flags;
 
@@ -1983,39 +1983,39 @@ is_track_enabled (GstPlay * self, gint pos)
   return FALSE;
 }
 
-static GstPlayStreamInfo *
-gst_play_stream_info_get_current (GstPlay * self, const gchar * prop,
+static GtkGstPlayStreamInfo *
+gtk_gst_play_stream_info_get_current (GtkGstPlay * self, const gchar * prop,
     GType type)
 {
   gint current;
-  GstPlayStreamInfo *info;
+  GtkGstPlayStreamInfo *info;
 
   if (!self->media_info)
     return NULL;
 
   g_object_get (G_OBJECT (self->playbin), prop, &current, NULL);
   g_mutex_lock (&self->lock);
-  info = gst_play_stream_info_find (self->media_info, type, current);
+  info = gtk_gst_play_stream_info_find (self->media_info, type, current);
   if (info)
-    info = gst_play_stream_info_copy (info);
+    info = gtk_gst_play_stream_info_copy (info);
   g_mutex_unlock (&self->lock);
 
   return info;
 }
 
-static GstPlayStreamInfo *
-gst_play_stream_info_get_current_from_stream_id (GstPlay * self,
+static GtkGstPlayStreamInfo *
+gtk_gst_play_stream_info_get_current_from_stream_id (GtkGstPlay * self,
     const gchar * stream_id, GType type)
 {
-  GstPlayStreamInfo *info;
+  GtkGstPlayStreamInfo *info;
 
   if (!self->media_info || !stream_id)
     return NULL;
 
   g_mutex_lock (&self->lock);
-  info = gst_play_stream_info_find_from_stream_id (self->media_info, stream_id);
+  info = gtk_gst_play_stream_info_find_from_stream_id (self->media_info, stream_id);
   if (info && G_OBJECT_TYPE (info) == type)
-    info = gst_play_stream_info_copy (info);
+    info = gtk_gst_play_stream_info_copy (info);
   else
     info = NULL;
   g_mutex_unlock (&self->lock);
@@ -2025,9 +2025,9 @@ gst_play_stream_info_get_current_from_stream_id (GstPlay * self,
 
 static void
 stream_notify_cb (GstStreamCollection * collection, GstStream * stream,
-    GParamSpec * pspec, GstPlay * self)
+    GParamSpec * pspec, GtkGstPlay * self)
 {
-  GstPlayStreamInfo *info;
+  GtkGstPlayStreamInfo *info;
   const gchar *stream_id;
   gboolean emit_signal = FALSE;
 
@@ -2040,9 +2040,9 @@ stream_notify_cb (GstStreamCollection * collection, GstStream * stream,
 
   stream_id = gst_stream_get_stream_id (stream);
   g_mutex_lock (&self->lock);
-  info = gst_play_stream_info_find_from_stream_id (self->media_info, stream_id);
+  info = gtk_gst_play_stream_info_find_from_stream_id (self->media_info, stream_id);
   if (info) {
-    gst_play_stream_info_update_from_stream (self, info, stream);
+    gtk_gst_play_stream_info_update_from_stream (self, info, stream);
     emit_signal = TRUE;
   }
   g_mutex_unlock (&self->lock);
@@ -2052,18 +2052,18 @@ stream_notify_cb (GstStreamCollection * collection, GstStream * stream,
 }
 
 static void
-gst_play_stream_info_update (GstPlay * self, GstPlayStreamInfo * s)
+gtk_gst_play_stream_info_update (GtkGstPlay * self, GtkGstPlayStreamInfo * s)
 {
   if (GST_IS_PLAY_VIDEO_INFO (s))
-    gst_play_video_info_update (self, s);
+    gtk_gst_play_video_info_update (self, s);
   else if (GST_IS_PLAY_AUDIO_INFO (s))
-    gst_play_audio_info_update (self, s);
+    gtk_gst_play_audio_info_update (self, s);
   else
-    gst_play_subtitle_info_update (self, s);
+    gtk_gst_play_subtitle_info_update (self, s);
 }
 
 static gchar *
-stream_info_get_codec (GstPlayStreamInfo * s)
+stream_info_get_codec (GtkGstPlayStreamInfo * s)
 {
   const gchar *type;
   GstTagList *tags;
@@ -2076,7 +2076,7 @@ stream_info_get_codec (GstPlayStreamInfo * s)
   else
     type = GST_TAG_SUBTITLE_CODEC;
 
-  tags = gst_play_stream_info_get_tags (s);
+  tags = gtk_gst_play_stream_info_get_tags (s);
   if (tags) {
     gst_tag_list_get_string (tags, type, &codec);
     if (!codec)
@@ -2085,7 +2085,7 @@ stream_info_get_codec (GstPlayStreamInfo * s)
 
   if (!codec) {
     GstCaps *caps;
-    caps = gst_play_stream_info_get_caps (s);
+    caps = gtk_gst_play_stream_info_get_caps (s);
     if (caps) {
       codec = gst_pb_utils_get_codec_description (caps);
     }
@@ -2095,13 +2095,13 @@ stream_info_get_codec (GstPlayStreamInfo * s)
 }
 
 static void
-gst_play_stream_info_update_tags_and_caps (GstPlay * self,
-    GstPlayStreamInfo * s)
+gtk_gst_play_stream_info_update_tags_and_caps (GtkGstPlay * self,
+    GtkGstPlayStreamInfo * s)
 {
   GstTagList *tags;
   gint stream_index;
 
-  stream_index = gst_play_stream_info_get_index (s);
+  stream_index = gtk_gst_play_stream_info_get_index (s);
 
   if (GST_IS_PLAY_VIDEO_INFO (s))
     g_signal_emit_by_name (self->playbin, "get-video-tags",
@@ -2124,18 +2124,18 @@ gst_play_stream_info_update_tags_and_caps (GstPlay * self,
   s->codec = stream_info_get_codec (s);
 
   GST_DEBUG_OBJECT (self, "%s index: %d tags: %p caps: %p",
-      gst_play_stream_info_get_stream_type (s), stream_index, s->tags, s->caps);
+      gtk_gst_play_stream_info_get_stream_type (s), stream_index, s->tags, s->caps);
 
-  gst_play_stream_info_update (self, s);
+  gtk_gst_play_stream_info_update (self, s);
 }
 
 static void
-gst_play_streams_info_create (GstPlay * self,
-    GstPlayMediaInfo * media_info, const gchar * prop, GType type)
+gtk_gst_play_streams_info_create (GtkGstPlay * self,
+    GtkGstPlayMediaInfo * media_info, const gchar * prop, GType type)
 {
   gint i;
   gint total = -1;
-  GstPlayStreamInfo *s;
+  GtkGstPlayStreamInfo *s;
 
   if (!media_info)
     return;
@@ -2146,11 +2146,11 @@ gst_play_streams_info_create (GstPlay * self,
 
   for (i = 0; i < total; i++) {
     /* check if stream already exist in the list */
-    s = gst_play_stream_info_find (media_info, type, i);
+    s = gtk_gst_play_stream_info_find (media_info, type, i);
 
     if (!s) {
       /* create a new stream info instance */
-      s = gst_play_stream_info_new (i, type);
+      s = gtk_gst_play_stream_info_new (i, type);
 
       /* add the object in stream list */
       media_info->stream_list = g_list_append (media_info->stream_list, s);
@@ -2167,16 +2167,16 @@ gst_play_streams_info_create (GstPlay * self,
             (media_info->subtitle_stream_list, s);
 
       GST_DEBUG_OBJECT (self, "create %s stream stream_index: %d",
-          gst_play_stream_info_get_stream_type (s), i);
+          gtk_gst_play_stream_info_get_stream_type (s), i);
     }
 
-    gst_play_stream_info_update_tags_and_caps (self, s);
+    gtk_gst_play_stream_info_update_tags_and_caps (self, s);
   }
 }
 
 static void
-gst_play_stream_info_update_from_stream (GstPlay * self,
-    GstPlayStreamInfo * s, GstStream * stream)
+gtk_gst_play_stream_info_update_from_stream (GtkGstPlay * self,
+    GtkGstPlayStreamInfo * s, GstStream * stream)
 {
   if (s->tags)
     gst_tag_list_unref (s->tags);
@@ -2190,19 +2190,19 @@ gst_play_stream_info_update_from_stream (GstPlay * self,
   s->codec = stream_info_get_codec (s);
 
   GST_DEBUG_OBJECT (self, "%s index: %d tags: %p caps: %p",
-      gst_play_stream_info_get_stream_type (s), s->stream_index,
+      gtk_gst_play_stream_info_get_stream_type (s), s->stream_index,
       s->tags, s->caps);
 
-  gst_play_stream_info_update (self, s);
+  gtk_gst_play_stream_info_update (self, s);
 }
 
 static void
-gst_play_streams_info_create_from_collection (GstPlay * self,
-    GstPlayMediaInfo * media_info, GstStreamCollection * collection)
+gtk_gst_play_streams_info_create_from_collection (GtkGstPlay * self,
+    GtkGstPlayMediaInfo * media_info, GstStreamCollection * collection)
 {
   guint i;
   guint total;
-  GstPlayStreamInfo *s;
+  GtkGstPlayStreamInfo *s;
   guint n_audio = 0;
   guint n_video = 0;
   guint n_text = 0;
@@ -2218,13 +2218,13 @@ gst_play_streams_info_create_from_collection (GstPlay * self,
     const gchar *stream_id = gst_stream_get_stream_id (stream);
 
     if (stream_type & GST_STREAM_TYPE_AUDIO) {
-      s = gst_play_stream_info_new (n_audio, GST_TYPE_PLAY_AUDIO_INFO);
+      s = gtk_gst_play_stream_info_new (n_audio, GST_TYPE_PLAY_AUDIO_INFO);
       n_audio++;
     } else if (stream_type & GST_STREAM_TYPE_VIDEO) {
-      s = gst_play_stream_info_new (n_video, GST_TYPE_PLAY_VIDEO_INFO);
+      s = gtk_gst_play_stream_info_new (n_video, GST_TYPE_PLAY_VIDEO_INFO);
       n_video++;
     } else if (stream_type & GST_STREAM_TYPE_TEXT) {
-      s = gst_play_stream_info_new (n_text, GST_TYPE_PLAY_SUBTITLE_INFO);
+      s = gtk_gst_play_stream_info_new (n_text, GST_TYPE_PLAY_SUBTITLE_INFO);
       n_text++;
     } else {
       GST_DEBUG_OBJECT (self, "Unknown type stream %d", i);
@@ -2248,19 +2248,19 @@ gst_play_streams_info_create_from_collection (GstPlay * self,
           (media_info->subtitle_stream_list, s);
 
     GST_DEBUG_OBJECT (self, "create %s stream stream_index: %d",
-        gst_play_stream_info_get_stream_type (s), s->stream_index);
+        gtk_gst_play_stream_info_get_stream_type (s), s->stream_index);
 
-    gst_play_stream_info_update_from_stream (self, s, stream);
+    gtk_gst_play_stream_info_update_from_stream (self, s, stream);
   }
 }
 
 static void
 video_changed_cb (G_GNUC_UNUSED GObject * object, gpointer user_data)
 {
-  GstPlay *self = GST_PLAY (user_data);
+  GtkGstPlay *self = GST_PLAY (user_data);
 
   g_mutex_lock (&self->lock);
-  gst_play_streams_info_create (self, self->media_info,
+  gtk_gst_play_streams_info_create (self, self->media_info,
       "n-video", GST_TYPE_PLAY_VIDEO_INFO);
   g_mutex_unlock (&self->lock);
 }
@@ -2268,10 +2268,10 @@ video_changed_cb (G_GNUC_UNUSED GObject * object, gpointer user_data)
 static void
 audio_changed_cb (G_GNUC_UNUSED GObject * object, gpointer user_data)
 {
-  GstPlay *self = GST_PLAY (user_data);
+  GtkGstPlay *self = GST_PLAY (user_data);
 
   g_mutex_lock (&self->lock);
-  gst_play_streams_info_create (self, self->media_info,
+  gtk_gst_play_streams_info_create (self, self->media_info,
       "n-audio", GST_TYPE_PLAY_AUDIO_INFO);
   g_mutex_unlock (&self->lock);
 }
@@ -2279,10 +2279,10 @@ audio_changed_cb (G_GNUC_UNUSED GObject * object, gpointer user_data)
 static void
 subtitle_changed_cb (G_GNUC_UNUSED GObject * object, gpointer user_data)
 {
-  GstPlay *self = GST_PLAY (user_data);
+  GtkGstPlay *self = GST_PLAY (user_data);
 
   g_mutex_lock (&self->lock);
-  gst_play_streams_info_create (self, self->media_info,
+  gtk_gst_play_streams_info_create (self, self->media_info,
       "n-text", GST_TYPE_PLAY_SUBTITLE_INFO);
   g_mutex_unlock (&self->lock);
 }
@@ -2314,7 +2314,7 @@ get_container_format (GstTagList * tags)
 }
 
 static void *
-get_from_tags (GstPlay * self, GstPlayMediaInfo * media_info,
+get_from_tags (GtkGstPlay * self, GtkGstPlayMediaInfo * media_info,
     void *(*func) (GstTagList *))
 {
   GList *l;
@@ -2328,11 +2328,11 @@ get_from_tags (GstPlay * self, GstPlayMediaInfo * media_info,
 
   /* if global tag does not exit then try video and audio streams */
   GST_DEBUG_OBJECT (self, "trying video tags");
-  for (l = gst_play_media_info_get_video_streams (media_info); l != NULL;
+  for (l = gtk_gst_play_media_info_get_video_streams (media_info); l != NULL;
       l = l->next) {
     GstTagList *tags;
 
-    tags = gst_play_stream_info_get_tags ((GstPlayStreamInfo *) l->data);
+    tags = gtk_gst_play_stream_info_get_tags ((GtkGstPlayStreamInfo *) l->data);
     if (tags)
       ret = func (tags);
 
@@ -2341,11 +2341,11 @@ get_from_tags (GstPlay * self, GstPlayMediaInfo * media_info,
   }
 
   GST_DEBUG_OBJECT (self, "trying audio tags");
-  for (l = gst_play_media_info_get_audio_streams (media_info); l != NULL;
+  for (l = gtk_gst_play_media_info_get_audio_streams (media_info); l != NULL;
       l = l->next) {
     GstTagList *tags;
 
-    tags = gst_play_stream_info_get_tags ((GstPlayStreamInfo *) l->data);
+    tags = gtk_gst_play_stream_info_get_tags ((GtkGstPlayStreamInfo *) l->data);
     if (tags)
       ret = func (tags);
 
@@ -2369,15 +2369,15 @@ get_cover_sample (GstTagList * tags)
   return cover_sample;
 }
 
-static GstPlayMediaInfo *
-gst_play_media_info_create (GstPlay * self)
+static GtkGstPlayMediaInfo *
+gtk_gst_play_media_info_create (GtkGstPlay * self)
 {
-  GstPlayMediaInfo *media_info;
+  GtkGstPlayMediaInfo *media_info;
   GstQuery *query;
 
   GST_DEBUG_OBJECT (self, "begin");
-  media_info = gst_play_media_info_new (self->uri);
-  media_info->duration = gst_play_get_duration (self);
+  media_info = gtk_gst_play_media_info_new (self->uri);
+  media_info->duration = gtk_gst_play_get_duration (self);
   media_info->tags = self->global_tags;
   media_info->is_live = self->is_live;
   self->global_tags = NULL;
@@ -2388,15 +2388,15 @@ gst_play_media_info_create (GstPlay * self)
   gst_query_unref (query);
 
   if (self->use_playbin3 && self->collection) {
-    gst_play_streams_info_create_from_collection (self, media_info,
+    gtk_gst_play_streams_info_create_from_collection (self, media_info,
         self->collection);
   } else {
     /* create audio/video/sub streams */
-    gst_play_streams_info_create (self, media_info, "n-video",
+    gtk_gst_play_streams_info_create (self, media_info, "n-video",
         GST_TYPE_PLAY_VIDEO_INFO);
-    gst_play_streams_info_create (self, media_info, "n-audio",
+    gtk_gst_play_streams_info_create (self, media_info, "n-audio",
         GST_TYPE_PLAY_AUDIO_INFO);
-    gst_play_streams_info_create (self, media_info, "n-text",
+    gtk_gst_play_streams_info_create (self, media_info, "n-text",
         GST_TYPE_PLAY_SUBTITLE_INFO);
   }
 
@@ -2416,17 +2416,17 @@ gst_play_media_info_create (GstPlay * self)
 }
 
 static void
-tags_changed_cb (GstPlay * self, gint stream_index, GType type)
+tags_changed_cb (GtkGstPlay * self, gint stream_index, GType type)
 {
-  GstPlayStreamInfo *s;
+  GtkGstPlayStreamInfo *s;
 
   if (!self->media_info)
     return;
 
   /* update the stream information */
   g_mutex_lock (&self->lock);
-  s = gst_play_stream_info_find (self->media_info, type, stream_index);
-  gst_play_stream_info_update_tags_and_caps (self, s);
+  s = gtk_gst_play_stream_info_find (self->media_info, type, stream_index);
+  gtk_gst_play_stream_info_update_tags_and_caps (self, s);
   g_mutex_unlock (&self->lock);
 
   on_media_info_updated (self);
@@ -2458,29 +2458,29 @@ subtitle_tags_changed_cb (G_GNUC_UNUSED GstElement * playbin, gint stream_index,
 
 static void
 volume_notify_cb (G_GNUC_UNUSED GObject * obj, G_GNUC_UNUSED GParamSpec * pspec,
-    GstPlay * self)
+    GtkGstPlay * self)
 {
-  api_bus_post_message (self, GST_PLAY_MESSAGE_VOLUME_CHANGED,
-      GST_PLAY_MESSAGE_DATA_VOLUME, G_TYPE_DOUBLE,
-      gst_play_get_volume (self), NULL);
+  api_bus_post_message (self, GTL_GST_PLAY_MESSAGE_VOLUME_CHANGED,
+      GTL_GST_PLAY_MESSAGE_DATA_VOLUME, G_TYPE_DOUBLE,
+      gtk_gst_play_get_volume (self), NULL);
 }
 
 static void
 mute_notify_cb (G_GNUC_UNUSED GObject * obj, G_GNUC_UNUSED GParamSpec * pspec,
-    GstPlay * self)
+    GtkGstPlay * self)
 {
 
-  api_bus_post_message (self, GST_PLAY_MESSAGE_MUTE_CHANGED,
-      GST_PLAY_MESSAGE_DATA_IS_MUTED, G_TYPE_BOOLEAN,
-      gst_play_get_mute (self), NULL);
+  api_bus_post_message (self, GTL_GST_PLAY_MESSAGE_MUTE_CHANGED,
+      GTL_GST_PLAY_MESSAGE_DATA_IS_MUTED, G_TYPE_BOOLEAN,
+      gtk_gst_play_get_mute (self), NULL);
 }
 
 static void
-source_setup_cb (GstElement * playbin, GstElement * source, GstPlay * self)
+source_setup_cb (GstElement * playbin, GstElement * source, GtkGstPlay * self)
 {
   gchar *user_agent;
 
-  user_agent = gst_play_config_get_user_agent (self->config);
+  user_agent = gtk_gst_play_config_get_user_agent (self->config);
   if (user_agent) {
     GParamSpec *prop;
 
@@ -2496,9 +2496,9 @@ source_setup_cb (GstElement * playbin, GstElement * source, GstPlay * self)
 }
 
 static gpointer
-gst_play_main (gpointer data)
+gtk_gst_play_main (gpointer data)
 {
-  GstPlay *self = GST_PLAY (data);
+  GtkGstPlay *self = GST_PLAY (data);
   GstBus *bus;
   GSource *source;
   GstElement *scaletempo;
@@ -2514,7 +2514,7 @@ gst_play_main (gpointer data)
   g_source_attach (source, self->context);
   g_source_unref (source);
 
-  env = g_getenv ("GST_PLAY_USE_PLAYBIN3");
+  env = g_getenv ("GTL_GST_PLAY_USE_PLAYBIN3");
   if (env && g_str_has_prefix (env, "1"))
     self->use_playbin3 = TRUE;
 
@@ -2526,21 +2526,21 @@ gst_play_main (gpointer data)
   }
 
   if (!self->playbin) {
-    g_error ("GstPlay: 'playbin' element not found, please check your setup");
+    g_error ("GtkGstPlay: 'playbin' element not found, please check your setup");
     g_assert_not_reached ();
   }
 
   gst_object_ref_sink (self->playbin);
 
   if (self->video_renderer) {
-    gst_play_set_playbin_video_sink (self);
+    gtk_gst_play_set_playbin_video_sink (self);
   }
 
   scaletempo = gst_element_factory_make ("scaletempo", NULL);
   if (scaletempo) {
     g_object_set (self->playbin, "audio-filter", scaletempo, NULL);
   } else {
-    g_warning ("GstPlay: scaletempo element not available. Audio pitch "
+    g_warning ("GtkGstPlay: scaletempo element not available. Audio pitch "
         "will not be preserved during trick modes");
   }
 
@@ -2598,7 +2598,7 @@ gst_play_main (gpointer data)
 
   self->target_state = GST_STATE_NULL;
   self->current_state = GST_STATE_NULL;
-  change_state (self, GST_PLAY_STATE_STOPPED);
+  change_state (self, GTL_GST_PLAY_STATE_STOPPED);
   self->buffering_percent = 100;
   self->is_eos = FALSE;
   self->is_live = FALSE;
@@ -2639,36 +2639,36 @@ gst_play_main (gpointer data)
 }
 
 static gpointer
-gst_play_init_once (G_GNUC_UNUSED gpointer user_data)
+gtk_gst_play_init_once (G_GNUC_UNUSED gpointer user_data)
 {
   gst_init (NULL, NULL);
 
-  GST_DEBUG_CATEGORY_INIT (gst_play_debug, "gst-play", 0, "GstPlay");
-  gst_play_error_quark ();
+  GST_DEBUG_CATEGORY_INIT (gtk_gst_play_debug, "gst-play", 0, "GtkGstPlay");
+  gtk_gst_play_error_quark ();
 
   return NULL;
 }
 
 /**
- * gst_play_new:
- * @video_renderer: (transfer full) (allow-none): GstPlayVideoRenderer to use
+ * gtk_gst_play_new:
+ * @video_renderer: (transfer full) (allow-none): GtkGstPlayVideoRenderer to use
  *
- * Creates a new #GstPlay instance.
+ * Creates a new #GtkGstPlay instance.
  *
  * Video is going to be rendered by @video_renderer, or if %NULL is provided
  * no special video set up will be done and some default handling will be
  * performed.
  *
- * Returns: (transfer full): a new #GstPlay instance
+ * Returns: (transfer full): a new #GtkGstPlay instance
  * Since: 1.20
  */
-GstPlay *
-gst_play_new (GstPlayVideoRenderer * video_renderer)
+GtkGstPlay *
+gtk_gst_play_new (GtkGstPlayVideoRenderer * video_renderer)
 {
   static GOnce once = G_ONCE_INIT;
-  GstPlay *self;
+  GtkGstPlay *self;
 
-  g_once (&once, gst_play_init_once, NULL);
+  g_once (&once, gtk_gst_play_init_once, NULL);
 
   self = g_object_new (GST_TYPE_PLAY, "video-renderer", video_renderer, NULL);
 
@@ -2681,14 +2681,14 @@ gst_play_new (GstPlayVideoRenderer * video_renderer)
 }
 
 /**
- * gst_play_get_message_bus:
- * @play: #GstPlay instance
+ * gtk_gst_play_get_message_bus:
+ * @play: #GtkGstPlay instance
  *
- * GstPlay API exposes a #GstBus instance which purpose is to provide data
+ * GtkGstPlay API exposes a #GstBus instance which purpose is to provide data
  * structures representing play-internal events in form of #GstMessage<!-- -->s of
  * type GST_MESSAGE_APPLICATION.
  *
- * Each message carries a "play-message" field of type #GstPlayMessage.
+ * Each message carries a "play-message" field of type #GtkGstPlayMessage.
  * Further fields of the message data are specific to each possible value of
  * that enumeration.
  *
@@ -2702,15 +2702,15 @@ gst_play_new (GstPlayVideoRenderer * video_renderer)
  * Since: 1.20
  */
 GstBus *
-gst_play_get_message_bus (GstPlay * self)
+gtk_gst_play_get_message_bus (GtkGstPlay * self)
 {
   return g_object_ref (self->api_bus);
 }
 
 static gboolean
-gst_play_play_internal (gpointer user_data)
+gtk_gst_play_play_internal (gpointer user_data)
 {
-  GstPlay *self = GST_PLAY (user_data);
+  GtkGstPlay *self = GST_PLAY (user_data);
   GstStateChangeReturn state_ret;
 
   GST_DEBUG_OBJECT (self, "Play");
@@ -2726,7 +2726,7 @@ gst_play_play_internal (gpointer user_data)
   self->target_state = GST_STATE_PLAYING;
 
   if (self->current_state < GST_STATE_PAUSED)
-    change_state (self, GST_PLAY_STATE_BUFFERING);
+    change_state (self, GTL_GST_PLAY_STATE_BUFFERING);
 
   if (self->current_state >= GST_STATE_PAUSED && !self->is_eos
       && self->buffering_percent >= 100
@@ -2737,7 +2737,7 @@ gst_play_play_internal (gpointer user_data)
   }
 
   if (state_ret == GST_STATE_CHANGE_FAILURE) {
-    on_error (self, g_error_new (GST_PLAY_ERROR, GST_PLAY_ERROR_FAILED,
+    on_error (self, g_error_new (GTL_GST_PLAY_ERROR, GTL_GST_PLAY_ERROR_FAILED,
             "Failed to play"), NULL);
     return G_SOURCE_REMOVE;
   } else if (state_ret == GST_STATE_CHANGE_NO_PREROLL) {
@@ -2755,8 +2755,8 @@ gst_play_play_internal (gpointer user_data)
         GST_SEEK_FLAG_FLUSH, 0);
     if (!ret) {
       GST_ERROR_OBJECT (self, "Seek to beginning failed");
-      gst_play_stop_internal (self, TRUE);
-      gst_play_play_internal (self);
+      gtk_gst_play_stop_internal (self, TRUE);
+      gtk_gst_play_play_internal (self);
     }
   }
 
@@ -2764,25 +2764,25 @@ gst_play_play_internal (gpointer user_data)
 }
 
 /**
- * gst_play_play:
- * @play: #GstPlay instance
+ * gtk_gst_play_play:
+ * @play: #GtkGstPlay instance
  *
  * Request to play the loaded stream.
  * Since: 1.20
  */
 void
-gst_play_play (GstPlay * self)
+gtk_gst_play_play (GtkGstPlay * self)
 {
   g_return_if_fail (GST_IS_PLAY (self));
 
   g_main_context_invoke_full (self->context, G_PRIORITY_DEFAULT,
-      gst_play_play_internal, self, NULL);
+      gtk_gst_play_play_internal, self, NULL);
 }
 
 static gboolean
-gst_play_pause_internal (gpointer user_data)
+gtk_gst_play_pause_internal (gpointer user_data)
 {
-  GstPlay *self = GST_PLAY (user_data);
+  GtkGstPlay *self = GST_PLAY (user_data);
   GstStateChangeReturn state_ret;
 
   GST_DEBUG_OBJECT (self, "Pause");
@@ -2801,11 +2801,11 @@ gst_play_pause_internal (gpointer user_data)
   self->target_state = GST_STATE_PAUSED;
 
   if (self->current_state < GST_STATE_PAUSED)
-    change_state (self, GST_PLAY_STATE_BUFFERING);
+    change_state (self, GTL_GST_PLAY_STATE_BUFFERING);
 
   state_ret = gst_element_set_state (self->playbin, GST_STATE_PAUSED);
   if (state_ret == GST_STATE_CHANGE_FAILURE) {
-    on_error (self, g_error_new (GST_PLAY_ERROR, GST_PLAY_ERROR_FAILED,
+    on_error (self, g_error_new (GTL_GST_PLAY_ERROR, GTL_GST_PLAY_ERROR_FAILED,
             "Failed to pause"), NULL);
     return G_SOURCE_REMOVE;
   } else if (state_ret == GST_STATE_CHANGE_NO_PREROLL) {
@@ -2823,8 +2823,8 @@ gst_play_pause_internal (gpointer user_data)
         GST_SEEK_FLAG_FLUSH, 0);
     if (!ret) {
       GST_ERROR_OBJECT (self, "Seek to beginning failed");
-      gst_play_stop_internal (self, TRUE);
-      gst_play_pause_internal (self);
+      gtk_gst_play_stop_internal (self, TRUE);
+      gtk_gst_play_pause_internal (self);
     }
   }
 
@@ -2832,23 +2832,23 @@ gst_play_pause_internal (gpointer user_data)
 }
 
 /**
- * gst_play_pause:
- * @play: #GstPlay instance
+ * gtk_gst_play_pause:
+ * @play: #GtkGstPlay instance
  *
  * Pauses the current stream.
  * Since: 1.20
  */
 void
-gst_play_pause (GstPlay * self)
+gtk_gst_play_pause (GtkGstPlay * self)
 {
   g_return_if_fail (GST_IS_PLAY (self));
 
   g_main_context_invoke_full (self->context, G_PRIORITY_DEFAULT,
-      gst_play_pause_internal, self, NULL);
+      gtk_gst_play_pause_internal, self, NULL);
 }
 
 static void
-gst_play_stop_internal (GstPlay * self, gboolean transient)
+gtk_gst_play_stop_internal (GtkGstPlay * self, gboolean transient)
 {
   /* directly return if we're already stopped */
   if (self->current_state <= GST_STATE_READY &&
@@ -2871,8 +2871,8 @@ gst_play_stop_internal (GstPlay * self, gboolean transient)
   gst_bus_set_flushing (self->bus, FALSE);
   change_state (self, transient
       && self->app_state !=
-      GST_PLAY_STATE_STOPPED ? GST_PLAY_STATE_BUFFERING :
-      GST_PLAY_STATE_STOPPED);
+      GTL_GST_PLAY_STATE_STOPPED ? GTL_GST_PLAY_STATE_BUFFERING :
+      GTL_GST_PLAY_STATE_STOPPED);
   self->buffering_percent = 100;
   self->cached_duration = GST_CLOCK_TIME_NONE;
   g_mutex_lock (&self->lock);
@@ -2906,36 +2906,36 @@ gst_play_stop_internal (GstPlay * self, gboolean transient)
 }
 
 static gboolean
-gst_play_stop_internal_dispatch (gpointer user_data)
+gtk_gst_play_stop_internal_dispatch (gpointer user_data)
 {
-  GstPlay *self = GST_PLAY (user_data);
+  GtkGstPlay *self = GST_PLAY (user_data);
 
-  gst_play_stop_internal (self, FALSE);
+  gtk_gst_play_stop_internal (self, FALSE);
 
   return G_SOURCE_REMOVE;
 }
 
 
 /**
- * gst_play_stop:
- * @play: #GstPlay instance
+ * gtk_gst_play_stop:
+ * @play: #GtkGstPlay instance
  *
  * Stops playing the current stream and resets to the first position
  * in the stream.
  * Since: 1.20
  */
 void
-gst_play_stop (GstPlay * self)
+gtk_gst_play_stop (GtkGstPlay * self)
 {
   g_return_if_fail (GST_IS_PLAY (self));
 
   g_main_context_invoke_full (self->context, G_PRIORITY_DEFAULT,
-      gst_play_stop_internal_dispatch, self, NULL);
+      gtk_gst_play_stop_internal_dispatch, self, NULL);
 }
 
 /* Must be called with lock from main context, releases lock! */
 static void
-gst_play_seek_internal_locked (GstPlay * self)
+gtk_gst_play_seek_internal_locked (GtkGstPlay * self)
 {
   gboolean ret;
   GstClockTime position;
@@ -2954,7 +2954,7 @@ gst_play_seek_internal_locked (GstPlay * self)
     g_mutex_unlock (&self->lock);
     state_ret = gst_element_set_state (self->playbin, GST_STATE_PAUSED);
     if (state_ret == GST_STATE_CHANGE_FAILURE) {
-      on_error (self, g_error_new (GST_PLAY_ERROR, GST_PLAY_ERROR_FAILED,
+      on_error (self, g_error_new (GTL_GST_PLAY_ERROR, GTL_GST_PLAY_ERROR_FAILED,
               "Failed to seek"), NULL);
       g_mutex_lock (&self->lock);
       return;
@@ -2975,7 +2975,7 @@ gst_play_seek_internal_locked (GstPlay * self)
 
   flags |= GST_SEEK_FLAG_FLUSH;
 
-  accurate = gst_play_config_get_seek_accurate (self->config);
+  accurate = gtk_gst_play_config_get_seek_accurate (self->config);
 
   if (accurate) {
     flags |= GST_SEEK_FLAG_ACCURATE;
@@ -3000,7 +3000,7 @@ gst_play_seek_internal_locked (GstPlay * self)
 
   ret = gst_element_send_event (self->playbin, s_event);
   if (!ret)
-    on_error (self, g_error_new (GST_PLAY_ERROR, GST_PLAY_ERROR_FAILED,
+    on_error (self, g_error_new (GTL_GST_PLAY_ERROR, GTL_GST_PLAY_ERROR_FAILED,
             "Failed to seek to %" GST_TIME_FORMAT, GST_TIME_ARGS (position)),
         NULL);
 
@@ -3008,27 +3008,27 @@ gst_play_seek_internal_locked (GstPlay * self)
 }
 
 static gboolean
-gst_play_seek_internal (gpointer user_data)
+gtk_gst_play_seek_internal (gpointer user_data)
 {
-  GstPlay *self = GST_PLAY (user_data);
+  GtkGstPlay *self = GST_PLAY (user_data);
 
   g_mutex_lock (&self->lock);
-  gst_play_seek_internal_locked (self);
+  gtk_gst_play_seek_internal_locked (self);
   g_mutex_unlock (&self->lock);
 
   return G_SOURCE_REMOVE;
 }
 
 /**
- * gst_play_set_rate:
- * @play: #GstPlay instance
+ * gtk_gst_play_set_rate:
+ * @play: #GtkGstPlay instance
  * @rate: playback rate
  *
  * Playback at specified rate
  * Since: 1.20
  */
 void
-gst_play_set_rate (GstPlay * self, gdouble rate)
+gtk_gst_play_set_rate (GtkGstPlay * self, gdouble rate)
 {
   g_return_if_fail (GST_IS_PLAY (self));
   g_return_if_fail (rate != 0.0);
@@ -3037,14 +3037,14 @@ gst_play_set_rate (GstPlay * self, gdouble rate)
 }
 
 /**
- * gst_play_get_rate:
- * @play: #GstPlay instance
+ * gtk_gst_play_get_rate:
+ * @play: #GtkGstPlay instance
  *
  * Returns: current playback rate
  * Since: 1.20
  */
 gdouble
-gst_play_get_rate (GstPlay * self)
+gtk_gst_play_get_rate (GtkGstPlay * self)
 {
   gdouble val;
 
@@ -3056,8 +3056,8 @@ gst_play_get_rate (GstPlay * self)
 }
 
 /**
- * gst_play_seek:
- * @play: #GstPlay instance
+ * gtk_gst_play_seek:
+ * @play: #GtkGstPlay instance
  * @position: position to seek in nanoseconds
  *
  * Seeks the currently-playing stream to the absolute @position time
@@ -3065,7 +3065,7 @@ gst_play_get_rate (GstPlay * self)
  * Since: 1.20
  */
 void
-gst_play_seek (GstPlay * self, GstClockTime position)
+gtk_gst_play_seek (GtkGstPlay * self, GstClockTime position)
 {
   g_return_if_fail (GST_IS_PLAY (self));
   g_return_if_fail (GST_CLOCK_TIME_IS_VALID (position));
@@ -3091,7 +3091,7 @@ gst_play_seek (GstPlay * self, GstClockTime position)
     if (!self->seek_pending || (now - self->last_seek_time > 250 * GST_MSECOND)) {
       self->seek_source = g_idle_source_new ();
       g_source_set_callback (self->seek_source,
-          (GSourceFunc) gst_play_seek_internal, self, NULL);
+          (GSourceFunc) gtk_gst_play_seek_internal, self, NULL);
       GST_TRACE_OBJECT (self, "Dispatching seek to position %" GST_TIME_FORMAT,
           GST_TIME_ARGS (position));
       g_source_attach (self->seek_source, self->context);
@@ -3102,7 +3102,7 @@ gst_play_seek (GstPlay * self, GstClockTime position)
        * it must be smaller than 250 mseconds */
       self->seek_source = g_timeout_source_new (delay);
       g_source_set_callback (self->seek_source,
-          (GSourceFunc) gst_play_seek_internal, self, NULL);
+          (GSourceFunc) gtk_gst_play_seek_internal, self, NULL);
 
       GST_TRACE_OBJECT (self,
           "Delaying seek to position %" GST_TIME_FORMAT " by %u us",
@@ -3114,7 +3114,7 @@ gst_play_seek (GstPlay * self, GstClockTime position)
 }
 
 static void
-remove_seek_source (GstPlay * self)
+remove_seek_source (GtkGstPlay * self)
 {
   if (!self->seek_source)
     return;
@@ -3125,8 +3125,8 @@ remove_seek_source (GstPlay * self)
 }
 
 /**
- * gst_play_get_uri:
- * @play: #GstPlay instance
+ * gtk_gst_play_get_uri:
+ * @play: #GtkGstPlay instance
  *
  * Gets the URI of the currently-playing stream.
  *
@@ -3135,7 +3135,7 @@ remove_seek_source (GstPlay * self)
  * Since: 1.20
  */
 gchar *
-gst_play_get_uri (GstPlay * self)
+gtk_gst_play_get_uri (GtkGstPlay * self)
 {
   gchar *val;
 
@@ -3147,15 +3147,15 @@ gst_play_get_uri (GstPlay * self)
 }
 
 /**
- * gst_play_set_uri:
- * @play: #GstPlay instance
+ * gtk_gst_play_set_uri:
+ * @play: #GtkGstPlay instance
  * @uri: (nullable): next URI to play.
  *
  * Sets the next URI to play.
  * Since: 1.20
  */
 void
-gst_play_set_uri (GstPlay * self, const gchar * val)
+gtk_gst_play_set_uri (GtkGstPlay * self, const gchar * val)
 {
   g_return_if_fail (GST_IS_PLAY (self));
 
@@ -3163,17 +3163,17 @@ gst_play_set_uri (GstPlay * self, const gchar * val)
 }
 
 /**
- * gst_play_set_subtitle_uri:
- * @play: #GstPlay instance
+ * gtk_gst_play_set_subtitle_uri:
+ * @play: #GtkGstPlay instance
  * @uri: (nullable): subtitle URI
  *
  * Sets the external subtitle URI. This should be combined with a call to
- * gst_play_set_subtitle_track_enabled(@play, TRUE) so the subtitles are actually
+ * gtk_gst_play_set_subtitle_track_enabled(@play, TRUE) so the subtitles are actually
  * rendered.
  * Since: 1.20
  */
 void
-gst_play_set_subtitle_uri (GstPlay * self, const gchar * suburi)
+gtk_gst_play_set_subtitle_uri (GtkGstPlay * self, const gchar * suburi)
 {
   g_return_if_fail (GST_IS_PLAY (self));
 
@@ -3181,8 +3181,8 @@ gst_play_set_subtitle_uri (GstPlay * self, const gchar * suburi)
 }
 
 /**
- * gst_play_get_subtitle_uri:
- * @play: #GstPlay instance
+ * gtk_gst_play_get_subtitle_uri:
+ * @play: #GtkGstPlay instance
  *
  * current subtitle URI
  *
@@ -3191,7 +3191,7 @@ gst_play_set_subtitle_uri (GstPlay * self, const gchar * suburi)
  * Since: 1.20
  */
 gchar *
-gst_play_get_subtitle_uri (GstPlay * self)
+gtk_gst_play_get_subtitle_uri (GtkGstPlay * self)
 {
   gchar *val = NULL;
 
@@ -3203,15 +3203,15 @@ gst_play_get_subtitle_uri (GstPlay * self)
 }
 
 /**
- * gst_play_get_position:
- * @play: #GstPlay instance
+ * gtk_gst_play_get_position:
+ * @play: #GtkGstPlay instance
  *
  * Returns: the absolute position time, in nanoseconds, of the
  * currently-playing stream.
  * Since: 1.20
  */
 GstClockTime
-gst_play_get_position (GstPlay * self)
+gtk_gst_play_get_position (GtkGstPlay * self)
 {
   GstClockTime val;
 
@@ -3223,8 +3223,8 @@ gst_play_get_position (GstPlay * self)
 }
 
 /**
- * gst_play_get_duration:
- * @play: #GstPlay instance
+ * gtk_gst_play_get_duration:
+ * @play: #GtkGstPlay instance
  *
  * Retrieves the duration of the media stream that self represents.
  *
@@ -3233,7 +3233,7 @@ gst_play_get_position (GstPlay * self)
  * Since: 1.20
  */
 GstClockTime
-gst_play_get_duration (GstPlay * self)
+gtk_gst_play_get_duration (GtkGstPlay * self)
 {
   GstClockTime val;
 
@@ -3245,8 +3245,8 @@ gst_play_get_duration (GstPlay * self)
 }
 
 /**
- * gst_play_get_volume:
- * @play: #GstPlay instance
+ * gtk_gst_play_get_volume:
+ * @play: #GtkGstPlay instance
  *
  * Returns the current volume level, as a percentage between 0 and 1.
  *
@@ -3254,7 +3254,7 @@ gst_play_get_duration (GstPlay * self)
  * Since: 1.20
  */
 gdouble
-gst_play_get_volume (GstPlay * self)
+gtk_gst_play_get_volume (GtkGstPlay * self)
 {
   gdouble val;
 
@@ -3266,15 +3266,15 @@ gst_play_get_volume (GstPlay * self)
 }
 
 /**
- * gst_play_set_volume:
- * @play: #GstPlay instance
+ * gtk_gst_play_set_volume:
+ * @play: #GtkGstPlay instance
  * @val: the new volume level, as a percentage between 0 and 1
  *
  * Sets the volume level of the stream as a percentage between 0 and 1.
  * Since: 1.20
  */
 void
-gst_play_set_volume (GstPlay * self, gdouble val)
+gtk_gst_play_set_volume (GtkGstPlay * self, gdouble val)
 {
   g_return_if_fail (GST_IS_PLAY (self));
 
@@ -3282,14 +3282,14 @@ gst_play_set_volume (GstPlay * self, gdouble val)
 }
 
 /**
- * gst_play_get_mute:
- * @play: #GstPlay instance
+ * gtk_gst_play_get_mute:
+ * @play: #GtkGstPlay instance
  *
  * Returns: %TRUE if the currently-playing stream is muted.
  * Since: 1.20
  */
 gboolean
-gst_play_get_mute (GstPlay * self)
+gtk_gst_play_get_mute (GtkGstPlay * self)
 {
   gboolean val;
 
@@ -3301,15 +3301,15 @@ gst_play_get_mute (GstPlay * self)
 }
 
 /**
- * gst_play_set_mute:
- * @play: #GstPlay instance
+ * gtk_gst_play_set_mute:
+ * @play: #GtkGstPlay instance
  * @val: Mute state the should be set
  *
  * %TRUE if the currently-playing stream should be muted.
  * Since: 1.20
  */
 void
-gst_play_set_mute (GstPlay * self, gboolean val)
+gtk_gst_play_set_mute (GtkGstPlay * self, gboolean val)
 {
   g_return_if_fail (GST_IS_PLAY (self));
 
@@ -3317,8 +3317,8 @@ gst_play_set_mute (GstPlay * self, gboolean val)
 }
 
 /**
- * gst_play_get_pipeline:
- * @play: #GstPlay instance
+ * gtk_gst_play_get_pipeline:
+ * @play: #GtkGstPlay instance
  *
  * Returns: (transfer full): The internal playbin instance.
  *
@@ -3326,7 +3326,7 @@ gst_play_set_mute (GstPlay * self, gboolean val)
  * Since: 1.20
  */
 GstElement *
-gst_play_get_pipeline (GstPlay * self)
+gtk_gst_play_get_pipeline (GtkGstPlay * self)
 {
   GstElement *val;
 
@@ -3338,20 +3338,20 @@ gst_play_get_pipeline (GstPlay * self)
 }
 
 /**
- * gst_play_get_media_info:
- * @play: #GstPlay instance
+ * gtk_gst_play_get_media_info:
+ * @play: #GtkGstPlay instance
  *
- * A Function to get the current media info #GstPlayMediaInfo instance.
+ * A Function to get the current media info #GtkGstPlayMediaInfo instance.
  *
  * Returns: (transfer full) (nullable): media info instance.
  *
  * The caller should free it with g_object_unref()
  * Since: 1.20
  */
-GstPlayMediaInfo *
-gst_play_get_media_info (GstPlay * self)
+GtkGstPlayMediaInfo *
+gtk_gst_play_get_media_info (GtkGstPlay * self)
 {
-  GstPlayMediaInfo *info;
+  GtkGstPlayMediaInfo *info;
 
   g_return_val_if_fail (GST_IS_PLAY (self), NULL);
 
@@ -3359,39 +3359,39 @@ gst_play_get_media_info (GstPlay * self)
     return NULL;
 
   g_mutex_lock (&self->lock);
-  info = gst_play_media_info_copy (self->media_info);
+  info = gtk_gst_play_media_info_copy (self->media_info);
   g_mutex_unlock (&self->lock);
 
   return info;
 }
 
 /**
- * gst_play_get_current_audio_track:
- * @play: #GstPlay instance
+ * gtk_gst_play_get_current_audio_track:
+ * @play: #GtkGstPlay instance
  *
- * A Function to get current audio #GstPlayAudioInfo instance.
+ * A Function to get current audio #GtkGstPlayAudioInfo instance.
  *
  * Returns: (transfer full) (nullable): current audio track.
  *
  * The caller should free it with g_object_unref()
  * Since: 1.20
  */
-GstPlayAudioInfo *
-gst_play_get_current_audio_track (GstPlay * self)
+GtkGstPlayAudioInfo *
+gtk_gst_play_get_current_audio_track (GtkGstPlay * self)
 {
-  GstPlayAudioInfo *info;
+  GtkGstPlayAudioInfo *info;
 
   g_return_val_if_fail (GST_IS_PLAY (self), NULL);
 
-  if (!is_track_enabled (self, GST_PLAY_FLAG_AUDIO))
+  if (!is_track_enabled (self, GTL_GST_PLAY_FLAG_AUDIO))
     return NULL;
 
   if (self->use_playbin3) {
-    info = (GstPlayAudioInfo *)
-        gst_play_stream_info_get_current_from_stream_id (self,
+    info = (GtkGstPlayAudioInfo *)
+        gtk_gst_play_stream_info_get_current_from_stream_id (self,
         self->audio_sid, GST_TYPE_PLAY_AUDIO_INFO);
   } else {
-    info = (GstPlayAudioInfo *) gst_play_stream_info_get_current (self,
+    info = (GtkGstPlayAudioInfo *) gtk_gst_play_stream_info_get_current (self,
         "current-audio", GST_TYPE_PLAY_AUDIO_INFO);
   }
 
@@ -3399,32 +3399,32 @@ gst_play_get_current_audio_track (GstPlay * self)
 }
 
 /**
- * gst_play_get_current_video_track:
- * @play: #GstPlay instance
+ * gtk_gst_play_get_current_video_track:
+ * @play: #GtkGstPlay instance
  *
- * A Function to get current video #GstPlayVideoInfo instance.
+ * A Function to get current video #GtkGstPlayVideoInfo instance.
  *
  * Returns: (transfer full) (nullable): current video track.
  *
  * The caller should free it with g_object_unref()
  * Since: 1.20
  */
-GstPlayVideoInfo *
-gst_play_get_current_video_track (GstPlay * self)
+GtkGstPlayVideoInfo *
+gtk_gst_play_get_current_video_track (GtkGstPlay * self)
 {
-  GstPlayVideoInfo *info;
+  GtkGstPlayVideoInfo *info;
 
   g_return_val_if_fail (GST_IS_PLAY (self), NULL);
 
-  if (!is_track_enabled (self, GST_PLAY_FLAG_VIDEO))
+  if (!is_track_enabled (self, GTL_GST_PLAY_FLAG_VIDEO))
     return NULL;
 
   if (self->use_playbin3) {
-    info = (GstPlayVideoInfo *)
-        gst_play_stream_info_get_current_from_stream_id (self,
+    info = (GtkGstPlayVideoInfo *)
+        gtk_gst_play_stream_info_get_current_from_stream_id (self,
         self->video_sid, GST_TYPE_PLAY_VIDEO_INFO);
   } else {
-    info = (GstPlayVideoInfo *) gst_play_stream_info_get_current (self,
+    info = (GtkGstPlayVideoInfo *) gtk_gst_play_stream_info_get_current (self,
         "current-video", GST_TYPE_PLAY_VIDEO_INFO);
   }
 
@@ -3432,32 +3432,32 @@ gst_play_get_current_video_track (GstPlay * self)
 }
 
 /**
- * gst_play_get_current_subtitle_track:
- * @play: #GstPlay instance
+ * gtk_gst_play_get_current_subtitle_track:
+ * @play: #GtkGstPlay instance
  *
- * A Function to get current subtitle #GstPlaySubtitleInfo instance.
+ * A Function to get current subtitle #GtkGstPlaySubtitleInfo instance.
  *
  * Returns: (transfer full) (nullable): current subtitle track.
  *
  * The caller should free it with g_object_unref()
  * Since: 1.20
  */
-GstPlaySubtitleInfo *
-gst_play_get_current_subtitle_track (GstPlay * self)
+GtkGstPlaySubtitleInfo *
+gtk_gst_play_get_current_subtitle_track (GtkGstPlay * self)
 {
-  GstPlaySubtitleInfo *info;
+  GtkGstPlaySubtitleInfo *info;
 
   g_return_val_if_fail (GST_IS_PLAY (self), NULL);
 
-  if (!is_track_enabled (self, GST_PLAY_FLAG_SUBTITLE))
+  if (!is_track_enabled (self, GTL_GST_PLAY_FLAG_SUBTITLE))
     return NULL;
 
   if (self->use_playbin3) {
-    info = (GstPlaySubtitleInfo *)
-        gst_play_stream_info_get_current_from_stream_id (self,
+    info = (GtkGstPlaySubtitleInfo *)
+        gtk_gst_play_stream_info_get_current_from_stream_id (self,
         self->subtitle_sid, GST_TYPE_PLAY_SUBTITLE_INFO);
   } else {
-    info = (GstPlaySubtitleInfo *) gst_play_stream_info_get_current (self,
+    info = (GtkGstPlaySubtitleInfo *) gtk_gst_play_stream_info_get_current (self,
         "current-text", GST_TYPE_PLAY_SUBTITLE_INFO);
   }
 
@@ -3466,7 +3466,7 @@ gst_play_get_current_subtitle_track (GstPlay * self)
 
 /* Must be called with lock */
 static gboolean
-gst_play_select_streams (GstPlay * self)
+gtk_gst_play_select_streams (GtkGstPlay * self)
 {
   GList *stream_list = NULL;
   gboolean ret = FALSE;
@@ -3492,8 +3492,8 @@ gst_play_select_streams (GstPlay * self)
 }
 
 /**
- * gst_play_set_audio_track:
- * @play: #GstPlay instance
+ * gtk_gst_play_set_audio_track:
+ * @play: #GtkGstPlay instance
  * @stream_index: stream index
  *
  * Returns: %TRUE or %FALSE
@@ -3502,15 +3502,15 @@ gst_play_select_streams (GstPlay * self)
  * Since: 1.20
  */
 gboolean
-gst_play_set_audio_track (GstPlay * self, gint stream_index)
+gtk_gst_play_set_audio_track (GtkGstPlay * self, gint stream_index)
 {
-  GstPlayStreamInfo *info;
+  GtkGstPlayStreamInfo *info;
   gboolean ret = TRUE;
 
   g_return_val_if_fail (GST_IS_PLAY (self), 0);
 
   g_mutex_lock (&self->lock);
-  info = gst_play_stream_info_find (self->media_info,
+  info = gtk_gst_play_stream_info_find (self->media_info,
       GST_TYPE_PLAY_AUDIO_INFO, stream_index);
   g_mutex_unlock (&self->lock);
   if (!info) {
@@ -3522,7 +3522,7 @@ gst_play_set_audio_track (GstPlay * self, gint stream_index)
     g_mutex_lock (&self->lock);
     g_free (self->audio_sid);
     self->audio_sid = g_strdup (info->stream_id);
-    ret = gst_play_select_streams (self);
+    ret = gtk_gst_play_select_streams (self);
     g_mutex_unlock (&self->lock);
   } else {
     g_object_set (G_OBJECT (self->playbin), "current-audio", stream_index,
@@ -3534,8 +3534,8 @@ gst_play_set_audio_track (GstPlay * self, gint stream_index)
 }
 
 /**
- * gst_play_set_video_track:
- * @play: #GstPlay instance
+ * gtk_gst_play_set_video_track:
+ * @play: #GtkGstPlay instance
  * @stream_index: stream index
  *
  * Returns: %TRUE or %FALSE
@@ -3544,16 +3544,16 @@ gst_play_set_audio_track (GstPlay * self, gint stream_index)
  * Since: 1.20
  */
 gboolean
-gst_play_set_video_track (GstPlay * self, gint stream_index)
+gtk_gst_play_set_video_track (GtkGstPlay * self, gint stream_index)
 {
-  GstPlayStreamInfo *info;
+  GtkGstPlayStreamInfo *info;
   gboolean ret = TRUE;
 
   g_return_val_if_fail (GST_IS_PLAY (self), 0);
 
   /* check if stream_index exist in our internal media_info list */
   g_mutex_lock (&self->lock);
-  info = gst_play_stream_info_find (self->media_info,
+  info = gtk_gst_play_stream_info_find (self->media_info,
       GST_TYPE_PLAY_VIDEO_INFO, stream_index);
   g_mutex_unlock (&self->lock);
   if (!info) {
@@ -3565,7 +3565,7 @@ gst_play_set_video_track (GstPlay * self, gint stream_index)
     g_mutex_lock (&self->lock);
     g_free (self->video_sid);
     self->video_sid = g_strdup (info->stream_id);
-    ret = gst_play_select_streams (self);
+    ret = gtk_gst_play_select_streams (self);
     g_mutex_unlock (&self->lock);
   } else {
     g_object_set (G_OBJECT (self->playbin), "current-video", stream_index,
@@ -3577,8 +3577,8 @@ gst_play_set_video_track (GstPlay * self, gint stream_index)
 }
 
 /**
- * gst_play_set_subtitle_track:
- * @play: #GstPlay instance
+ * gtk_gst_play_set_subtitle_track:
+ * @play: #GtkGstPlay instance
  * @stream_index: stream index
  *
  * Returns: %TRUE or %FALSE
@@ -3587,15 +3587,15 @@ gst_play_set_video_track (GstPlay * self, gint stream_index)
  * Since: 1.20
  */
 gboolean
-gst_play_set_subtitle_track (GstPlay * self, gint stream_index)
+gtk_gst_play_set_subtitle_track (GtkGstPlay * self, gint stream_index)
 {
-  GstPlayStreamInfo *info;
+  GtkGstPlayStreamInfo *info;
   gboolean ret = TRUE;
 
   g_return_val_if_fail (GST_IS_PLAY (self), 0);
 
   g_mutex_lock (&self->lock);
-  info = gst_play_stream_info_find (self->media_info,
+  info = gtk_gst_play_stream_info_find (self->media_info,
       GST_TYPE_PLAY_SUBTITLE_INFO, stream_index);
   g_mutex_unlock (&self->lock);
   if (!info) {
@@ -3607,7 +3607,7 @@ gst_play_set_subtitle_track (GstPlay * self, gint stream_index)
     g_mutex_lock (&self->lock);
     g_free (self->subtitle_sid);
     self->subtitle_sid = g_strdup (info->stream_id);
-    ret = gst_play_select_streams (self);
+    ret = gtk_gst_play_select_streams (self);
     g_mutex_unlock (&self->lock);
   } else {
     g_object_set (G_OBJECT (self->playbin), "current-text", stream_index, NULL);
@@ -3618,80 +3618,80 @@ gst_play_set_subtitle_track (GstPlay * self, gint stream_index)
 }
 
 /**
- * gst_play_set_audio_track_enabled:
- * @play: #GstPlay instance
+ * gtk_gst_play_set_audio_track_enabled:
+ * @play: #GtkGstPlay instance
  * @enabled: TRUE or FALSE
  *
  * Enable or disable the current audio track.
  * Since: 1.20
  */
 void
-gst_play_set_audio_track_enabled (GstPlay * self, gboolean enabled)
+gtk_gst_play_set_audio_track_enabled (GtkGstPlay * self, gboolean enabled)
 {
   g_return_if_fail (GST_IS_PLAY (self));
 
   if (enabled)
-    play_set_flag (self, GST_PLAY_FLAG_AUDIO);
+    play_set_flag (self, GTL_GST_PLAY_FLAG_AUDIO);
   else
-    play_clear_flag (self, GST_PLAY_FLAG_AUDIO);
+    play_clear_flag (self, GTL_GST_PLAY_FLAG_AUDIO);
 
   GST_DEBUG_OBJECT (self, "track is '%s'", enabled ? "Enabled" : "Disabled");
 }
 
 /**
- * gst_play_set_video_track_enabled:
- * @play: #GstPlay instance
+ * gtk_gst_play_set_video_track_enabled:
+ * @play: #GtkGstPlay instance
  * @enabled: TRUE or FALSE
  *
  * Enable or disable the current video track.
  * Since: 1.20
  */
 void
-gst_play_set_video_track_enabled (GstPlay * self, gboolean enabled)
+gtk_gst_play_set_video_track_enabled (GtkGstPlay * self, gboolean enabled)
 {
   g_return_if_fail (GST_IS_PLAY (self));
 
   if (enabled)
-    play_set_flag (self, GST_PLAY_FLAG_VIDEO);
+    play_set_flag (self, GTL_GST_PLAY_FLAG_VIDEO);
   else
-    play_clear_flag (self, GST_PLAY_FLAG_VIDEO);
+    play_clear_flag (self, GTL_GST_PLAY_FLAG_VIDEO);
 
   GST_DEBUG_OBJECT (self, "track is '%s'", enabled ? "Enabled" : "Disabled");
 }
 
 /**
- * gst_play_set_subtitle_track_enabled:
- * @play: #GstPlay instance
+ * gtk_gst_play_set_subtitle_track_enabled:
+ * @play: #GtkGstPlay instance
  * @enabled: TRUE or FALSE
  *
  * Enable or disable the current subtitle track.
  * Since: 1.20
  */
 void
-gst_play_set_subtitle_track_enabled (GstPlay * self, gboolean enabled)
+gtk_gst_play_set_subtitle_track_enabled (GtkGstPlay * self, gboolean enabled)
 {
   g_return_if_fail (GST_IS_PLAY (self));
 
   if (enabled)
-    play_set_flag (self, GST_PLAY_FLAG_SUBTITLE);
+    play_set_flag (self, GTL_GST_PLAY_FLAG_SUBTITLE);
   else
-    play_clear_flag (self, GST_PLAY_FLAG_SUBTITLE);
+    play_clear_flag (self, GTL_GST_PLAY_FLAG_SUBTITLE);
 
   GST_DEBUG_OBJECT (self, "track is '%s'", enabled ? "Enabled" : "Disabled");
 }
 
 /**
- * gst_play_set_visualization:
- * @play: #GstPlay instance
+ * gtk_gst_play_set_visualization:
+ * @play: #GtkGstPlay instance
  * @name: (nullable): visualization element obtained from
- * #gst_play_visualizations_get()
+ * #gtk_gst_play_visualizations_get()
  *
  * Returns: %TRUE if the visualizations was set correctly. Otherwise,
  * %FALSE.
  * Since: 1.20
  */
 gboolean
-gst_play_set_visualization (GstPlay * self, const gchar * name)
+gtk_gst_play_set_visualization (GtkGstPlay * self, const gchar * name)
 {
   g_return_val_if_fail (GST_IS_PLAY (self), FALSE);
 
@@ -3721,8 +3721,8 @@ error_no_element:
 }
 
 /**
- * gst_play_get_current_visualization:
- * @play: #GstPlay instance
+ * gtk_gst_play_get_current_visualization:
+ * @play: #GtkGstPlay instance
  *
  * Returns: (transfer full) (nullable): Name of the currently enabled
  *   visualization.
@@ -3730,14 +3730,14 @@ error_no_element:
  * Since: 1.20
  */
 gchar *
-gst_play_get_current_visualization (GstPlay * self)
+gtk_gst_play_get_current_visualization (GtkGstPlay * self)
 {
   gchar *name = NULL;
   GstElement *vis_plugin = NULL;
 
   g_return_val_if_fail (GST_IS_PLAY (self), NULL);
 
-  if (!is_track_enabled (self, GST_PLAY_FLAG_VIS))
+  if (!is_track_enabled (self, GTL_GST_PLAY_FLAG_VIS))
     return NULL;
 
   g_object_get (self->playbin, "vis-plugin", &vis_plugin, NULL);
@@ -3755,22 +3755,22 @@ gst_play_get_current_visualization (GstPlay * self)
 }
 
 /**
- * gst_play_set_visualization_enabled:
- * @play: #GstPlay instance
+ * gtk_gst_play_set_visualization_enabled:
+ * @play: #GtkGstPlay instance
  * @enabled: TRUE or FALSE
  *
  * Enable or disable the visualization.
  * Since: 1.20
  */
 void
-gst_play_set_visualization_enabled (GstPlay * self, gboolean enabled)
+gtk_gst_play_set_visualization_enabled (GtkGstPlay * self, gboolean enabled)
 {
   g_return_if_fail (GST_IS_PLAY (self));
 
   if (enabled)
-    play_set_flag (self, GST_PLAY_FLAG_VIS);
+    play_set_flag (self, GTL_GST_PLAY_FLAG_VIS);
   else
-    play_clear_flag (self, GST_PLAY_FLAG_VIS);
+    play_clear_flag (self, GTL_GST_PLAY_FLAG_VIS);
 
   GST_DEBUG_OBJECT (self, "visualization is '%s'",
       enabled ? "Enabled" : "Disabled");
@@ -3783,21 +3783,21 @@ struct CBChannelMap
 };
 
 static const struct CBChannelMap cb_channel_map[] = {
-  /* GST_PLAY_COLOR_BALANCE_BRIGHTNESS */ {"BRIGHTNESS", "brightness"},
-  /* GST_PLAY_COLOR_BALANCE_CONTRAST   */ {"CONTRAST", "contrast"},
-  /* GST_PLAY_COLOR_BALANCE_SATURATION */ {"SATURATION", "saturation"},
-  /* GST_PLAY_COLOR_BALANCE_HUE        */ {"HUE", "hue"},
+  /* GTL_GST_PLAY_COLOR_BALANCE_BRIGHTNESS */ {"BRIGHTNESS", "brightness"},
+  /* GTL_GST_PLAY_COLOR_BALANCE_CONTRAST   */ {"CONTRAST", "contrast"},
+  /* GTL_GST_PLAY_COLOR_BALANCE_SATURATION */ {"SATURATION", "saturation"},
+  /* GTL_GST_PLAY_COLOR_BALANCE_HUE        */ {"HUE", "hue"},
 };
 
 static GstColorBalanceChannel *
-gst_play_color_balance_find_channel (GstPlay * self,
-    GstPlayColorBalanceType type)
+gtk_gst_play_color_balance_find_channel (GtkGstPlay * self,
+    GtkGstPlayColorBalanceType type)
 {
   GstColorBalanceChannel *channel;
   const GList *l, *channels;
 
-  if (type < GST_PLAY_COLOR_BALANCE_BRIGHTNESS ||
-      type > GST_PLAY_COLOR_BALANCE_HUE)
+  if (type < GTL_GST_PLAY_COLOR_BALANCE_BRIGHTNESS ||
+      type > GTL_GST_PLAY_COLOR_BALANCE_HUE)
     return NULL;
 
   channels =
@@ -3812,8 +3812,8 @@ gst_play_color_balance_find_channel (GstPlay * self,
 }
 
 /**
- * gst_play_has_color_balance:
- * @play:#GstPlay instance
+ * gtk_gst_play_has_color_balance:
+ * @play:#GtkGstPlay instance
  *
  * Checks whether the @play has color balance support available.
  *
@@ -3822,7 +3822,7 @@ gst_play_color_balance_find_channel (GstPlay * self,
  * Since: 1.20
  */
 gboolean
-gst_play_has_color_balance (GstPlay * self)
+gtk_gst_play_has_color_balance (GtkGstPlay * self)
 {
   const GList *channels;
 
@@ -3837,9 +3837,9 @@ gst_play_has_color_balance (GstPlay * self)
 }
 
 /**
- * gst_play_set_color_balance:
- * @play: #GstPlay instance
- * @type: #GstPlayColorBalanceType
+ * gtk_gst_play_set_color_balance:
+ * @play: #GtkGstPlay instance
+ * @type: #GtkGstPlayColorBalanceType
  * @value: The new value for the @type, ranged [0,1]
  *
  * Sets the current value of the indicated channel @type to the passed
@@ -3847,7 +3847,7 @@ gst_play_has_color_balance (GstPlay * self)
  * Since: 1.20
  */
 void
-gst_play_set_color_balance (GstPlay * self, GstPlayColorBalanceType type,
+gtk_gst_play_set_color_balance (GtkGstPlay * self, GtkGstPlayColorBalanceType type,
     gdouble value)
 {
   GstColorBalanceChannel *channel;
@@ -3859,7 +3859,7 @@ gst_play_set_color_balance (GstPlay * self, GstPlayColorBalanceType type,
   if (!GST_IS_COLOR_BALANCE (self->playbin))
     return;
 
-  channel = gst_play_color_balance_find_channel (self, type);
+  channel = gtk_gst_play_color_balance_find_channel (self, type);
   if (!channel)
     return;
 
@@ -3874,9 +3874,9 @@ gst_play_set_color_balance (GstPlay * self, GstPlayColorBalanceType type,
 }
 
 /**
- * gst_play_get_color_balance:
- * @play: #GstPlay instance
- * @type: #GstPlayColorBalanceType
+ * gtk_gst_play_get_color_balance:
+ * @play: #GtkGstPlay instance
+ * @type: #GtkGstPlayColorBalanceType
  *
  * Retrieve the current value of the indicated @type.
  *
@@ -3885,7 +3885,7 @@ gst_play_set_color_balance (GstPlay * self, GstPlayColorBalanceType type,
  * Since: 1.20
  */
 gdouble
-gst_play_get_color_balance (GstPlay * self, GstPlayColorBalanceType type)
+gtk_gst_play_get_color_balance (GtkGstPlay * self, GtkGstPlayColorBalanceType type)
 {
   GstColorBalanceChannel *channel;
   gint value;
@@ -3895,7 +3895,7 @@ gst_play_get_color_balance (GstPlay * self, GstPlayColorBalanceType type)
   if (!GST_IS_COLOR_BALANCE (self->playbin))
     return -1;
 
-  channel = gst_play_color_balance_find_channel (self, type);
+  channel = gtk_gst_play_color_balance_find_channel (self, type);
   if (!channel)
     return -1;
 
@@ -3908,8 +3908,8 @@ gst_play_get_color_balance (GstPlay * self, GstPlayColorBalanceType type)
 }
 
 /**
- * gst_play_get_multiview_mode:
- * @play: #GstPlay instance
+ * gtk_gst_play_get_multiview_mode:
+ * @play: #GtkGstPlay instance
  *
  * Retrieve the current value of the indicated @type.
  *
@@ -3918,7 +3918,7 @@ gst_play_get_color_balance (GstPlay * self, GstPlayColorBalanceType type)
  * Since: 1.20
  */
 GstVideoMultiviewFramePacking
-gst_play_get_multiview_mode (GstPlay * self)
+gtk_gst_play_get_multiview_mode (GtkGstPlay * self)
 {
   GstVideoMultiviewFramePacking val = GST_VIDEO_MULTIVIEW_FRAME_PACKING_NONE;
 
@@ -3931,8 +3931,8 @@ gst_play_get_multiview_mode (GstPlay * self)
 }
 
 /**
- * gst_play_set_multiview_mode:
- * @play: #GstPlay instance
+ * gtk_gst_play_set_multiview_mode:
+ * @play: #GtkGstPlay instance
  * @mode: The new value for the @type
  *
  * Sets the current value of the indicated mode @type to the passed
@@ -3941,7 +3941,7 @@ gst_play_get_multiview_mode (GstPlay * self)
  * Since: 1.20
  */
 void
-gst_play_set_multiview_mode (GstPlay * self, GstVideoMultiviewFramePacking mode)
+gtk_gst_play_set_multiview_mode (GtkGstPlay * self, GstVideoMultiviewFramePacking mode)
 {
   g_return_if_fail (GST_IS_PLAY (self));
 
@@ -3949,8 +3949,8 @@ gst_play_set_multiview_mode (GstPlay * self, GstVideoMultiviewFramePacking mode)
 }
 
 /**
- * gst_play_get_multiview_flags:
- * @play: #GstPlay instance
+ * gtk_gst_play_get_multiview_flags:
+ * @play: #GtkGstPlay instance
  *
  * Retrieve the current value of the indicated @type.
  *
@@ -3959,7 +3959,7 @@ gst_play_set_multiview_mode (GstPlay * self, GstVideoMultiviewFramePacking mode)
  * Since: 1.20
  */
 GstVideoMultiviewFlags
-gst_play_get_multiview_flags (GstPlay * self)
+gtk_gst_play_get_multiview_flags (GtkGstPlay * self)
 {
   GstVideoMultiviewFlags val = GST_VIDEO_MULTIVIEW_FLAGS_NONE;
 
@@ -3971,8 +3971,8 @@ gst_play_get_multiview_flags (GstPlay * self)
 }
 
 /**
- * gst_play_set_multiview_flags:
- * @play: #GstPlay instance
+ * gtk_gst_play_set_multiview_flags:
+ * @play: #GtkGstPlay instance
  * @flags: The new value for the @type
  *
  * Sets the current value of the indicated mode @type to the passed
@@ -3981,7 +3981,7 @@ gst_play_get_multiview_flags (GstPlay * self)
  * Since: 1.20
  */
 void
-gst_play_set_multiview_flags (GstPlay * self, GstVideoMultiviewFlags flags)
+gtk_gst_play_set_multiview_flags (GtkGstPlay * self, GstVideoMultiviewFlags flags)
 {
   g_return_if_fail (GST_IS_PLAY (self));
 
@@ -3989,8 +3989,8 @@ gst_play_set_multiview_flags (GstPlay * self, GstVideoMultiviewFlags flags)
 }
 
 /**
- * gst_play_get_audio_video_offset:
- * @play: #GstPlay instance
+ * gtk_gst_play_get_audio_video_offset:
+ * @play: #GtkGstPlay instance
  *
  * Retrieve the current value of audio-video-offset property
  *
@@ -3999,7 +3999,7 @@ gst_play_set_multiview_flags (GstPlay * self, GstVideoMultiviewFlags flags)
  * Since: 1.20
  */
 gint64
-gst_play_get_audio_video_offset (GstPlay * self)
+gtk_gst_play_get_audio_video_offset (GtkGstPlay * self)
 {
   gint64 val = 0;
 
@@ -4011,8 +4011,8 @@ gst_play_get_audio_video_offset (GstPlay * self)
 }
 
 /**
- * gst_play_set_audio_video_offset:
- * @play: #GstPlay instance
+ * gtk_gst_play_set_audio_video_offset:
+ * @play: #GtkGstPlay instance
  * @offset: #gint64 in nanoseconds
  *
  * Sets audio-video-offset property by value of @offset
@@ -4020,7 +4020,7 @@ gst_play_get_audio_video_offset (GstPlay * self)
  * Since: 1.20
  */
 void
-gst_play_set_audio_video_offset (GstPlay * self, gint64 offset)
+gtk_gst_play_set_audio_video_offset (GtkGstPlay * self, gint64 offset)
 {
   g_return_if_fail (GST_IS_PLAY (self));
 
@@ -4028,8 +4028,8 @@ gst_play_set_audio_video_offset (GstPlay * self, gint64 offset)
 }
 
 /**
- * gst_play_get_subtitle_video_offset:
- * @play: #GstPlay instance
+ * gtk_gst_play_get_subtitle_video_offset:
+ * @play: #GtkGstPlay instance
  *
  * Retrieve the current value of subtitle-video-offset property
  *
@@ -4038,7 +4038,7 @@ gst_play_set_audio_video_offset (GstPlay * self, gint64 offset)
  * Since: 1.20
  */
 gint64
-gst_play_get_subtitle_video_offset (GstPlay * self)
+gtk_gst_play_get_subtitle_video_offset (GtkGstPlay * self)
 {
   gint64 val = 0;
 
@@ -4050,8 +4050,8 @@ gst_play_get_subtitle_video_offset (GstPlay * self)
 }
 
 /**
- * gst_play_set_subtitle_video_offset:
- * @play: #GstPlay instance
+ * gtk_gst_play_set_subtitle_video_offset:
+ * @play: #GtkGstPlay instance
  * @offset: #gint64 in nanoseconds
  *
  * Sets subtitle-video-offset property by value of @offset
@@ -4059,7 +4059,7 @@ gst_play_get_subtitle_video_offset (GstPlay * self)
  * Since: 1.20
  */
 void
-gst_play_set_subtitle_video_offset (GstPlay * self, gint64 offset)
+gtk_gst_play_set_subtitle_video_offset (GtkGstPlay * self, gint64 offset)
 {
   g_return_if_fail (GST_IS_PLAY (self));
 
@@ -4071,23 +4071,23 @@ gst_play_set_subtitle_video_offset (GstPlay * self, gint64 offset)
 #define C_FLAGS(v) ((guint) v)
 
 GType
-gst_play_color_balance_type_get_type (void)
+gtk_gst_play_color_balance_type_get_type (void)
 {
   static gsize id = 0;
   static const GEnumValue values[] = {
-    {C_ENUM (GST_PLAY_COLOR_BALANCE_HUE), "GST_PLAY_COLOR_BALANCE_HUE",
+    {C_ENUM (GTL_GST_PLAY_COLOR_BALANCE_HUE), "GTL_GST_PLAY_COLOR_BALANCE_HUE",
         "hue"},
-    {C_ENUM (GST_PLAY_COLOR_BALANCE_BRIGHTNESS),
-        "GST_PLAY_COLOR_BALANCE_BRIGHTNESS", "brightness"},
-    {C_ENUM (GST_PLAY_COLOR_BALANCE_SATURATION),
-        "GST_PLAY_COLOR_BALANCE_SATURATION", "saturation"},
-    {C_ENUM (GST_PLAY_COLOR_BALANCE_CONTRAST),
-        "GST_PLAY_COLOR_BALANCE_CONTRAST", "contrast"},
+    {C_ENUM (GTL_GST_PLAY_COLOR_BALANCE_BRIGHTNESS),
+        "GTL_GST_PLAY_COLOR_BALANCE_BRIGHTNESS", "brightness"},
+    {C_ENUM (GTL_GST_PLAY_COLOR_BALANCE_SATURATION),
+        "GTL_GST_PLAY_COLOR_BALANCE_SATURATION", "saturation"},
+    {C_ENUM (GTL_GST_PLAY_COLOR_BALANCE_CONTRAST),
+        "GTL_GST_PLAY_COLOR_BALANCE_CONTRAST", "contrast"},
     {0, NULL, NULL}
   };
 
   if (g_once_init_enter (&id)) {
-    GType tmp = g_enum_register_static ("GstPlayColorBalanceType", values);
+    GType tmp = g_enum_register_static ("GtkGstPlayColorBalanceType", values);
     g_once_init_leave (&id, tmp);
   }
 
@@ -4095,8 +4095,8 @@ gst_play_color_balance_type_get_type (void)
 }
 
 /**
- * gst_play_color_balance_type_get_name:
- * @type: a #GstPlayColorBalanceType
+ * gtk_gst_play_color_balance_type_get_name:
+ * @type: a #GtkGstPlayColorBalanceType
  *
  * Gets a string representing the given color balance type.
  *
@@ -4105,29 +4105,29 @@ gst_play_color_balance_type_get_type (void)
  * Since: 1.20
  */
 const gchar *
-gst_play_color_balance_type_get_name (GstPlayColorBalanceType type)
+gtk_gst_play_color_balance_type_get_name (GtkGstPlayColorBalanceType type)
 {
-  g_return_val_if_fail (type >= GST_PLAY_COLOR_BALANCE_BRIGHTNESS &&
-      type <= GST_PLAY_COLOR_BALANCE_HUE, NULL);
+  g_return_val_if_fail (type >= GTL_GST_PLAY_COLOR_BALANCE_BRIGHTNESS &&
+      type <= GTL_GST_PLAY_COLOR_BALANCE_HUE, NULL);
 
   return cb_channel_map[type].name;
 }
 
 GType
-gst_play_state_get_type (void)
+gtk_gst_play_state_get_type (void)
 {
   static gsize id = 0;
   static const GEnumValue values[] = {
-    {C_ENUM (GST_PLAY_STATE_STOPPED), "GST_PLAY_STATE_STOPPED", "stopped"},
-    {C_ENUM (GST_PLAY_STATE_BUFFERING), "GST_PLAY_STATE_BUFFERING",
+    {C_ENUM (GTL_GST_PLAY_STATE_STOPPED), "GTL_GST_PLAY_STATE_STOPPED", "stopped"},
+    {C_ENUM (GTL_GST_PLAY_STATE_BUFFERING), "GTL_GST_PLAY_STATE_BUFFERING",
         "buffering"},
-    {C_ENUM (GST_PLAY_STATE_PAUSED), "GST_PLAY_STATE_PAUSED", "paused"},
-    {C_ENUM (GST_PLAY_STATE_PLAYING), "GST_PLAY_STATE_PLAYING", "playing"},
+    {C_ENUM (GTL_GST_PLAY_STATE_PAUSED), "GTL_GST_PLAY_STATE_PAUSED", "paused"},
+    {C_ENUM (GTL_GST_PLAY_STATE_PLAYING), "GTL_GST_PLAY_STATE_PLAYING", "playing"},
     {0, NULL, NULL}
   };
 
   if (g_once_init_enter (&id)) {
-    GType tmp = g_enum_register_static ("GstPlayState", values);
+    GType tmp = g_enum_register_static ("GtkGstPlayState", values);
     g_once_init_leave (&id, tmp);
   }
 
@@ -4135,41 +4135,41 @@ gst_play_state_get_type (void)
 }
 
 GType
-gst_play_message_get_type (void)
+gtk_gst_play_message_get_type (void)
 {
   static gsize id = 0;
   static const GEnumValue values[] = {
-    {C_ENUM (GST_PLAY_MESSAGE_URI_LOADED), "GST_PLAY_MESSAGE_URI_LOADED",
+    {C_ENUM (GTL_GST_PLAY_MESSAGE_URI_LOADED), "GTL_GST_PLAY_MESSAGE_URI_LOADED",
         "uri-loaded"},
-    {C_ENUM (GST_PLAY_MESSAGE_POSITION_UPDATED),
-        "GST_PLAY_MESSAGE_POSITION_UPDATED", "position-updated"},
-    {C_ENUM (GST_PLAY_MESSAGE_DURATION_CHANGED),
-        "GST_PLAY_MESSAGE_DURATION_CHANGED", "duration-changed"},
-    {C_ENUM (GST_PLAY_MESSAGE_STATE_CHANGED),
-        "GST_PLAY_MESSAGE_STATE_CHANGED", "state-changed"},
-    {C_ENUM (GST_PLAY_MESSAGE_BUFFERING), "GST_PLAY_MESSAGE_BUFFERING",
+    {C_ENUM (GTL_GST_PLAY_MESSAGE_POSITION_UPDATED),
+        "GTL_GST_PLAY_MESSAGE_POSITION_UPDATED", "position-updated"},
+    {C_ENUM (GTL_GST_PLAY_MESSAGE_DURATION_CHANGED),
+        "GTL_GST_PLAY_MESSAGE_DURATION_CHANGED", "duration-changed"},
+    {C_ENUM (GTL_GST_PLAY_MESSAGE_STATE_CHANGED),
+        "GTL_GST_PLAY_MESSAGE_STATE_CHANGED", "state-changed"},
+    {C_ENUM (GTL_GST_PLAY_MESSAGE_BUFFERING), "GTL_GST_PLAY_MESSAGE_BUFFERING",
         "buffering"},
-    {C_ENUM (GST_PLAY_MESSAGE_END_OF_STREAM),
-        "GST_PLAY_MESSAGE_END_OF_STREAM", "end-of-stream"},
-    {C_ENUM (GST_PLAY_MESSAGE_ERROR), "GST_PLAY_MESSAGE_ERROR", "error"},
-    {C_ENUM (GST_PLAY_MESSAGE_WARNING), "GST_PLAY_MESSAGE_WARNING",
+    {C_ENUM (GTL_GST_PLAY_MESSAGE_END_OF_STREAM),
+        "GTL_GST_PLAY_MESSAGE_END_OF_STREAM", "end-of-stream"},
+    {C_ENUM (GTL_GST_PLAY_MESSAGE_ERROR), "GTL_GST_PLAY_MESSAGE_ERROR", "error"},
+    {C_ENUM (GTL_GST_PLAY_MESSAGE_WARNING), "GTL_GST_PLAY_MESSAGE_WARNING",
         "warning"},
-    {C_ENUM (GST_PLAY_MESSAGE_VIDEO_DIMENSIONS_CHANGED),
-          "GST_PLAY_MESSAGE_VIDEO_DIMENSIONS_CHANGED",
+    {C_ENUM (GTL_GST_PLAY_MESSAGE_VIDEO_DIMENSIONS_CHANGED),
+          "GTL_GST_PLAY_MESSAGE_VIDEO_DIMENSIONS_CHANGED",
         "video-dimensions-changed"},
-    {C_ENUM (GST_PLAY_MESSAGE_MEDIA_INFO_UPDATED),
-        "GST_PLAY_MESSAGE_MEDIA_INFO_UPDATED", "media-info-updated"},
-    {C_ENUM (GST_PLAY_MESSAGE_VOLUME_CHANGED),
-        "GST_PLAY_MESSAGE_VOLUME_CHANGED", "volume-changed"},
-    {C_ENUM (GST_PLAY_MESSAGE_MUTE_CHANGED),
-        "GST_PLAY_MESSAGE_MUTE_CHANGED", "mute-changed"},
-    {C_ENUM (GST_PLAY_MESSAGE_SEEK_DONE), "GST_PLAY_MESSAGE_SEEK_DONE",
+    {C_ENUM (GTL_GST_PLAY_MESSAGE_MEDIA_INFO_UPDATED),
+        "GTL_GST_PLAY_MESSAGE_MEDIA_INFO_UPDATED", "media-info-updated"},
+    {C_ENUM (GTL_GST_PLAY_MESSAGE_VOLUME_CHANGED),
+        "GTL_GST_PLAY_MESSAGE_VOLUME_CHANGED", "volume-changed"},
+    {C_ENUM (GTL_GST_PLAY_MESSAGE_MUTE_CHANGED),
+        "GTL_GST_PLAY_MESSAGE_MUTE_CHANGED", "mute-changed"},
+    {C_ENUM (GTL_GST_PLAY_MESSAGE_SEEK_DONE), "GTL_GST_PLAY_MESSAGE_SEEK_DONE",
         "seek-done"},
     {0, NULL, NULL}
   };
 
   if (g_once_init_enter (&id)) {
-    GType tmp = g_enum_register_static ("GstPlayMessage", values);
+    GType tmp = g_enum_register_static ("GtkGstPlayMessage", values);
     g_once_init_leave (&id, tmp);
   }
 
@@ -4177,8 +4177,8 @@ gst_play_message_get_type (void)
 }
 
 /**
- * gst_play_state_get_name:
- * @state: a #GstPlayState
+ * gtk_gst_play_state_get_name:
+ * @state: a #GtkGstPlayState
  *
  * Gets a string representing the given state.
  *
@@ -4186,16 +4186,16 @@ gst_play_message_get_type (void)
  * Since: 1.20
  */
 const gchar *
-gst_play_state_get_name (GstPlayState state)
+gtk_gst_play_state_get_name (GtkGstPlayState state)
 {
   switch (state) {
-    case GST_PLAY_STATE_STOPPED:
+    case GTL_GST_PLAY_STATE_STOPPED:
       return "stopped";
-    case GST_PLAY_STATE_BUFFERING:
+    case GTL_GST_PLAY_STATE_BUFFERING:
       return "buffering";
-    case GST_PLAY_STATE_PAUSED:
+    case GTL_GST_PLAY_STATE_PAUSED:
       return "paused";
-    case GST_PLAY_STATE_PLAYING:
+    case GTL_GST_PLAY_STATE_PLAYING:
       return "playing";
   }
 
@@ -4204,14 +4204,14 @@ gst_play_state_get_name (GstPlayState state)
 }
 
 /**
- * gst_play_message_get_name:
- * @message_type: a #GstPlayMessage
+ * gtk_gst_play_message_get_name:
+ * @message_type: a #GtkGstPlayMessage
  *
  * Returns: (transfer none): a string with the name of the message.
  * Since: 1.20
  */
 const gchar *
-gst_play_message_get_name (GstPlayMessage message_type)
+gtk_gst_play_message_get_name (GtkGstPlayMessage message_type)
 {
   GEnumClass *enum_class;
   GEnumValue *enum_value;
@@ -4223,16 +4223,16 @@ gst_play_message_get_name (GstPlayMessage message_type)
 }
 
 GType
-gst_play_error_get_type (void)
+gtk_gst_play_error_get_type (void)
 {
   static gsize id = 0;
   static const GEnumValue values[] = {
-    {C_ENUM (GST_PLAY_ERROR_FAILED), "GST_PLAY_ERROR_FAILED", "failed"},
+    {C_ENUM (GTL_GST_PLAY_ERROR_FAILED), "GTL_GST_PLAY_ERROR_FAILED", "failed"},
     {0, NULL, NULL}
   };
 
   if (g_once_init_enter (&id)) {
-    GType tmp = g_enum_register_static ("GstPlayError", values);
+    GType tmp = g_enum_register_static ("GtkGstPlayError", values);
     g_once_init_leave (&id, tmp);
   }
 
@@ -4240,8 +4240,8 @@ gst_play_error_get_type (void)
 }
 
 /**
- * gst_play_error_get_name:
- * @error: a #GstPlayError
+ * gtk_gst_play_error_get_name:
+ * @error: a #GtkGstPlayError
  *
  * Gets a string representing the given error.
  *
@@ -4249,10 +4249,10 @@ gst_play_error_get_type (void)
  * Since: 1.20
  */
 const gchar *
-gst_play_error_get_name (GstPlayError error)
+gtk_gst_play_error_get_name (GtkGstPlayError error)
 {
   switch (error) {
-    case GST_PLAY_ERROR_FAILED:
+    case GTL_GST_PLAY_ERROR_FAILED:
       return "failed";
   }
 
@@ -4261,13 +4261,13 @@ gst_play_error_get_name (GstPlayError error)
 }
 
 /**
- * gst_play_set_config:
- * @play: #GstPlay instance
+ * gtk_gst_play_set_config:
+ * @play: #GtkGstPlay instance
  * @config: (transfer full): a #GstStructure
  *
  * Set the configuration of the play. If the play is already configured, and
  * the configuration haven't change, this function will return %TRUE. If the
- * play is not in the GST_PLAY_STATE_STOPPED, this method will return %FALSE
+ * play is not in the GTL_GST_PLAY_STATE_STOPPED, this method will return %FALSE
  * and active configuration will remain.
  *
  * @config is a #GstStructure that contains the configuration parameters for
@@ -4279,16 +4279,16 @@ gst_play_error_get_name (GstPlayError error)
  * Since: 1.20
  */
 gboolean
-gst_play_set_config (GstPlay * self, GstStructure * config)
+gtk_gst_play_set_config (GtkGstPlay * self, GstStructure * config)
 {
   g_return_val_if_fail (GST_IS_PLAY (self), FALSE);
   g_return_val_if_fail (config != NULL, FALSE);
 
   g_mutex_lock (&self->lock);
 
-  if (self->app_state != GST_PLAY_STATE_STOPPED) {
+  if (self->app_state != GTL_GST_PLAY_STATE_STOPPED) {
     GST_INFO_OBJECT (self, "can't change config while play is %s",
-        gst_play_state_get_name (self->app_state));
+        gtk_gst_play_state_get_name (self->app_state));
     g_mutex_unlock (&self->lock);
     return FALSE;
   }
@@ -4302,20 +4302,20 @@ gst_play_set_config (GstPlay * self, GstStructure * config)
 }
 
 /**
- * gst_play_get_config:
- * @play: #GstPlay instance
+ * gtk_gst_play_get_config:
+ * @play: #GtkGstPlay instance
  *
  * Get a copy of the current configuration of the play. This configuration
- * can either be modified and used for the gst_play_set_config() call
+ * can either be modified and used for the gtk_gst_play_set_config() call
  * or it must be freed after usage.
  *
  * Returns: (transfer full): a copy of the current configuration of @play. Use
- * gst_structure_free() after usage or gst_play_set_config().
+ * gst_structure_free() after usage or gtk_gst_play_set_config().
  *
  * Since: 1.20
  */
 GstStructure *
-gst_play_get_config (GstPlay * self)
+gtk_gst_play_get_config (GtkGstPlay * self)
 {
   GstStructure *ret;
 
@@ -4329,8 +4329,8 @@ gst_play_get_config (GstPlay * self)
 }
 
 /**
- * gst_play_config_set_user_agent:
- * @config: a #GstPlay configuration
+ * gtk_gst_play_config_set_user_agent:
+ * @config: a #GtkGstPlay configuration
  * @agent: (nullable): the string to use as user agent
  *
  * Set the user agent to pass to the server if @play needs to connect
@@ -4340,7 +4340,7 @@ gst_play_get_config (GstPlay * self)
  * Since: 1.20
  */
 void
-gst_play_config_set_user_agent (GstStructure * config, const gchar * agent)
+gtk_gst_play_config_set_user_agent (GstStructure * config, const gchar * agent)
 {
   g_return_if_fail (config != NULL);
   g_return_if_fail (agent != NULL);
@@ -4350,17 +4350,17 @@ gst_play_config_set_user_agent (GstStructure * config, const gchar * agent)
 }
 
 /**
- * gst_play_config_get_user_agent:
- * @config: a #GstPlay configuration
+ * gtk_gst_play_config_get_user_agent:
+ * @config: a #GtkGstPlay configuration
  *
  * Return the user agent which has been configured using
- * gst_play_config_set_user_agent() if any.
+ * gtk_gst_play_config_set_user_agent() if any.
  *
  * Returns: (transfer full) (nullable): the configured agent, or %NULL
  * Since: 1.20
  */
 gchar *
-gst_play_config_get_user_agent (const GstStructure * config)
+gtk_gst_play_config_get_user_agent (const GstStructure * config)
 {
   gchar *agent = NULL;
 
@@ -4373,8 +4373,8 @@ gst_play_config_get_user_agent (const GstStructure * config)
 }
 
 /**
- * gst_play_config_set_position_update_interval:
- * @config: a #GstPlay configuration
+ * gtk_gst_play_config_set_position_update_interval:
+ * @config: a #GtkGstPlay configuration
  * @interval: interval in ms
  *
  * set desired interval in milliseconds between two position-updated messages.
@@ -4382,7 +4382,7 @@ gst_play_config_get_user_agent (const GstStructure * config)
  * Since: 1.20
  */
 void
-gst_play_config_set_position_update_interval (GstStructure * config,
+gtk_gst_play_config_set_position_update_interval (GstStructure * config,
     guint interval)
 {
   g_return_if_fail (config != NULL);
@@ -4393,15 +4393,15 @@ gst_play_config_set_position_update_interval (GstStructure * config,
 }
 
 /**
- * gst_play_config_get_position_update_interval:
- * @config: a #GstPlay configuration
+ * gtk_gst_play_config_get_position_update_interval:
+ * @config: a #GtkGstPlay configuration
  *
  * Returns: current position update interval in milliseconds
  *
  * Since: 1.20
  */
 guint
-gst_play_config_get_position_update_interval (const GstStructure * config)
+gtk_gst_play_config_get_position_update_interval (const GstStructure * config)
 {
   guint interval = DEFAULT_POSITION_UPDATE_INTERVAL_MS;
 
@@ -4414,8 +4414,8 @@ gst_play_config_get_position_update_interval (const GstStructure * config)
 }
 
 /**
- * gst_play_config_set_seek_accurate:
- * @config: a #GstPlay configuration
+ * gtk_gst_play_config_set_seek_accurate:
+ * @config: a #GtkGstPlay configuration
  * @accurate: accurate seek or not
  *
  * Enable or disable accurate seeking. When enabled, elements will try harder
@@ -4431,7 +4431,7 @@ gst_play_config_get_position_update_interval (const GstStructure * config)
  * Since: 1.20
  */
 void
-gst_play_config_set_seek_accurate (GstStructure * config, gboolean accurate)
+gtk_gst_play_config_set_seek_accurate (GstStructure * config, gboolean accurate)
 {
   g_return_if_fail (config != NULL);
 
@@ -4440,15 +4440,15 @@ gst_play_config_set_seek_accurate (GstStructure * config, gboolean accurate)
 }
 
 /**
- * gst_play_config_get_seek_accurate:
- * @config: a #GstPlay configuration
+ * gtk_gst_play_config_get_seek_accurate:
+ * @config: a #GtkGstPlay configuration
  *
  * Returns: %TRUE if accurate seeking is enabled
  *
  * Since: 1.20
  */
 gboolean
-gst_play_config_get_seek_accurate (const GstStructure * config)
+gtk_gst_play_config_get_seek_accurate (const GstStructure * config)
 {
   gboolean accurate = FALSE;
 
@@ -4461,8 +4461,8 @@ gst_play_config_get_seek_accurate (const GstStructure * config)
 }
 
 /**
- * gst_play_get_video_snapshot:
- * @play: #GstPlay instance
+ * gtk_gst_play_get_video_snapshot:
+ * @play: #GtkGstPlay instance
  * @format: output format of the video snapshot
  * @config: (allow-none): Additional configuration
  *
@@ -4471,15 +4471,15 @@ gst_play_config_get_seek_accurate (const GstStructure * config)
  * Currently supported settings are:
  * - width, height of type G_TYPE_INT
  * - pixel-aspect-ratio of type GST_TYPE_FRACTION
- *  Except for GST_PLAY_THUMBNAIL_RAW_NATIVE format, if no config is set, pixel-aspect-ratio would be 1/1
+ *  Except for GTL_GST_PLAY_THUMBNAIL_RAW_NATIVE format, if no config is set, pixel-aspect-ratio would be 1/1
  *
  * Returns: (transfer full) (nullable):  Current video snapshot sample or %NULL on failure
  *
  * Since: 1.20
  */
 GstSample *
-gst_play_get_video_snapshot (GstPlay * self,
-    GstPlaySnapshotFormat format, const GstStructure * config)
+gtk_gst_play_get_video_snapshot (GtkGstPlay * self,
+    GtkGstPlaySnapshotFormat format, const GstStructure * config)
 {
   gint video_tracks = 0;
   GstSample *sample = NULL;
@@ -4497,21 +4497,21 @@ gst_play_get_video_snapshot (GstPlay * self,
   }
 
   switch (format) {
-    case GST_PLAY_THUMBNAIL_RAW_xRGB:
+    case GTL_GST_PLAY_THUMBNAIL_RAW_xRGB:
       caps = gst_caps_new_simple ("video/x-raw",
           "format", G_TYPE_STRING, "xRGB", NULL);
       break;
-    case GST_PLAY_THUMBNAIL_RAW_BGRx:
+    case GTL_GST_PLAY_THUMBNAIL_RAW_BGRx:
       caps = gst_caps_new_simple ("video/x-raw",
           "format", G_TYPE_STRING, "BGRx", NULL);
       break;
-    case GST_PLAY_THUMBNAIL_JPG:
+    case GTL_GST_PLAY_THUMBNAIL_JPG:
       caps = gst_caps_new_empty_simple ("image/jpeg");
       break;
-    case GST_PLAY_THUMBNAIL_PNG:
+    case GTL_GST_PLAY_THUMBNAIL_PNG:
       caps = gst_caps_new_empty_simple ("image/png");
       break;
-    case GST_PLAY_THUMBNAIL_RAW_NATIVE:
+    case GTL_GST_PLAY_THUMBNAIL_RAW_NATIVE:
     default:
       caps = gst_caps_new_empty_simple ("video/x-raw");
       break;
@@ -4524,7 +4524,7 @@ gst_play_get_video_snapshot (GstPlay * self,
       height = -1;
     if (!gst_structure_get_fraction (config, "pixel-aspect-ratio", &par_n,
             &par_d)) {
-      if (format != GST_PLAY_THUMBNAIL_RAW_NATIVE) {
+      if (format != GTL_GST_PLAY_THUMBNAIL_RAW_NATIVE) {
         par_n = 1;
         par_d = 1;
       } else {
@@ -4539,7 +4539,7 @@ gst_play_get_video_snapshot (GstPlay * self,
         "height", G_TYPE_INT, height, NULL);
   }
 
-  if (format != GST_PLAY_THUMBNAIL_RAW_NATIVE) {
+  if (format != GTL_GST_PLAY_THUMBNAIL_RAW_NATIVE) {
     gst_caps_set_simple (caps, "pixel-aspect-ratio", GST_TYPE_FRACTION,
         par_n, par_d, NULL);
   } else if (NULL != config && par_n != 0 && par_d != 0) {
@@ -4558,15 +4558,15 @@ gst_play_get_video_snapshot (GstPlay * self,
 }
 
 /**
- * gst_play_is_play_message:
+ * gtk_gst_play_is_play_message:
  * @msg: A #GstMessage
  *
- * Returns: A #gboolean indicating wheter the passes message represents a #GstPlay message or not.
+ * Returns: A #gboolean indicating wheter the passes message represents a #GtkGstPlay message or not.
  *
  * Since: 1.20
  */
 gboolean
-gst_play_is_play_message (GstMessage * msg)
+gtk_gst_play_is_play_message (GstMessage * msg)
 {
   const GstStructure *data = NULL;
   g_return_val_if_fail (GST_IS_MESSAGE (msg), FALSE);
@@ -4574,34 +4574,34 @@ gst_play_is_play_message (GstMessage * msg)
   data = gst_message_get_structure (msg);
   g_return_val_if_fail (data, FALSE);
 
-  return g_str_equal (gst_structure_get_name (data), GST_PLAY_MESSAGE_DATA);
+  return g_str_equal (gst_structure_get_name (data), GTL_GST_PLAY_MESSAGE_DATA);
 }
 
 #define PARSE_MESSAGE_FIELD(msg, field, value_type, value) G_STMT_START { \
     const GstStructure *data = NULL;                                      \
-    g_return_if_fail (gst_play_is_play_message (msg));                    \
+    g_return_if_fail (gtk_gst_play_is_play_message (msg));                    \
     data = gst_message_get_structure (msg);                               \
     gst_structure_get (data, field, value_type, value, NULL);             \
 } G_STMT_END
 
 /**
- * gst_play_message_parse_type:
+ * gtk_gst_play_message_parse_type:
  * @msg: A #GstMessage
  * @type: (out) (optional): the resulting message type
  *
- * Parse the given @msg and extract its #GstPlayMessage type.
+ * Parse the given @msg and extract its #GtkGstPlayMessage type.
  *
  * Since: 1.20
  */
 void
-gst_play_message_parse_type (GstMessage * msg, GstPlayMessage * type)
+gtk_gst_play_message_parse_type (GstMessage * msg, GtkGstPlayMessage * type)
 {
-  PARSE_MESSAGE_FIELD (msg, GST_PLAY_MESSAGE_DATA_TYPE,
+  PARSE_MESSAGE_FIELD (msg, GTL_GST_PLAY_MESSAGE_DATA_TYPE,
       GST_TYPE_PLAY_MESSAGE, type);
 }
 
 /**
- * gst_play_message_parse_duration_updated:
+ * gtk_gst_play_message_parse_duration_updated:
  * @msg: A #GstMessage
  * @duration: (out) (optional): the resulting duration
  *
@@ -4610,15 +4610,15 @@ gst_play_message_parse_type (GstMessage * msg, GstPlayMessage * type)
  * Since: 1.20
  */
 void
-gst_play_message_parse_duration_updated (GstMessage * msg,
+gtk_gst_play_message_parse_duration_updated (GstMessage * msg,
     GstClockTime * duration)
 {
-  PARSE_MESSAGE_FIELD (msg, GST_PLAY_MESSAGE_DATA_DURATION,
+  PARSE_MESSAGE_FIELD (msg, GTL_GST_PLAY_MESSAGE_DATA_DURATION,
       GST_TYPE_CLOCK_TIME, duration);
 }
 
 /**
- * gst_play_message_parse_position_updated:
+ * gtk_gst_play_message_parse_position_updated:
  * @msg: A #GstMessage
  * @position: (out) (optional): the resulting position
  *
@@ -4627,31 +4627,31 @@ gst_play_message_parse_duration_updated (GstMessage * msg,
  * Since: 1.20
  */
 void
-gst_play_message_parse_position_updated (GstMessage * msg,
+gtk_gst_play_message_parse_position_updated (GstMessage * msg,
     GstClockTime * position)
 {
-  PARSE_MESSAGE_FIELD (msg, GST_PLAY_MESSAGE_DATA_POSITION,
+  PARSE_MESSAGE_FIELD (msg, GTL_GST_PLAY_MESSAGE_DATA_POSITION,
       GST_TYPE_CLOCK_TIME, position);
 }
 
 /**
- * gst_play_message_parse_state_changed:
+ * gtk_gst_play_message_parse_state_changed:
  * @msg: A #GstMessage
  * @state: (out) (optional): the resulting play state
  *
- * Parse the given state @msg and extract the corresponding #GstPlayState
+ * Parse the given state @msg and extract the corresponding #GtkGstPlayState
  *
  * Since: 1.20
  */
 void
-gst_play_message_parse_state_changed (GstMessage * msg, GstPlayState * state)
+gtk_gst_play_message_parse_state_changed (GstMessage * msg, GtkGstPlayState * state)
 {
-  PARSE_MESSAGE_FIELD (msg, GST_PLAY_MESSAGE_DATA_PLAY_STATE,
+  PARSE_MESSAGE_FIELD (msg, GTL_GST_PLAY_MESSAGE_DATA_PLAY_STATE,
       GST_TYPE_PLAY_STATE, state);
 }
 
 /**
- * gst_play_message_parse_buffering_percent:
+ * gtk_gst_play_message_parse_buffering_percent:
  * @msg: A #GstMessage
  * @percent: (out) (optional): the resulting buffering percent
  *
@@ -4660,14 +4660,14 @@ gst_play_message_parse_state_changed (GstMessage * msg, GstPlayState * state)
  * Since: 1.20
  */
 void
-gst_play_message_parse_buffering_percent (GstMessage * msg, guint * percent)
+gtk_gst_play_message_parse_buffering_percent (GstMessage * msg, guint * percent)
 {
-  PARSE_MESSAGE_FIELD (msg, GST_PLAY_MESSAGE_DATA_BUFFERING_PERCENT,
+  PARSE_MESSAGE_FIELD (msg, GTL_GST_PLAY_MESSAGE_DATA_BUFFERING_PERCENT,
       G_TYPE_UINT, percent);
 }
 
 /**
- * gst_play_message_parse_error:
+ * gtk_gst_play_message_parse_error:
  * @msg: A #GstMessage
  * @error: (out) (optional) (transfer full): the resulting error
  * @details: (out) (optional) (nullable) (transfer full): A #GstStructure containing additional details about the error
@@ -4677,16 +4677,16 @@ gst_play_message_parse_buffering_percent (GstMessage * msg, guint * percent)
  * Since: 1.20
  */
 void
-gst_play_message_parse_error (GstMessage * msg, GError ** error,
+gtk_gst_play_message_parse_error (GstMessage * msg, GError ** error,
     GstStructure ** details)
 {
-  PARSE_MESSAGE_FIELD (msg, GST_PLAY_MESSAGE_DATA_ERROR, G_TYPE_ERROR, error);
-  PARSE_MESSAGE_FIELD (msg, GST_PLAY_MESSAGE_DATA_ERROR, GST_TYPE_STRUCTURE,
+  PARSE_MESSAGE_FIELD (msg, GTL_GST_PLAY_MESSAGE_DATA_ERROR, G_TYPE_ERROR, error);
+  PARSE_MESSAGE_FIELD (msg, GTL_GST_PLAY_MESSAGE_DATA_ERROR, GST_TYPE_STRUCTURE,
       details);
 }
 
 /**
- * gst_play_message_parse_warning:
+ * gtk_gst_play_message_parse_warning:
  * @msg: A #GstMessage
  * @error: (out) (optional) (transfer full): the resulting warning
  * @details: (out) (optional) (nullable) (transfer full): A #GstStructure containing additional details about the warning
@@ -4696,16 +4696,16 @@ gst_play_message_parse_error (GstMessage * msg, GError ** error,
  * Since: 1.20
  */
 void
-gst_play_message_parse_warning (GstMessage * msg, GError ** error,
+gtk_gst_play_message_parse_warning (GstMessage * msg, GError ** error,
     GstStructure ** details)
 {
-  PARSE_MESSAGE_FIELD (msg, GST_PLAY_MESSAGE_DATA_WARNING, G_TYPE_ERROR, error);
-  PARSE_MESSAGE_FIELD (msg, GST_PLAY_MESSAGE_DATA_WARNING, GST_TYPE_STRUCTURE,
+  PARSE_MESSAGE_FIELD (msg, GTL_GST_PLAY_MESSAGE_DATA_WARNING, G_TYPE_ERROR, error);
+  PARSE_MESSAGE_FIELD (msg, GTL_GST_PLAY_MESSAGE_DATA_WARNING, GST_TYPE_STRUCTURE,
       details);
 }
 
 /**
- * gst_play_message_parse_video_dimensions_changed:
+ * gtk_gst_play_message_parse_video_dimensions_changed:
  * @msg: A #GstMessage
  * @width: (out) (optional): the resulting video width
  * @height: (out) (optional): the resulting video height
@@ -4715,17 +4715,17 @@ gst_play_message_parse_warning (GstMessage * msg, GError ** error,
  * Since: 1.20
  */
 void
-gst_play_message_parse_video_dimensions_changed (GstMessage * msg,
+gtk_gst_play_message_parse_video_dimensions_changed (GstMessage * msg,
     guint * width, guint * height)
 {
-  PARSE_MESSAGE_FIELD (msg, GST_PLAY_MESSAGE_DATA_VIDEO_WIDTH,
+  PARSE_MESSAGE_FIELD (msg, GTL_GST_PLAY_MESSAGE_DATA_VIDEO_WIDTH,
       G_TYPE_UINT, width);
-  PARSE_MESSAGE_FIELD (msg, GST_PLAY_MESSAGE_DATA_VIDEO_HEIGHT,
+  PARSE_MESSAGE_FIELD (msg, GTL_GST_PLAY_MESSAGE_DATA_VIDEO_HEIGHT,
       G_TYPE_UINT, height);
 }
 
 /**
- * gst_play_message_parse_media_info_updated:
+ * gtk_gst_play_message_parse_media_info_updated:
  * @msg: A #GstMessage
  * @info: (out) (optional) (transfer full): the resulting media info
  *
@@ -4734,15 +4734,15 @@ gst_play_message_parse_video_dimensions_changed (GstMessage * msg,
  * Since: 1.20
  */
 void
-gst_play_message_parse_media_info_updated (GstMessage * msg,
-    GstPlayMediaInfo ** info)
+gtk_gst_play_message_parse_media_info_updated (GstMessage * msg,
+    GtkGstPlayMediaInfo ** info)
 {
-  PARSE_MESSAGE_FIELD (msg, GST_PLAY_MESSAGE_DATA_MEDIA_INFO,
+  PARSE_MESSAGE_FIELD (msg, GTL_GST_PLAY_MESSAGE_DATA_MEDIA_INFO,
       GST_TYPE_PLAY_MEDIA_INFO, info);
 }
 
 /**
- * gst_play_message_parse_volume_changed:
+ * gtk_gst_play_message_parse_volume_changed:
  * @msg: A #GstMessage
  * @volume: (out) (optional): the resulting audio volume
  *
@@ -4751,14 +4751,14 @@ gst_play_message_parse_media_info_updated (GstMessage * msg,
  * Since: 1.20
  */
 void
-gst_play_message_parse_volume_changed (GstMessage * msg, gdouble * volume)
+gtk_gst_play_message_parse_volume_changed (GstMessage * msg, gdouble * volume)
 {
-  PARSE_MESSAGE_FIELD (msg, GST_PLAY_MESSAGE_DATA_VOLUME, G_TYPE_DOUBLE,
+  PARSE_MESSAGE_FIELD (msg, GTL_GST_PLAY_MESSAGE_DATA_VOLUME, G_TYPE_DOUBLE,
       volume);
 }
 
 /**
- * gst_play_message_parse_muted_changed:
+ * gtk_gst_play_message_parse_muted_changed:
  * @msg: A #GstMessage
  * @muted: (out) (optional): the resulting audio muted state
  *
@@ -4767,8 +4767,8 @@ gst_play_message_parse_volume_changed (GstMessage * msg, gdouble * volume)
  * Since: 1.20
  */
 void
-gst_play_message_parse_muted_changed (GstMessage * msg, gboolean * muted)
+gtk_gst_play_message_parse_muted_changed (GstMessage * msg, gboolean * muted)
 {
-  PARSE_MESSAGE_FIELD (msg, GST_PLAY_MESSAGE_DATA_IS_MUTED, G_TYPE_BOOLEAN,
+  PARSE_MESSAGE_FIELD (msg, GTL_GST_PLAY_MESSAGE_DATA_IS_MUTED, G_TYPE_BOOLEAN,
       muted);
 }
diff --git a/subprojects/gstreamer-player-1.0/gst/play/gstplay.h b/subprojects/gstreamer-player-1.0/gst/play/gstplay.h
index 9ffc1e1..5bdeef7 100644
--- a/subprojects/gstreamer-player-1.0/gst/play/gstplay.h
+++ b/subprojects/gstreamer-player-1.0/gst/play/gstplay.h
@@ -20,8 +20,8 @@
  * Boston, MA 02110-1301, USA.
  */
 
-#ifndef __GST_PLAY_H__
-#define __GST_PLAY_H__
+#ifndef __GTL_GST_PLAY_H__
+#define __GTL_GST_PLAY_H__
 
 #include <gst/gst.h>
 #include <gst/video/video.h>
@@ -32,411 +32,411 @@
 
 G_BEGIN_DECLS
 
-GST_PLAY_API
-GType        gst_play_state_get_type                (void);
+GTL_GST_PLAY_API
+GType        gtk_gst_play_state_get_type                (void);
 
 /**
  * GST_TYPE_PLAY_STATE:
  * Since: 1.20
  */
-#define      GST_TYPE_PLAY_STATE                    (gst_play_state_get_type ())
+#define      GST_TYPE_PLAY_STATE                    (gtk_gst_play_state_get_type ())
 
-GST_PLAY_API
-GType        gst_play_message_get_type              (void);
+GTL_GST_PLAY_API
+GType        gtk_gst_play_message_get_type              (void);
 
 /**
  * GST_TYPE_PLAY_MESSAGE:
  * Since: 1.20
  */
-#define      GST_TYPE_PLAY_MESSAGE                  (gst_play_message_get_type ())
+#define      GST_TYPE_PLAY_MESSAGE                  (gtk_gst_play_message_get_type ())
 
 /**
- * GstPlayState:
- * @GST_PLAY_STATE_STOPPED: the play is stopped.
- * @GST_PLAY_STATE_BUFFERING: the play is buffering.
- * @GST_PLAY_STATE_PAUSED: the play is paused.
- * @GST_PLAY_STATE_PLAYING: the play is currently playing a
+ * GtkGstPlayState:
+ * @GTL_GST_PLAY_STATE_STOPPED: the play is stopped.
+ * @GTL_GST_PLAY_STATE_BUFFERING: the play is buffering.
+ * @GTL_GST_PLAY_STATE_PAUSED: the play is paused.
+ * @GTL_GST_PLAY_STATE_PLAYING: the play is currently playing a
  * stream.
  *
  * Since: 1.20
  */
 typedef enum
 {
-  GST_PLAY_STATE_STOPPED,
-  GST_PLAY_STATE_BUFFERING,
-  GST_PLAY_STATE_PAUSED,
-  GST_PLAY_STATE_PLAYING
-} GstPlayState;
+  GTL_GST_PLAY_STATE_STOPPED,
+  GTL_GST_PLAY_STATE_BUFFERING,
+  GTL_GST_PLAY_STATE_PAUSED,
+  GTL_GST_PLAY_STATE_PLAYING
+} GtkGstPlayState;
 
 /**
- * GstPlayMessage:
- * @GST_PLAY_MESSAGE_URI_LOADED: Source element was initalized for set URI
- * @GST_PLAY_MESSAGE_POSITION_UPDATED: Sink position changed
- * @GST_PLAY_MESSAGE_DURATION_CHANGED: Duration of stream changed
- * @GST_PLAY_MESSAGE_STATE_CHANGED: State changed, see #GstPlayState
- * @GST_PLAY_MESSAGE_BUFFERING: Pipeline is in buffering state, message contains the percentage value of the decoding buffer
- * @GST_PLAY_MESSAGE_END_OF_STREAM: Sink has received EOS
- * @GST_PLAY_MESSAGE_ERROR: Message contains an error
- * @GST_PLAY_MESSAGE_WARNING: Message contains an error
- * @GST_PLAY_MESSAGE_VIDEO_DIMENSIONS_CHANGED: Video sink received format in different dimensions than before
- * @GST_PLAY_MESSAGE_MEDIA_INFO_UPDATED: A media-info property has changed, message contains current #GstPlayMediaInfo
- * @GST_PLAY_MESSAGE_VOLUME_CHANGED: The volume of the audio ouput has changed
- * @GST_PLAY_MESSAGE_MUTE_CHANGED: Audio muting flag has been toggled
- * @GST_PLAY_MESSAGE_SEEK_DONE: Any pending seeking operation has been completed
+ * GtkGstPlayMessage:
+ * @GTL_GST_PLAY_MESSAGE_URI_LOADED: Source element was initalized for set URI
+ * @GTL_GST_PLAY_MESSAGE_POSITION_UPDATED: Sink position changed
+ * @GTL_GST_PLAY_MESSAGE_DURATION_CHANGED: Duration of stream changed
+ * @GTL_GST_PLAY_MESSAGE_STATE_CHANGED: State changed, see #GtkGstPlayState
+ * @GTL_GST_PLAY_MESSAGE_BUFFERING: Pipeline is in buffering state, message contains the percentage value of the decoding buffer
+ * @GTL_GST_PLAY_MESSAGE_END_OF_STREAM: Sink has received EOS
+ * @GTL_GST_PLAY_MESSAGE_ERROR: Message contains an error
+ * @GTL_GST_PLAY_MESSAGE_WARNING: Message contains an error
+ * @GTL_GST_PLAY_MESSAGE_VIDEO_DIMENSIONS_CHANGED: Video sink received format in different dimensions than before
+ * @GTL_GST_PLAY_MESSAGE_MEDIA_INFO_UPDATED: A media-info property has changed, message contains current #GtkGstPlayMediaInfo
+ * @GTL_GST_PLAY_MESSAGE_VOLUME_CHANGED: The volume of the audio ouput has changed
+ * @GTL_GST_PLAY_MESSAGE_MUTE_CHANGED: Audio muting flag has been toggled
+ * @GTL_GST_PLAY_MESSAGE_SEEK_DONE: Any pending seeking operation has been completed
  *
  * Since: 1.20
  *
  * Types of messages that will be posted on the play API bus.
  *
- * See also #gst_play_get_message_bus()
+ * See also #gtk_gst_play_get_message_bus()
  *
  */
 typedef enum
 {
-  GST_PLAY_MESSAGE_URI_LOADED,
-  GST_PLAY_MESSAGE_POSITION_UPDATED,
-  GST_PLAY_MESSAGE_DURATION_CHANGED,
-  GST_PLAY_MESSAGE_STATE_CHANGED,
-  GST_PLAY_MESSAGE_BUFFERING,
-  GST_PLAY_MESSAGE_END_OF_STREAM,
-  GST_PLAY_MESSAGE_ERROR,
-  GST_PLAY_MESSAGE_WARNING,
-  GST_PLAY_MESSAGE_VIDEO_DIMENSIONS_CHANGED,
-  GST_PLAY_MESSAGE_MEDIA_INFO_UPDATED,
-  GST_PLAY_MESSAGE_VOLUME_CHANGED,
-  GST_PLAY_MESSAGE_MUTE_CHANGED,
-  GST_PLAY_MESSAGE_SEEK_DONE
-} GstPlayMessage;
-
-GST_PLAY_API
-const gchar *gst_play_state_get_name                (GstPlayState state);
-
-GST_PLAY_API
-const gchar *gst_play_message_get_name              (GstPlayMessage message_type);
-
-GST_PLAY_API
-GQuark       gst_play_error_quark                   (void);
-
-GST_PLAY_API
-GType        gst_play_error_get_type                (void);
+  GTL_GST_PLAY_MESSAGE_URI_LOADED,
+  GTL_GST_PLAY_MESSAGE_POSITION_UPDATED,
+  GTL_GST_PLAY_MESSAGE_DURATION_CHANGED,
+  GTL_GST_PLAY_MESSAGE_STATE_CHANGED,
+  GTL_GST_PLAY_MESSAGE_BUFFERING,
+  GTL_GST_PLAY_MESSAGE_END_OF_STREAM,
+  GTL_GST_PLAY_MESSAGE_ERROR,
+  GTL_GST_PLAY_MESSAGE_WARNING,
+  GTL_GST_PLAY_MESSAGE_VIDEO_DIMENSIONS_CHANGED,
+  GTL_GST_PLAY_MESSAGE_MEDIA_INFO_UPDATED,
+  GTL_GST_PLAY_MESSAGE_VOLUME_CHANGED,
+  GTL_GST_PLAY_MESSAGE_MUTE_CHANGED,
+  GTL_GST_PLAY_MESSAGE_SEEK_DONE
+} GtkGstPlayMessage;
+
+GTL_GST_PLAY_API
+const gchar *gtk_gst_play_state_get_name                (GtkGstPlayState state);
+
+GTL_GST_PLAY_API
+const gchar *gtk_gst_play_message_get_name              (GtkGstPlayMessage message_type);
+
+GTL_GST_PLAY_API
+GQuark       gtk_gst_play_error_quark                   (void);
+
+GTL_GST_PLAY_API
+GType        gtk_gst_play_error_get_type                (void);
 
 /**
- * GST_PLAY_ERROR:
+ * GTL_GST_PLAY_ERROR:
  *
  * Since: 1.20
  */
-#define      GST_PLAY_ERROR                         (gst_play_error_quark ())
+#define      GTL_GST_PLAY_ERROR                         (gtk_gst_play_error_quark ())
 
 /**
  * GST_TYPE_PLAY_ERROR:
  *
  * Since: 1.20
  */
-#define      GST_TYPE_PLAY_ERROR                    (gst_play_error_get_type ())
+#define      GST_TYPE_PLAY_ERROR                    (gtk_gst_play_error_get_type ())
 
 /**
- * GstPlayError:
- * @GST_PLAY_ERROR_FAILED: generic error.
+ * GtkGstPlayError:
+ * @GTL_GST_PLAY_ERROR_FAILED: generic error.
  *
  * Since: 1.20
  */
 typedef enum {
-  GST_PLAY_ERROR_FAILED = 0
-} GstPlayError;
+  GTL_GST_PLAY_ERROR_FAILED = 0
+} GtkGstPlayError;
 
-GST_PLAY_API
-const gchar *gst_play_error_get_name                (GstPlayError error);
+GTL_GST_PLAY_API
+const gchar *gtk_gst_play_error_get_name                (GtkGstPlayError error);
 
-GST_PLAY_API
-GType gst_play_color_balance_type_get_type          (void);
+GTL_GST_PLAY_API
+GType gtk_gst_play_color_balance_type_get_type          (void);
 
 /**
  * GST_TYPE_PLAY_COLOR_BALANCE_TYPE:
  *
  * Since: 1.20
  */
-#define GST_TYPE_PLAY_COLOR_BALANCE_TYPE            (gst_play_color_balance_type_get_type ())
+#define GST_TYPE_PLAY_COLOR_BALANCE_TYPE            (gtk_gst_play_color_balance_type_get_type ())
 
 /**
- * GstPlayColorBalanceType:
- * @GST_PLAY_COLOR_BALANCE_BRIGHTNESS: brightness or black level.
- * @GST_PLAY_COLOR_BALANCE_CONTRAST: contrast or luma gain.
- * @GST_PLAY_COLOR_BALANCE_SATURATION: color saturation or chroma
+ * GtkGstPlayColorBalanceType:
+ * @GTL_GST_PLAY_COLOR_BALANCE_BRIGHTNESS: brightness or black level.
+ * @GTL_GST_PLAY_COLOR_BALANCE_CONTRAST: contrast or luma gain.
+ * @GTL_GST_PLAY_COLOR_BALANCE_SATURATION: color saturation or chroma
  * gain.
- * @GST_PLAY_COLOR_BALANCE_HUE: hue or color balance.
+ * @GTL_GST_PLAY_COLOR_BALANCE_HUE: hue or color balance.
  *
  * Since: 1.20
  */
 typedef enum
 {
-  GST_PLAY_COLOR_BALANCE_BRIGHTNESS,
-  GST_PLAY_COLOR_BALANCE_CONTRAST,
-  GST_PLAY_COLOR_BALANCE_SATURATION,
-  GST_PLAY_COLOR_BALANCE_HUE,
-} GstPlayColorBalanceType;
+  GTL_GST_PLAY_COLOR_BALANCE_BRIGHTNESS,
+  GTL_GST_PLAY_COLOR_BALANCE_CONTRAST,
+  GTL_GST_PLAY_COLOR_BALANCE_SATURATION,
+  GTL_GST_PLAY_COLOR_BALANCE_HUE,
+} GtkGstPlayColorBalanceType;
 
-GST_PLAY_API
-const gchar *gst_play_color_balance_type_get_name   (GstPlayColorBalanceType type);
+GTL_GST_PLAY_API
+const gchar *gtk_gst_play_color_balance_type_get_name   (GtkGstPlayColorBalanceType type);
 
-#define GST_TYPE_PLAY             (gst_play_get_type ())
+#define GST_TYPE_PLAY             (gtk_gst_play_get_type ())
 #define GST_IS_PLAY(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_PLAY))
 #define GST_IS_PLAY_CLASS(klass)  (G_TYPE_CHECK_CLASS_TYPE ((klass), GST_TYPE_PLAY))
-#define GST_PLAY_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GST_TYPE_PLAY, GstPlayClass))
-#define GST_PLAY(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PLAY, GstPlay))
-#define GST_PLAY_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_PLAY, GstPlayClass))
+#define GTL_GST_PLAY_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GST_TYPE_PLAY, GtkGstPlayClass))
+#define GST_PLAY(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PLAY, GtkGstPlay))
+#define GTL_GST_PLAY_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_PLAY, GtkGstPlayClass))
 
 /**
- * GST_PLAY_CAST:
+ * GTL_GST_PLAY_CAST:
  * Since: 1.20
  */
-#define GST_PLAY_CAST(obj)        ((GstPlay*)(obj))
+#define GTL_GST_PLAY_CAST(obj)        ((GtkGstPlay*)(obj))
 
 #ifdef G_DEFINE_AUTOPTR_CLEANUP_FUNC
-G_DEFINE_AUTOPTR_CLEANUP_FUNC(GstPlay, gst_object_unref)
+G_DEFINE_AUTOPTR_CLEANUP_FUNC(GtkGstPlay, gst_object_unref)
 #endif
 
-GST_PLAY_API
-GType        gst_play_get_type                      (void);
+GTL_GST_PLAY_API
+GType        gtk_gst_play_get_type                      (void);
 
-GST_PLAY_API
-GstPlay *    gst_play_new                           (GstPlayVideoRenderer * video_renderer);
+GTL_GST_PLAY_API
+GtkGstPlay *    gtk_gst_play_new                           (GtkGstPlayVideoRenderer * video_renderer);
 
-GST_PLAY_API
-GstBus *     gst_play_get_message_bus               (GstPlay    * play);
+GTL_GST_PLAY_API
+GstBus *     gtk_gst_play_get_message_bus               (GtkGstPlay    * play);
 
-GST_PLAY_API
-void         gst_play_play                          (GstPlay    * play);
+GTL_GST_PLAY_API
+void         gtk_gst_play_play                          (GtkGstPlay    * play);
 
-GST_PLAY_API
-void         gst_play_pause                         (GstPlay    * play);
+GTL_GST_PLAY_API
+void         gtk_gst_play_pause                         (GtkGstPlay    * play);
 
-GST_PLAY_API
-void         gst_play_stop                          (GstPlay    * play);
+GTL_GST_PLAY_API
+void         gtk_gst_play_stop                          (GtkGstPlay    * play);
 
-GST_PLAY_API
-void         gst_play_seek                          (GstPlay    * play,
+GTL_GST_PLAY_API
+void         gtk_gst_play_seek                          (GtkGstPlay    * play,
                                                      GstClockTime   position);
 
-GST_PLAY_API
-void         gst_play_set_rate                      (GstPlay    * play,
+GTL_GST_PLAY_API
+void         gtk_gst_play_set_rate                      (GtkGstPlay    * play,
                                                      gdouble        rate);
 
-GST_PLAY_API
-gdouble      gst_play_get_rate                      (GstPlay    * play);
+GTL_GST_PLAY_API
+gdouble      gtk_gst_play_get_rate                      (GtkGstPlay    * play);
 
-GST_PLAY_API
-gchar *      gst_play_get_uri                       (GstPlay    * play);
+GTL_GST_PLAY_API
+gchar *      gtk_gst_play_get_uri                       (GtkGstPlay    * play);
 
-GST_PLAY_API
-void         gst_play_set_uri                       (GstPlay    * play,
+GTL_GST_PLAY_API
+void         gtk_gst_play_set_uri                       (GtkGstPlay    * play,
                                                      const gchar  * uri);
 
-GST_PLAY_API
-gchar *      gst_play_get_subtitle_uri              (GstPlay    * play);
+GTL_GST_PLAY_API
+gchar *      gtk_gst_play_get_subtitle_uri              (GtkGstPlay    * play);
 
-GST_PLAY_API
-void         gst_play_set_subtitle_uri              (GstPlay    * play,
+GTL_GST_PLAY_API
+void         gtk_gst_play_set_subtitle_uri              (GtkGstPlay    * play,
                                                      const gchar *uri);
 
-GST_PLAY_API
-GstClockTime gst_play_get_position                  (GstPlay    * play);
+GTL_GST_PLAY_API
+GstClockTime gtk_gst_play_get_position                  (GtkGstPlay    * play);
 
-GST_PLAY_API
-GstClockTime gst_play_get_duration                  (GstPlay    * play);
+GTL_GST_PLAY_API
+GstClockTime gtk_gst_play_get_duration                  (GtkGstPlay    * play);
 
-GST_PLAY_API
-gdouble      gst_play_get_volume                    (GstPlay    * play);
+GTL_GST_PLAY_API
+gdouble      gtk_gst_play_get_volume                    (GtkGstPlay    * play);
 
-GST_PLAY_API
-void         gst_play_set_volume                    (GstPlay    * play,
+GTL_GST_PLAY_API
+void         gtk_gst_play_set_volume                    (GtkGstPlay    * play,
                                                      gdouble        val);
 
-GST_PLAY_API
-gboolean     gst_play_get_mute                      (GstPlay    * play);
+GTL_GST_PLAY_API
+gboolean     gtk_gst_play_get_mute                      (GtkGstPlay    * play);
 
-GST_PLAY_API
-void         gst_play_set_mute                      (GstPlay    * play,
+GTL_GST_PLAY_API
+void         gtk_gst_play_set_mute                      (GtkGstPlay    * play,
                                                      gboolean       val);
 
-GST_PLAY_API
-GstElement * gst_play_get_pipeline                  (GstPlay    * play);
+GTL_GST_PLAY_API
+GstElement * gtk_gst_play_get_pipeline                  (GtkGstPlay    * play);
 
-GST_PLAY_API
-void         gst_play_set_video_track_enabled       (GstPlay    * play,
+GTL_GST_PLAY_API
+void         gtk_gst_play_set_video_track_enabled       (GtkGstPlay    * play,
                                                      gboolean enabled);
 
-GST_PLAY_API
-void         gst_play_set_audio_track_enabled       (GstPlay    * play,
+GTL_GST_PLAY_API
+void         gtk_gst_play_set_audio_track_enabled       (GtkGstPlay    * play,
                                                      gboolean enabled);
 
-GST_PLAY_API
-void         gst_play_set_subtitle_track_enabled    (GstPlay    * play,
+GTL_GST_PLAY_API
+void         gtk_gst_play_set_subtitle_track_enabled    (GtkGstPlay    * play,
                                                      gboolean enabled);
 
-GST_PLAY_API
-gboolean     gst_play_set_audio_track               (GstPlay    *play,
+GTL_GST_PLAY_API
+gboolean     gtk_gst_play_set_audio_track               (GtkGstPlay    *play,
                                                      gint stream_index);
 
-GST_PLAY_API
-gboolean     gst_play_set_video_track               (GstPlay    *play,
+GTL_GST_PLAY_API
+gboolean     gtk_gst_play_set_video_track               (GtkGstPlay    *play,
                                                      gint stream_index);
 
-GST_PLAY_API
-gboolean     gst_play_set_subtitle_track            (GstPlay    *play,
+GTL_GST_PLAY_API
+gboolean     gtk_gst_play_set_subtitle_track            (GtkGstPlay    *play,
                                                      gint stream_index);
 
-GST_PLAY_API
-GstPlayMediaInfo *    gst_play_get_media_info     (GstPlay * play);
+GTL_GST_PLAY_API
+GtkGstPlayMediaInfo *    gtk_gst_play_get_media_info     (GtkGstPlay * play);
 
-GST_PLAY_API
-GstPlayAudioInfo *    gst_play_get_current_audio_track (GstPlay * play);
+GTL_GST_PLAY_API
+GtkGstPlayAudioInfo *    gtk_gst_play_get_current_audio_track (GtkGstPlay * play);
 
-GST_PLAY_API
-GstPlayVideoInfo *    gst_play_get_current_video_track (GstPlay * play);
+GTL_GST_PLAY_API
+GtkGstPlayVideoInfo *    gtk_gst_play_get_current_video_track (GtkGstPlay * play);
 
-GST_PLAY_API
-GstPlaySubtitleInfo * gst_play_get_current_subtitle_track (GstPlay * play);
+GTL_GST_PLAY_API
+GtkGstPlaySubtitleInfo * gtk_gst_play_get_current_subtitle_track (GtkGstPlay * play);
 
-GST_PLAY_API
-gboolean     gst_play_set_visualization             (GstPlay    * play,
+GTL_GST_PLAY_API
+gboolean     gtk_gst_play_set_visualization             (GtkGstPlay    * play,
                                                      const gchar *name);
 
-GST_PLAY_API
-void         gst_play_set_visualization_enabled     (GstPlay    * play,
+GTL_GST_PLAY_API
+void         gtk_gst_play_set_visualization_enabled     (GtkGstPlay    * play,
                                                      gboolean enabled);
 
-GST_PLAY_API
-gchar *      gst_play_get_current_visualization     (GstPlay    * play);
+GTL_GST_PLAY_API
+gchar *      gtk_gst_play_get_current_visualization     (GtkGstPlay    * play);
 
-GST_PLAY_API
-gboolean     gst_play_has_color_balance             (GstPlay    * play);
+GTL_GST_PLAY_API
+gboolean     gtk_gst_play_has_color_balance             (GtkGstPlay    * play);
 
-GST_PLAY_API
-void         gst_play_set_color_balance             (GstPlay    * play,
-                                                     GstPlayColorBalanceType type,
+GTL_GST_PLAY_API
+void         gtk_gst_play_set_color_balance             (GtkGstPlay    * play,
+                                                     GtkGstPlayColorBalanceType type,
                                                      gdouble value);
 
-GST_PLAY_API
-gdouble      gst_play_get_color_balance             (GstPlay    * play,
-                                                     GstPlayColorBalanceType type);
+GTL_GST_PLAY_API
+gdouble      gtk_gst_play_get_color_balance             (GtkGstPlay    * play,
+                                                     GtkGstPlayColorBalanceType type);
 
 
-GST_PLAY_API
-GstVideoMultiviewFramePacking gst_play_get_multiview_mode (GstPlay    * play);
+GTL_GST_PLAY_API
+GstVideoMultiviewFramePacking gtk_gst_play_get_multiview_mode (GtkGstPlay    * play);
 
-GST_PLAY_API
-void                     gst_play_set_multiview_mode (GstPlay    * play,
+GTL_GST_PLAY_API
+void                     gtk_gst_play_set_multiview_mode (GtkGstPlay    * play,
                                                       GstVideoMultiviewFramePacking mode);
 
-GST_PLAY_API
-GstVideoMultiviewFlags  gst_play_get_multiview_flags  (GstPlay  * play);
+GTL_GST_PLAY_API
+GstVideoMultiviewFlags  gtk_gst_play_get_multiview_flags  (GtkGstPlay  * play);
 
-GST_PLAY_API
-void                    gst_play_set_multiview_flags  (GstPlay  * play,
+GTL_GST_PLAY_API
+void                    gtk_gst_play_set_multiview_flags  (GtkGstPlay  * play,
                                                        GstVideoMultiviewFlags flags);
 
-GST_PLAY_API
-gint64       gst_play_get_audio_video_offset        (GstPlay    * play);
+GTL_GST_PLAY_API
+gint64       gtk_gst_play_get_audio_video_offset        (GtkGstPlay    * play);
 
-GST_PLAY_API
-void         gst_play_set_audio_video_offset        (GstPlay    * play,
+GTL_GST_PLAY_API
+void         gtk_gst_play_set_audio_video_offset        (GtkGstPlay    * play,
                                                      gint64 offset);
 
-GST_PLAY_API
-gint64       gst_play_get_subtitle_video_offset        (GstPlay    * play);
+GTL_GST_PLAY_API
+gint64       gtk_gst_play_get_subtitle_video_offset        (GtkGstPlay    * play);
 
-GST_PLAY_API
-void         gst_play_set_subtitle_video_offset        (GstPlay    * play,
+GTL_GST_PLAY_API
+void         gtk_gst_play_set_subtitle_video_offset        (GtkGstPlay    * play,
                                                         gint64 offset);
 
-GST_PLAY_API
-gboolean       gst_play_set_config                  (GstPlay * play,
+GTL_GST_PLAY_API
+gboolean       gtk_gst_play_set_config                  (GtkGstPlay * play,
                                                      GstStructure * config);
 
-GST_PLAY_API
-GstStructure * gst_play_get_config                  (GstPlay * play);
+GTL_GST_PLAY_API
+GstStructure * gtk_gst_play_get_config                  (GtkGstPlay * play);
 
 /* helpers for configuring the config structure */
 
-GST_PLAY_API
-void           gst_play_config_set_user_agent       (GstStructure * config,
+GTL_GST_PLAY_API
+void           gtk_gst_play_config_set_user_agent       (GstStructure * config,
                                                      const gchar * agent);
 
-GST_PLAY_API
-gchar *        gst_play_config_get_user_agent       (const GstStructure * config);
+GTL_GST_PLAY_API
+gchar *        gtk_gst_play_config_get_user_agent       (const GstStructure * config);
 
-GST_PLAY_API
-void           gst_play_config_set_position_update_interval  (GstStructure * config,
+GTL_GST_PLAY_API
+void           gtk_gst_play_config_set_position_update_interval  (GstStructure * config,
                                                               guint          interval);
 
-GST_PLAY_API
-guint          gst_play_config_get_position_update_interval  (const GstStructure * config);
+GTL_GST_PLAY_API
+guint          gtk_gst_play_config_get_position_update_interval  (const GstStructure * config);
 
-GST_PLAY_API
-void           gst_play_config_set_seek_accurate (GstStructure * config, gboolean accurate);
+GTL_GST_PLAY_API
+void           gtk_gst_play_config_set_seek_accurate (GstStructure * config, gboolean accurate);
 
-GST_PLAY_API
-gboolean       gst_play_config_get_seek_accurate (const GstStructure * config);
+GTL_GST_PLAY_API
+gboolean       gtk_gst_play_config_get_seek_accurate (const GstStructure * config);
 
 /**
- * GstPlaySnapshotFormat:
- * @GST_PLAY_THUMBNAIL_RAW_NATIVE: raw native format.
- * @GST_PLAY_THUMBNAIL_RAW_xRGB: raw xRGB format.
- * @GST_PLAY_THUMBNAIL_RAW_BGRx: raw BGRx format.
- * @GST_PLAY_THUMBNAIL_JPG: jpeg format.
- * @GST_PLAY_THUMBNAIL_PNG: png format.
+ * GtkGstPlaySnapshotFormat:
+ * @GTL_GST_PLAY_THUMBNAIL_RAW_NATIVE: raw native format.
+ * @GTL_GST_PLAY_THUMBNAIL_RAW_xRGB: raw xRGB format.
+ * @GTL_GST_PLAY_THUMBNAIL_RAW_BGRx: raw BGRx format.
+ * @GTL_GST_PLAY_THUMBNAIL_JPG: jpeg format.
+ * @GTL_GST_PLAY_THUMBNAIL_PNG: png format.
  *
  * Since: 1.20
  */
 typedef enum
 {
-  GST_PLAY_THUMBNAIL_RAW_NATIVE = 0,
-  GST_PLAY_THUMBNAIL_RAW_xRGB,
-  GST_PLAY_THUMBNAIL_RAW_BGRx,
-  GST_PLAY_THUMBNAIL_JPG,
-  GST_PLAY_THUMBNAIL_PNG
-} GstPlaySnapshotFormat;
+  GTL_GST_PLAY_THUMBNAIL_RAW_NATIVE = 0,
+  GTL_GST_PLAY_THUMBNAIL_RAW_xRGB,
+  GTL_GST_PLAY_THUMBNAIL_RAW_BGRx,
+  GTL_GST_PLAY_THUMBNAIL_JPG,
+  GTL_GST_PLAY_THUMBNAIL_PNG
+} GtkGstPlaySnapshotFormat;
 
-GST_PLAY_API
-GstSample * gst_play_get_video_snapshot (GstPlay * play,
-    GstPlaySnapshotFormat format, const GstStructure * config);
+GTL_GST_PLAY_API
+GstSample * gtk_gst_play_get_video_snapshot (GtkGstPlay * play,
+    GtkGstPlaySnapshotFormat format, const GstStructure * config);
 
-GST_PLAY_API
-gboolean       gst_play_is_play_message                        (GstMessage *msg);
+GTL_GST_PLAY_API
+gboolean       gtk_gst_play_is_play_message                        (GstMessage *msg);
 
-GST_PLAY_API
-void           gst_play_message_parse_type                       (GstMessage *msg, GstPlayMessage *type);
+GTL_GST_PLAY_API
+void           gtk_gst_play_message_parse_type                       (GstMessage *msg, GtkGstPlayMessage *type);
 
-GST_PLAY_API
-void           gst_play_message_parse_duration_updated           (GstMessage *msg, GstClockTime *duration);
+GTL_GST_PLAY_API
+void           gtk_gst_play_message_parse_duration_updated           (GstMessage *msg, GstClockTime *duration);
 
-GST_PLAY_API
-void           gst_play_message_parse_position_updated           (GstMessage *msg, GstClockTime *position);
+GTL_GST_PLAY_API
+void           gtk_gst_play_message_parse_position_updated           (GstMessage *msg, GstClockTime *position);
 
-GST_PLAY_API
-void           gst_play_message_parse_state_changed              (GstMessage *msg, GstPlayState *state);
+GTL_GST_PLAY_API
+void           gtk_gst_play_message_parse_state_changed              (GstMessage *msg, GtkGstPlayState *state);
 
-GST_PLAY_API
-void           gst_play_message_parse_buffering_percent          (GstMessage *msg, guint *percent);
+GTL_GST_PLAY_API
+void           gtk_gst_play_message_parse_buffering_percent          (GstMessage *msg, guint *percent);
 
-GST_PLAY_API
-void           gst_play_message_parse_error                      (GstMessage *msg, GError **error, GstStructure **details);
+GTL_GST_PLAY_API
+void           gtk_gst_play_message_parse_error                      (GstMessage *msg, GError **error, GstStructure **details);
 
-GST_PLAY_API
-void           gst_play_message_parse_warning                    (GstMessage *msg, GError **error, GstStructure **details);
+GTL_GST_PLAY_API
+void           gtk_gst_play_message_parse_warning                    (GstMessage *msg, GError **error, GstStructure **details);
 
-GST_PLAY_API
-void           gst_play_message_parse_video_dimensions_changed   (GstMessage *msg, guint *width, guint *height);
+GTL_GST_PLAY_API
+void           gtk_gst_play_message_parse_video_dimensions_changed   (GstMessage *msg, guint *width, guint *height);
 
-GST_PLAY_API
-void           gst_play_message_parse_media_info_updated         (GstMessage *msg, GstPlayMediaInfo **info);
+GTL_GST_PLAY_API
+void           gtk_gst_play_message_parse_media_info_updated         (GstMessage *msg, GtkGstPlayMediaInfo **info);
 
-GST_PLAY_API
-void           gst_play_message_parse_volume_changed             (GstMessage *msg, gdouble *volume);
+GTL_GST_PLAY_API
+void           gtk_gst_play_message_parse_volume_changed             (GstMessage *msg, gdouble *volume);
 
-GST_PLAY_API
-void           gst_play_message_parse_muted_changed              (GstMessage *msg, gboolean *muted);
+GTL_GST_PLAY_API
+void           gtk_gst_play_message_parse_muted_changed              (GstMessage *msg, gboolean *muted);
 
 G_END_DECLS
 
-#endif /* __GST_PLAY_H__ */
+#endif /* __GTL_GST_PLAY_H__ */
diff --git a/subprojects/gstreamer-player-1.0/gst/play/play-prelude.h b/subprojects/gstreamer-player-1.0/gst/play/play-prelude.h
index 466903e..40929f8 100644
--- a/subprojects/gstreamer-player-1.0/gst/play/play-prelude.h
+++ b/subprojects/gstreamer-player-1.0/gst/play/play-prelude.h
@@ -19,25 +19,25 @@
  * Boston, MA 02110-1301, USA.
  */
 
-#ifndef __GST_PLAY_PRELUDE_H__
-#define __GST_PLAY_PRELUDE_H__
+#ifndef __GTL_GST_PLAY_PRELUDE_H__
+#define __GTL_GST_PLAY_PRELUDE_H__
 
 #include <gst/gst.h>
 
-#ifndef GST_PLAY_API
+#ifndef GTL_GST_PLAY_API
 # ifdef BUILDING_GST_PLAY
-#  define GST_PLAY_API GST_API_EXPORT         /* from config.h */
+#  define GTL_GST_PLAY_API GST_API_EXPORT         /* from config.h */
 # else
-#  define GST_PLAY_API GST_API_IMPORT
+#  define GTL_GST_PLAY_API GST_API_IMPORT
 # endif
 #endif
 
 #ifndef GST_DISABLE_DEPRECATED
-#define GST_PLAY_DEPRECATED GST_PLAY_API
-#define GST_PLAY_DEPRECATED_FOR(f) GST_PLAY_API
+#define GTL_GST_PLAY_DEPRECATED GTL_GST_PLAY_API
+#define GTL_GST_PLAY_DEPRECATED_FOR(f) GTL_GST_PLAY_API
 #else
-#define GST_PLAY_DEPRECATED G_DEPRECATED GST_PLAY_API
-#define GST_PLAY_DEPRECATED_FOR(f) G_DEPRECATED_FOR(f) GST_PLAY_API
+#define GTL_GST_PLAY_DEPRECATED G_DEPRECATED GTL_GST_PLAY_API
+#define GTL_GST_PLAY_DEPRECATED_FOR(f) G_DEPRECATED_FOR(f) GTL_GST_PLAY_API
 #endif
 
-#endif /* __GST_PLAY_PRELUDE_H__ */
+#endif /* __GTL_GST_PLAY_PRELUDE_H__ */
diff --git a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-g-main-context-signal-dispatcher.c b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-g-main-context-signal-dispatcher.c
index 5eb2f85..2c1ea5e 100644
--- a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-g-main-context-signal-dispatcher.c
+++ b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-g-main-context-signal-dispatcher.c
@@ -20,7 +20,7 @@
 
 /**
  * SECTION:gstplayer-gmaincontextsignaldispatcher
- * @title: GstPlayerGMainContextSignalDispatcher
+ * @title: GtkGstPlayerGMainContextSignalDispatcher
  * @short_description: Player GLib MainContext dispatcher
  *
  */
@@ -31,20 +31,20 @@
 
 #include "gstplayer-g-main-context-signal-dispatcher.h"
 
-struct _GstPlayerGMainContextSignalDispatcher
+struct _GtkGstPlayerGMainContextSignalDispatcher
 {
   GObject parent;
   GMainContext *application_context;
 };
 
-struct _GstPlayerGMainContextSignalDispatcherClass
+struct _GtkGstPlayerGMainContextSignalDispatcherClass
 {
   GObjectClass parent_class;
 };
 
 static void
-    gst_player_g_main_context_signal_dispatcher_interface_init
-    (GstPlayerSignalDispatcherInterface * iface);
+    gtk_gst_player_g_main_context_signal_dispatcher_interface_init
+    (GtkGstPlayerSignalDispatcherInterface * iface);
 
 enum
 {
@@ -53,35 +53,35 @@ enum
   G_MAIN_CONTEXT_SIGNAL_DISPATCHER_PROP_LAST
 };
 
-G_DEFINE_TYPE_WITH_CODE (GstPlayerGMainContextSignalDispatcher,
-    gst_player_g_main_context_signal_dispatcher, G_TYPE_OBJECT,
+G_DEFINE_TYPE_WITH_CODE (GtkGstPlayerGMainContextSignalDispatcher,
+    gtk_gst_player_g_main_context_signal_dispatcher, G_TYPE_OBJECT,
     G_IMPLEMENT_INTERFACE (GST_TYPE_PLAYER_SIGNAL_DISPATCHER,
-        gst_player_g_main_context_signal_dispatcher_interface_init));
+        gtk_gst_player_g_main_context_signal_dispatcher_interface_init));
 
 static GParamSpec
     * g_main_context_signal_dispatcher_param_specs
     [G_MAIN_CONTEXT_SIGNAL_DISPATCHER_PROP_LAST] = { NULL, };
 
 static void
-gst_player_g_main_context_signal_dispatcher_finalize (GObject * object)
+gtk_gst_player_g_main_context_signal_dispatcher_finalize (GObject * object)
 {
-  GstPlayerGMainContextSignalDispatcher *self =
-      GST_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER (object);
+  GtkGstPlayerGMainContextSignalDispatcher *self =
+      GTK_GST_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER (object);
 
   if (self->application_context)
     g_main_context_unref (self->application_context);
 
   G_OBJECT_CLASS
-      (gst_player_g_main_context_signal_dispatcher_parent_class)->finalize
+      (gtk_gst_player_g_main_context_signal_dispatcher_parent_class)->finalize
       (object);
 }
 
 static void
-gst_player_g_main_context_signal_dispatcher_set_property (GObject * object,
+gtk_gst_player_g_main_context_signal_dispatcher_set_property (GObject * object,
     guint prop_id, const GValue * value, GParamSpec * pspec)
 {
-  GstPlayerGMainContextSignalDispatcher *self =
-      GST_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER (object);
+  GtkGstPlayerGMainContextSignalDispatcher *self =
+      GTK_GST_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER (object);
 
   switch (prop_id) {
     case G_MAIN_CONTEXT_SIGNAL_DISPATCHER_PROP_APPLICATION_CONTEXT:
@@ -96,11 +96,11 @@ gst_player_g_main_context_signal_dispatcher_set_property (GObject * object,
 }
 
 static void
-gst_player_g_main_context_signal_dispatcher_get_property (GObject * object,
+gtk_gst_player_g_main_context_signal_dispatcher_get_property (GObject * object,
     guint prop_id, GValue * value, GParamSpec * pspec)
 {
-  GstPlayerGMainContextSignalDispatcher *self =
-      GST_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER (object);
+  GtkGstPlayerGMainContextSignalDispatcher *self =
+      GTK_GST_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER (object);
 
   switch (prop_id) {
     case G_MAIN_CONTEXT_SIGNAL_DISPATCHER_PROP_APPLICATION_CONTEXT:
@@ -113,17 +113,17 @@ gst_player_g_main_context_signal_dispatcher_get_property (GObject * object,
 }
 
 static void
-    gst_player_g_main_context_signal_dispatcher_class_init
-    (GstPlayerGMainContextSignalDispatcherClass * klass)
+    gtk_gst_player_g_main_context_signal_dispatcher_class_init
+    (GtkGstPlayerGMainContextSignalDispatcherClass * klass)
 {
   GObjectClass *gobject_class = G_OBJECT_CLASS (klass);
 
   gobject_class->finalize =
-      gst_player_g_main_context_signal_dispatcher_finalize;
+      gtk_gst_player_g_main_context_signal_dispatcher_finalize;
   gobject_class->set_property =
-      gst_player_g_main_context_signal_dispatcher_set_property;
+      gtk_gst_player_g_main_context_signal_dispatcher_set_property;
   gobject_class->get_property =
-      gst_player_g_main_context_signal_dispatcher_get_property;
+      gtk_gst_player_g_main_context_signal_dispatcher_get_property;
 
   g_main_context_signal_dispatcher_param_specs
       [G_MAIN_CONTEXT_SIGNAL_DISPATCHER_PROP_APPLICATION_CONTEXT] =
@@ -137,8 +137,8 @@ static void
 }
 
 static void
-    gst_player_g_main_context_signal_dispatcher_init
-    (G_GNUC_UNUSED GstPlayerGMainContextSignalDispatcher * self)
+    gtk_gst_player_g_main_context_signal_dispatcher_init
+    (G_GNUC_UNUSED GtkGstPlayerGMainContextSignalDispatcher * self)
 {
 }
 
@@ -170,12 +170,12 @@ g_main_context_signal_dispatcher_dispatch_destroy (gpointer user_data)
 }
 
 static void
-gst_player_g_main_context_signal_dispatcher_dispatch (GstPlayerSignalDispatcher
-    * iface, G_GNUC_UNUSED GstPlayer * player, void (*emitter) (gpointer data),
+gtk_gst_player_g_main_context_signal_dispatcher_dispatch (GtkGstPlayerSignalDispatcher
+    * iface, G_GNUC_UNUSED GtkGstPlayer * player, void (*emitter) (gpointer data),
     gpointer data, GDestroyNotify destroy)
 {
-  GstPlayerGMainContextSignalDispatcher *self =
-      GST_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER (iface);
+  GtkGstPlayerGMainContextSignalDispatcher *self =
+      GTK_GST_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER (iface);
   GMainContextSignalDispatcherData *gsourcefunc_data =
       g_new (GMainContextSignalDispatcherData, 1);
 
@@ -189,23 +189,23 @@ gst_player_g_main_context_signal_dispatcher_dispatch (GstPlayerSignalDispatcher
 }
 
 static void
-    gst_player_g_main_context_signal_dispatcher_interface_init
-    (GstPlayerSignalDispatcherInterface * iface)
+    gtk_gst_player_g_main_context_signal_dispatcher_interface_init
+    (GtkGstPlayerSignalDispatcherInterface * iface)
 {
-  iface->dispatch = gst_player_g_main_context_signal_dispatcher_dispatch;
+  iface->dispatch = gtk_gst_player_g_main_context_signal_dispatcher_dispatch;
 }
 
 /**
- * gst_player_g_main_context_signal_dispatcher_new:
+ * gtk_gst_player_g_main_context_signal_dispatcher_new:
  * @application_context: (allow-none): GMainContext to use or %NULL
  *
- * Creates a new GstPlayerSignalDispatcher that uses @application_context,
- * or the thread default one if %NULL is used. See gst_player_new().
+ * Creates a new GtkGstPlayerSignalDispatcher that uses @application_context,
+ * or the thread default one if %NULL is used. See gtk_gst_player_new().
  *
- * Returns: (transfer full): the new GstPlayerSignalDispatcher
+ * Returns: (transfer full): the new GtkGstPlayerSignalDispatcher
  */
-GstPlayerSignalDispatcher *
-gst_player_g_main_context_signal_dispatcher_new (GMainContext *
+GtkGstPlayerSignalDispatcher *
+gtk_gst_player_g_main_context_signal_dispatcher_new (GMainContext *
     application_context)
 {
   return g_object_new (GST_TYPE_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER,
diff --git a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-g-main-context-signal-dispatcher.h b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-g-main-context-signal-dispatcher.h
index d27d697..317495e 100644
--- a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-g-main-context-signal-dispatcher.h
+++ b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-g-main-context-signal-dispatcher.h
@@ -18,33 +18,33 @@
  * Boston, MA 02110-1301, USA.
  */
 
-#ifndef __GST_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER_H__
-#define __GST_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER_H__
+#ifndef __GTK_GST_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER_H__
+#define __GTK_GST_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER_H__
 
 #include <gst/player/gstplayer-types.h>
 #include <gst/player/gstplayer-signal-dispatcher.h>
 
 G_BEGIN_DECLS
 
-typedef struct _GstPlayerGMainContextSignalDispatcher
-    GstPlayerGMainContextSignalDispatcher;
-typedef struct _GstPlayerGMainContextSignalDispatcherClass
-    GstPlayerGMainContextSignalDispatcherClass;
+typedef struct _GtkGstPlayerGMainContextSignalDispatcher
+    GtkGstPlayerGMainContextSignalDispatcher;
+typedef struct _GtkGstPlayerGMainContextSignalDispatcherClass
+    GtkGstPlayerGMainContextSignalDispatcherClass;
 
-#define GST_TYPE_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER             (gst_player_g_main_context_signal_dispatcher_get_type ())
+#define GST_TYPE_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER             (gtk_gst_player_g_main_context_signal_dispatcher_get_type ())
 #define GST_IS_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER))
 #define GST_IS_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER_CLASS(klass)  (G_TYPE_CHECK_CLASS_TYPE ((klass), GST_TYPE_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER))
-#define GST_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GST_TYPE_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER, GstPlayerGMainContextSignalDispatcherClass))
-#define GST_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER, GstPlayerGMainContextSignalDispatcher))
-#define GST_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER, GstPlayerGMainContextSignalDispatcherClass))
-#define GST_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER_CAST(obj)        ((GstPlayerGMainContextSignalDispatcher*)(obj))
+#define GTK_GST_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GST_TYPE_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER, GtkGstPlayerGMainContextSignalDispatcherClass))
+#define GTK_GST_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER, GtkGstPlayerGMainContextSignalDispatcher))
+#define GTK_GST_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER, GtkGstPlayerGMainContextSignalDispatcherClass))
+#define GTK_GST_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER_CAST(obj)        ((GtkGstPlayerGMainContextSignalDispatcher*)(obj))
 
-GST_PLAYER_API
-GType gst_player_g_main_context_signal_dispatcher_get_type (void);
+GTK_GST_PLAYER_API
+GType gtk_gst_player_g_main_context_signal_dispatcher_get_type (void);
 
-GST_PLAYER_API
-GstPlayerSignalDispatcher * gst_player_g_main_context_signal_dispatcher_new (GMainContext * application_context);
+GTK_GST_PLAYER_API
+GtkGstPlayerSignalDispatcher * gtk_gst_player_g_main_context_signal_dispatcher_new (GMainContext * application_context);
 
 G_END_DECLS
 
-#endif /* __GST_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER_H__ */
+#endif /* __GTK_GST_PLAYER_G_MAIN_CONTEXT_SIGNAL_DISPATCHER_H__ */
diff --git a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-media-info-private.h b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-media-info-private.h
index 1075ef9..7655532 100644
--- a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-media-info-private.h
+++ b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-media-info-private.h
@@ -20,61 +20,61 @@
 
 #include "gstplayer-media-info.h"
 
-#ifndef __GST_PLAYER_MEDIA_INFO_PRIVATE_H__
-#define __GST_PLAYER_MEDIA_INFO_PRIVATE_H__
+#ifndef __GTK_GST_PLAYER_MEDIA_INFO_PRIVATE_H__
+#define __GTK_GST_PLAYER_MEDIA_INFO_PRIVATE_H__
 
 #include <gst/play/gstplay-media-info.h>
 
-struct _GstPlayerStreamInfo
+struct _GtkGstPlayerStreamInfo
 {
   GObject parent;
 
   gint stream_index;
-  GstPlayStreamInfo *info;
+  GtkGstPlayStreamInfo *info;
 };
 
-struct _GstPlayerStreamInfoClass
+struct _GtkGstPlayerStreamInfoClass
 {
   GObjectClass parent_class;
 };
 
-struct _GstPlayerSubtitleInfo
+struct _GtkGstPlayerSubtitleInfo
 {
-  GstPlayerStreamInfo parent;
+  GtkGstPlayerStreamInfo parent;
 
-  GstPlaySubtitleInfo *info;
+  GtkGstPlaySubtitleInfo *info;
 };
 
-struct _GstPlayerSubtitleInfoClass
+struct _GtkGstPlayerSubtitleInfoClass
 {
-  GstPlayerStreamInfoClass parent_class;
+  GtkGstPlayerStreamInfoClass parent_class;
 };
 
-struct _GstPlayerAudioInfo
+struct _GtkGstPlayerAudioInfo
 {
-  GstPlayerStreamInfo parent;
+  GtkGstPlayerStreamInfo parent;
 
-  GstPlayAudioInfo *info;
+  GtkGstPlayAudioInfo *info;
 };
 
-struct _GstPlayerAudioInfoClass
+struct _GtkGstPlayerAudioInfoClass
 {
-  GstPlayerStreamInfoClass parent_class;
+  GtkGstPlayerStreamInfoClass parent_class;
 };
 
-struct _GstPlayerVideoInfo
+struct _GtkGstPlayerVideoInfo
 {
-  GstPlayerStreamInfo parent;
+  GtkGstPlayerStreamInfo parent;
 
-  GstPlayVideoInfo *info;
+  GtkGstPlayVideoInfo *info;
 };
 
-struct _GstPlayerVideoInfoClass
+struct _GtkGstPlayerVideoInfoClass
 {
-  GstPlayerStreamInfoClass parent_class;
+  GtkGstPlayerStreamInfoClass parent_class;
 };
 
-struct _GstPlayerMediaInfo
+struct _GtkGstPlayerMediaInfo
 {
   GObject parent;
 
@@ -82,32 +82,32 @@ struct _GstPlayerMediaInfo
   GList *audio_stream_list;
   GList *video_stream_list;
   GList *subtitle_stream_list;
-  GstPlayMediaInfo *info;
+  GtkGstPlayMediaInfo *info;
 };
 
-struct _GstPlayerMediaInfoClass
+struct _GtkGstPlayerMediaInfoClass
 {
   GObjectClass parent_class;
 };
 
-G_GNUC_INTERNAL GstPlayerMediaInfo*   gst_player_media_info_new
+G_GNUC_INTERNAL GtkGstPlayerMediaInfo*   gtk_gst_player_media_info_new
                                       (void);
-G_GNUC_INTERNAL GstPlayerMediaInfo*   gst_player_media_info_copy
-                                      (GstPlayerMediaInfo *ref);
-G_GNUC_INTERNAL GstPlayerStreamInfo*  gst_player_stream_info_new
+G_GNUC_INTERNAL GtkGstPlayerMediaInfo*   gtk_gst_player_media_info_copy
+                                      (GtkGstPlayerMediaInfo *ref);
+G_GNUC_INTERNAL GtkGstPlayerStreamInfo*  gtk_gst_player_stream_info_new
                                       (gint stream_index, GType type);
-G_GNUC_INTERNAL GstPlayerStreamInfo*  gst_player_stream_info_wrapped
-                                      (GstPlayStreamInfo * info);
-G_GNUC_INTERNAL GstPlayerStreamInfo*  gst_player_stream_info_copy
-                                      (GstPlayerStreamInfo *ref);
-
-G_GNUC_INTERNAL GstPlayerMediaInfo*   gst_player_media_info_wrapped
-                                      (GstPlayMediaInfo *info);
-G_GNUC_INTERNAL GstPlayerAudioInfo*   gst_player_audio_info_wrapped
-                                      (GstPlayAudioInfo *info);
-G_GNUC_INTERNAL GstPlayerVideoInfo*   gst_player_video_info_wrapped
-                                      (GstPlayVideoInfo *info);
-G_GNUC_INTERNAL GstPlayerSubtitleInfo*  gst_player_subtitle_info_wrapped
-                                        (GstPlaySubtitleInfo *info);
-
-#endif /* __GST_PLAYER_MEDIA_INFO_PRIVATE_H__ */
+G_GNUC_INTERNAL GtkGstPlayerStreamInfo*  gtk_gst_player_stream_info_wrapped
+                                      (GtkGstPlayStreamInfo * info);
+G_GNUC_INTERNAL GtkGstPlayerStreamInfo*  gtk_gst_player_stream_info_copy
+                                      (GtkGstPlayerStreamInfo *ref);
+
+G_GNUC_INTERNAL GtkGstPlayerMediaInfo*   gtk_gst_player_media_info_wrapped
+                                      (GtkGstPlayMediaInfo *info);
+G_GNUC_INTERNAL GtkGstPlayerAudioInfo*   gtk_gst_player_audio_info_wrapped
+                                      (GtkGstPlayAudioInfo *info);
+G_GNUC_INTERNAL GtkGstPlayerVideoInfo*   gtk_gst_player_video_info_wrapped
+                                      (GtkGstPlayVideoInfo *info);
+G_GNUC_INTERNAL GtkGstPlayerSubtitleInfo*  gtk_gst_player_subtitle_info_wrapped
+                                        (GtkGstPlaySubtitleInfo *info);
+
+#endif /* __GTK_GST_PLAYER_MEDIA_INFO_PRIVATE_H__ */
diff --git a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-media-info.c b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-media-info.c
index 36eb14c..4257ffe 100644
--- a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-media-info.c
+++ b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-media-info.c
@@ -20,7 +20,7 @@
 
 /**
  * SECTION:gstplayer-mediainfo
- * @title: GstPlayerMediaInfo
+ * @title: GtkGstPlayerMediaInfo
  * @short_description: Player Media Information
  *
  */
@@ -33,44 +33,44 @@
 #include "gstplayer-media-info-private.h"
 
 /* Per-stream information */
-G_DEFINE_ABSTRACT_TYPE (GstPlayerStreamInfo, gst_player_stream_info,
+G_DEFINE_ABSTRACT_TYPE (GtkGstPlayerStreamInfo, gtk_gst_player_stream_info,
     G_TYPE_OBJECT);
 
 static void
-gst_player_stream_info_init (GstPlayerStreamInfo * sinfo)
+gtk_gst_player_stream_info_init (GtkGstPlayerStreamInfo * sinfo)
 {
   sinfo->stream_index = -1;
 }
 
 static void
-gst_player_stream_info_finalize (GObject * object)
+gtk_gst_player_stream_info_finalize (GObject * object)
 {
-  GstPlayerStreamInfo *sinfo = GST_PLAYER_STREAM_INFO (object);
+  GtkGstPlayerStreamInfo *sinfo = GTK_GST_PLAYER_STREAM_INFO (object);
 
   g_clear_object (&sinfo->info);
 
-  G_OBJECT_CLASS (gst_player_stream_info_parent_class)->finalize (object);
+  G_OBJECT_CLASS (gtk_gst_player_stream_info_parent_class)->finalize (object);
 }
 
 static void
-gst_player_stream_info_class_init (GstPlayerStreamInfoClass * klass)
+gtk_gst_player_stream_info_class_init (GtkGstPlayerStreamInfoClass * klass)
 {
   GObjectClass *gobject_class = (GObjectClass *) klass;
 
-  gobject_class->finalize = gst_player_stream_info_finalize;
+  gobject_class->finalize = gtk_gst_player_stream_info_finalize;
 }
 
 /**
- * gst_player_stream_info_get_index:
- * @info: a #GstPlayerStreamInfo
+ * gtk_gst_player_stream_info_get_index:
+ * @info: a #GtkGstPlayerStreamInfo
  *
- * Function to get stream index from #GstPlayerStreamInfo instance or -1 if
+ * Function to get stream index from #GtkGstPlayerStreamInfo instance or -1 if
  * unknown.
  *
  * Returns: the stream index of this stream.
  */
 gint
-gst_player_stream_info_get_index (const GstPlayerStreamInfo * info)
+gtk_gst_player_stream_info_get_index (const GtkGstPlayerStreamInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_STREAM_INFO (info), -1);
 
@@ -78,8 +78,8 @@ gst_player_stream_info_get_index (const GstPlayerStreamInfo * info)
 }
 
 /**
- * gst_player_stream_info_get_stream_type:
- * @info: a #GstPlayerStreamInfo
+ * gtk_gst_player_stream_info_get_stream_type:
+ * @info: a #GtkGstPlayerStreamInfo
  *
  * Function to return human readable name for the stream type
  * of the given @info (ex: "audio", "video", "subtitle")
@@ -87,132 +87,132 @@ gst_player_stream_info_get_index (const GstPlayerStreamInfo * info)
  * Returns: a human readable name
  */
 const gchar *
-gst_player_stream_info_get_stream_type (const GstPlayerStreamInfo * info)
+gtk_gst_player_stream_info_get_stream_type (const GtkGstPlayerStreamInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_STREAM_INFO (info), NULL);
 
-  return gst_play_stream_info_get_stream_type (info->info);
+  return gtk_gst_play_stream_info_get_stream_type (info->info);
 }
 
 /**
- * gst_player_stream_info_get_tags:
- * @info: a #GstPlayerStreamInfo
+ * gtk_gst_player_stream_info_get_tags:
+ * @info: a #GtkGstPlayerStreamInfo
  *
  * Returns: (transfer none) (nullable): the tags contained in this stream.
  */
 GstTagList *
-gst_player_stream_info_get_tags (const GstPlayerStreamInfo * info)
+gtk_gst_player_stream_info_get_tags (const GtkGstPlayerStreamInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_STREAM_INFO (info), NULL);
 
-  return gst_play_stream_info_get_tags (info->info);
+  return gtk_gst_play_stream_info_get_tags (info->info);
 }
 
 /**
- * gst_player_stream_info_get_codec:
- * @info: a #GstPlayerStreamInfo
+ * gtk_gst_player_stream_info_get_codec:
+ * @info: a #GtkGstPlayerStreamInfo
  *
- * A string describing codec used in #GstPlayerStreamInfo.
+ * A string describing codec used in #GtkGstPlayerStreamInfo.
  *
  * Returns: (nullable): codec string or %NULL on unknown.
  */
 const gchar *
-gst_player_stream_info_get_codec (const GstPlayerStreamInfo * info)
+gtk_gst_player_stream_info_get_codec (const GtkGstPlayerStreamInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_STREAM_INFO (info), NULL);
 
-  return gst_play_stream_info_get_codec (info->info);
+  return gtk_gst_play_stream_info_get_codec (info->info);
 }
 
 /**
- * gst_player_stream_info_get_caps:
- * @info: a #GstPlayerStreamInfo
+ * gtk_gst_player_stream_info_get_caps:
+ * @info: a #GtkGstPlayerStreamInfo
  *
  * Returns: (transfer none) (nullable): the #GstCaps of the stream.
  */
 GstCaps *
-gst_player_stream_info_get_caps (const GstPlayerStreamInfo * info)
+gtk_gst_player_stream_info_get_caps (const GtkGstPlayerStreamInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_STREAM_INFO (info), NULL);
 
-  return gst_play_stream_info_get_caps (info->info);
+  return gtk_gst_play_stream_info_get_caps (info->info);
 }
 
 /* Video information */
-G_DEFINE_TYPE (GstPlayerVideoInfo, gst_player_video_info,
+G_DEFINE_TYPE (GtkGstPlayerVideoInfo, gtk_gst_player_video_info,
     GST_TYPE_PLAYER_STREAM_INFO);
 
 static void
-gst_player_video_info_init (G_GNUC_UNUSED GstPlayerVideoInfo * info)
+gtk_gst_player_video_info_init (G_GNUC_UNUSED GtkGstPlayerVideoInfo * info)
 {
 
 }
 
 static void
-gst_player_video_info_finalize (GObject * object)
+gtk_gst_player_video_info_finalize (GObject * object)
 {
-  GstPlayerVideoInfo *info = GST_PLAYER_VIDEO_INFO (object);
+  GtkGstPlayerVideoInfo *info = GTK_GST_PLAYER_VIDEO_INFO (object);
 
   g_clear_object (&info->info);
 
-  G_OBJECT_CLASS (gst_player_video_info_parent_class)->finalize (object);
+  G_OBJECT_CLASS (gtk_gst_player_video_info_parent_class)->finalize (object);
 }
 
 static void
-gst_player_video_info_class_init (G_GNUC_UNUSED GstPlayerVideoInfoClass * klass)
+gtk_gst_player_video_info_class_init (G_GNUC_UNUSED GtkGstPlayerVideoInfoClass * klass)
 {
   GObjectClass *gobject_class = (GObjectClass *) klass;
 
-  gobject_class->finalize = gst_player_video_info_finalize;
+  gobject_class->finalize = gtk_gst_player_video_info_finalize;
 }
 
 /**
- * gst_player_video_info_get_width:
- * @info: a #GstPlayerVideoInfo
+ * gtk_gst_player_video_info_get_width:
+ * @info: a #GtkGstPlayerVideoInfo
  *
- * Returns: the width of video in #GstPlayerVideoInfo or -1 if unknown.
+ * Returns: the width of video in #GtkGstPlayerVideoInfo or -1 if unknown.
  */
 gint
-gst_player_video_info_get_width (const GstPlayerVideoInfo * info)
+gtk_gst_player_video_info_get_width (const GtkGstPlayerVideoInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_VIDEO_INFO (info), -1);
 
-  return gst_play_video_info_get_width (info->info);
+  return gtk_gst_play_video_info_get_width (info->info);
 }
 
 /**
- * gst_player_video_info_get_height:
- * @info: a #GstPlayerVideoInfo
+ * gtk_gst_player_video_info_get_height:
+ * @info: a #GtkGstPlayerVideoInfo
  *
- * Returns: the height of video in #GstPlayerVideoInfo or -1 if unknown.
+ * Returns: the height of video in #GtkGstPlayerVideoInfo or -1 if unknown.
  */
 gint
-gst_player_video_info_get_height (const GstPlayerVideoInfo * info)
+gtk_gst_player_video_info_get_height (const GtkGstPlayerVideoInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_VIDEO_INFO (info), -1);
 
-  return gst_play_video_info_get_height (info->info);
+  return gtk_gst_play_video_info_get_height (info->info);
 }
 
 /**
- * gst_player_video_info_get_framerate:
- * @info: a #GstPlayerVideoInfo
+ * gtk_gst_player_video_info_get_framerate:
+ * @info: a #GtkGstPlayerVideoInfo
  * @fps_n: (out): Numerator of frame rate
  * @fps_d: (out): Denominator of frame rate
  *
  */
 void
-gst_player_video_info_get_framerate (const GstPlayerVideoInfo * info,
+gtk_gst_player_video_info_get_framerate (const GtkGstPlayerVideoInfo * info,
     gint * fps_n, gint * fps_d)
 {
   g_return_if_fail (GST_IS_PLAYER_VIDEO_INFO (info));
 
-  gst_play_video_info_get_framerate (info->info, fps_n, fps_d);
+  gtk_gst_play_video_info_get_framerate (info->info, fps_n, fps_d);
 }
 
 /**
- * gst_player_video_info_get_pixel_aspect_ratio:
- * @info: a #GstPlayerVideoInfo
+ * gtk_gst_player_video_info_get_pixel_aspect_ratio:
+ * @info: a #GtkGstPlayerVideoInfo
  * @par_n: (out): numerator
  * @par_d: (out): denominator
  *
@@ -220,198 +220,198 @@ gst_player_video_info_get_framerate (const GstPlayerVideoInfo * info,
  *
  */
 void
-gst_player_video_info_get_pixel_aspect_ratio (const GstPlayerVideoInfo * info,
+gtk_gst_player_video_info_get_pixel_aspect_ratio (const GtkGstPlayerVideoInfo * info,
     guint * par_n, guint * par_d)
 {
   g_return_if_fail (GST_IS_PLAYER_VIDEO_INFO (info));
 
-  gst_play_video_info_get_pixel_aspect_ratio (info->info, par_n, par_d);
+  gtk_gst_play_video_info_get_pixel_aspect_ratio (info->info, par_n, par_d);
 }
 
 /**
- * gst_player_video_info_get_bitrate:
- * @info: a #GstPlayerVideoInfo
+ * gtk_gst_player_video_info_get_bitrate:
+ * @info: a #GtkGstPlayerVideoInfo
  *
- * Returns: the current bitrate of video in #GstPlayerVideoInfo or -1 if
+ * Returns: the current bitrate of video in #GtkGstPlayerVideoInfo or -1 if
  * unknown.
  */
 gint
-gst_player_video_info_get_bitrate (const GstPlayerVideoInfo * info)
+gtk_gst_player_video_info_get_bitrate (const GtkGstPlayerVideoInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_VIDEO_INFO (info), -1);
 
-  return gst_play_video_info_get_bitrate (info->info);
+  return gtk_gst_play_video_info_get_bitrate (info->info);
 }
 
 /**
- * gst_player_video_info_get_max_bitrate:
- * @info: a #GstPlayerVideoInfo
+ * gtk_gst_player_video_info_get_max_bitrate:
+ * @info: a #GtkGstPlayerVideoInfo
  *
- * Returns: the maximum bitrate of video in #GstPlayerVideoInfo or -1 if
+ * Returns: the maximum bitrate of video in #GtkGstPlayerVideoInfo or -1 if
  * unknown.
  */
 gint
-gst_player_video_info_get_max_bitrate (const GstPlayerVideoInfo * info)
+gtk_gst_player_video_info_get_max_bitrate (const GtkGstPlayerVideoInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_VIDEO_INFO (info), -1);
 
-  return gst_play_video_info_get_max_bitrate (info->info);
+  return gtk_gst_play_video_info_get_max_bitrate (info->info);
 }
 
 /* Audio information */
-G_DEFINE_TYPE (GstPlayerAudioInfo, gst_player_audio_info,
+G_DEFINE_TYPE (GtkGstPlayerAudioInfo, gtk_gst_player_audio_info,
     GST_TYPE_PLAYER_STREAM_INFO);
 
 static void
-gst_player_audio_info_init (G_GNUC_UNUSED GstPlayerAudioInfo * info)
+gtk_gst_player_audio_info_init (G_GNUC_UNUSED GtkGstPlayerAudioInfo * info)
 {
 
 }
 
 static void
-gst_player_audio_info_finalize (GObject * object)
+gtk_gst_player_audio_info_finalize (GObject * object)
 {
-  GstPlayerAudioInfo *info = GST_PLAYER_AUDIO_INFO (object);
+  GtkGstPlayerAudioInfo *info = GTK_GST_PLAYER_AUDIO_INFO (object);
 
   g_clear_object (&info->info);
 
-  G_OBJECT_CLASS (gst_player_audio_info_parent_class)->finalize (object);
+  G_OBJECT_CLASS (gtk_gst_player_audio_info_parent_class)->finalize (object);
 }
 
 static void
-gst_player_audio_info_class_init (GstPlayerAudioInfoClass * klass)
+gtk_gst_player_audio_info_class_init (GtkGstPlayerAudioInfoClass * klass)
 {
   GObjectClass *gobject_class = (GObjectClass *) klass;
 
-  gobject_class->finalize = gst_player_audio_info_finalize;
+  gobject_class->finalize = gtk_gst_player_audio_info_finalize;
 }
 
 /**
- * gst_player_audio_info_get_language:
- * @info: a #GstPlayerAudioInfo
+ * gtk_gst_player_audio_info_get_language:
+ * @info: a #GtkGstPlayerAudioInfo
  *
  * Returns: (nullable): the language of the stream, or NULL if unknown.
  */
 const gchar *
-gst_player_audio_info_get_language (const GstPlayerAudioInfo * info)
+gtk_gst_player_audio_info_get_language (const GtkGstPlayerAudioInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_AUDIO_INFO (info), NULL);
 
-  return gst_play_audio_info_get_language (info->info);
+  return gtk_gst_play_audio_info_get_language (info->info);
 }
 
 /**
- * gst_player_audio_info_get_channels:
- * @info: a #GstPlayerAudioInfo
+ * gtk_gst_player_audio_info_get_channels:
+ * @info: a #GtkGstPlayerAudioInfo
  *
- * Returns: the number of audio channels in #GstPlayerAudioInfo or 0 if
+ * Returns: the number of audio channels in #GtkGstPlayerAudioInfo or 0 if
  * unknown.
  */
 gint
-gst_player_audio_info_get_channels (const GstPlayerAudioInfo * info)
+gtk_gst_player_audio_info_get_channels (const GtkGstPlayerAudioInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_AUDIO_INFO (info), 0);
 
-  return gst_play_audio_info_get_channels (info->info);
+  return gtk_gst_play_audio_info_get_channels (info->info);
 }
 
 /**
- * gst_player_audio_info_get_sample_rate:
- * @info: a #GstPlayerAudioInfo
+ * gtk_gst_player_audio_info_get_sample_rate:
+ * @info: a #GtkGstPlayerAudioInfo
  *
- * Returns: the audio sample rate in #GstPlayerAudioInfo or 0 if unknown.
+ * Returns: the audio sample rate in #GtkGstPlayerAudioInfo or 0 if unknown.
  */
 gint
-gst_player_audio_info_get_sample_rate (const GstPlayerAudioInfo * info)
+gtk_gst_player_audio_info_get_sample_rate (const GtkGstPlayerAudioInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_AUDIO_INFO (info), 0);
 
-  return gst_play_audio_info_get_sample_rate (info->info);
+  return gtk_gst_play_audio_info_get_sample_rate (info->info);
 }
 
 /**
- * gst_player_audio_info_get_bitrate:
- * @info: a #GstPlayerAudioInfo
+ * gtk_gst_player_audio_info_get_bitrate:
+ * @info: a #GtkGstPlayerAudioInfo
  *
- * Returns: the audio bitrate in #GstPlayerAudioInfo or -1 if unknown.
+ * Returns: the audio bitrate in #GtkGstPlayerAudioInfo or -1 if unknown.
  */
 gint
-gst_player_audio_info_get_bitrate (const GstPlayerAudioInfo * info)
+gtk_gst_player_audio_info_get_bitrate (const GtkGstPlayerAudioInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_AUDIO_INFO (info), -1);
 
-  return gst_play_audio_info_get_bitrate (info->info);
+  return gtk_gst_play_audio_info_get_bitrate (info->info);
 }
 
 /**
- * gst_player_audio_info_get_max_bitrate:
- * @info: a #GstPlayerAudioInfo
+ * gtk_gst_player_audio_info_get_max_bitrate:
+ * @info: a #GtkGstPlayerAudioInfo
  *
- * Returns: the audio maximum bitrate in #GstPlayerAudioInfo or -1 if unknown.
+ * Returns: the audio maximum bitrate in #GtkGstPlayerAudioInfo or -1 if unknown.
  */
 gint
-gst_player_audio_info_get_max_bitrate (const GstPlayerAudioInfo * info)
+gtk_gst_player_audio_info_get_max_bitrate (const GtkGstPlayerAudioInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_AUDIO_INFO (info), -1);
 
-  return gst_play_audio_info_get_max_bitrate (info->info);
+  return gtk_gst_play_audio_info_get_max_bitrate (info->info);
 }
 
 /* Subtitle information */
-G_DEFINE_TYPE (GstPlayerSubtitleInfo, gst_player_subtitle_info,
+G_DEFINE_TYPE (GtkGstPlayerSubtitleInfo, gtk_gst_player_subtitle_info,
     GST_TYPE_PLAYER_STREAM_INFO);
 
 static void
-gst_player_subtitle_info_init (G_GNUC_UNUSED GstPlayerSubtitleInfo * info)
+gtk_gst_player_subtitle_info_init (G_GNUC_UNUSED GtkGstPlayerSubtitleInfo * info)
 {
   /* nothing to do */
 }
 
 static void
-gst_player_subtitle_info_finalize (GObject * object)
+gtk_gst_player_subtitle_info_finalize (GObject * object)
 {
-  GstPlayerSubtitleInfo *info = GST_PLAYER_SUBTITLE_INFO (object);
+  GtkGstPlayerSubtitleInfo *info = GTK_GST_PLAYER_SUBTITLE_INFO (object);
 
   g_clear_object (&info->info);
 
-  G_OBJECT_CLASS (gst_player_subtitle_info_parent_class)->finalize (object);
+  G_OBJECT_CLASS (gtk_gst_player_subtitle_info_parent_class)->finalize (object);
 }
 
 static void
-gst_player_subtitle_info_class_init (GstPlayerSubtitleInfoClass * klass)
+gtk_gst_player_subtitle_info_class_init (GtkGstPlayerSubtitleInfoClass * klass)
 {
   GObjectClass *gobject_class = (GObjectClass *) klass;
 
-  gobject_class->finalize = gst_player_subtitle_info_finalize;
+  gobject_class->finalize = gtk_gst_player_subtitle_info_finalize;
 }
 
 /**
- * gst_player_subtitle_info_get_language:
- * @info: a #GstPlayerSubtitleInfo
+ * gtk_gst_player_subtitle_info_get_language:
+ * @info: a #GtkGstPlayerSubtitleInfo
  *
  * Returns: (nullable): the language of the stream, or %NULL if unknown.
  */
 const gchar *
-gst_player_subtitle_info_get_language (const GstPlayerSubtitleInfo * info)
+gtk_gst_player_subtitle_info_get_language (const GtkGstPlayerSubtitleInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_SUBTITLE_INFO (info), NULL);
 
-  return gst_play_subtitle_info_get_language (info->info);
+  return gtk_gst_play_subtitle_info_get_language (info->info);
 }
 
 /* Global media information */
-G_DEFINE_TYPE (GstPlayerMediaInfo, gst_player_media_info, G_TYPE_OBJECT);
+G_DEFINE_TYPE (GtkGstPlayerMediaInfo, gtk_gst_player_media_info, G_TYPE_OBJECT);
 
 static void
-gst_player_media_info_init (G_GNUC_UNUSED GstPlayerMediaInfo * info)
+gtk_gst_player_media_info_init (G_GNUC_UNUSED GtkGstPlayerMediaInfo * info)
 {
 
 }
 
 static void
-gst_player_media_info_finalize (GObject * object)
+gtk_gst_player_media_info_finalize (GObject * object)
 {
-  GstPlayerMediaInfo *info = GST_PLAYER_MEDIA_INFO (object);
+  GtkGstPlayerMediaInfo *info = GTK_GST_PLAYER_MEDIA_INFO (object);
 
   if (info->audio_stream_list)
     g_list_free (info->audio_stream_list);
@@ -426,103 +426,103 @@ gst_player_media_info_finalize (GObject * object)
     g_list_free_full (info->stream_list, g_object_unref);
   g_clear_object (&info->info);
 
-  G_OBJECT_CLASS (gst_player_media_info_parent_class)->finalize (object);
+  G_OBJECT_CLASS (gtk_gst_player_media_info_parent_class)->finalize (object);
 }
 
 static void
-gst_player_media_info_class_init (GstPlayerMediaInfoClass * klass)
+gtk_gst_player_media_info_class_init (GtkGstPlayerMediaInfoClass * klass)
 {
   GObjectClass *oclass = (GObjectClass *) klass;
 
-  oclass->finalize = gst_player_media_info_finalize;
+  oclass->finalize = gtk_gst_player_media_info_finalize;
 }
 
-static GstPlayerVideoInfo *
-gst_player_video_info_new (void)
+static GtkGstPlayerVideoInfo *
+gtk_gst_player_video_info_new (void)
 {
   return g_object_new (GST_TYPE_PLAYER_VIDEO_INFO, NULL);
 }
 
-static GstPlayerAudioInfo *
-gst_player_audio_info_new (void)
+static GtkGstPlayerAudioInfo *
+gtk_gst_player_audio_info_new (void)
 {
   return g_object_new (GST_TYPE_PLAYER_AUDIO_INFO, NULL);
 }
 
-static GstPlayerSubtitleInfo *
-gst_player_subtitle_info_new (void)
+static GtkGstPlayerSubtitleInfo *
+gtk_gst_player_subtitle_info_new (void)
 {
   return g_object_new (GST_TYPE_PLAYER_SUBTITLE_INFO, NULL);
 }
 
-static GstPlayerStreamInfo *
-gst_player_video_info_copy (GstPlayerVideoInfo * ref)
+static GtkGstPlayerStreamInfo *
+gtk_gst_player_video_info_copy (GtkGstPlayerVideoInfo * ref)
 {
-  GstPlayerVideoInfo *ret;
+  GtkGstPlayerVideoInfo *ret;
 
-  ret = gst_player_video_info_new ();
+  ret = gtk_gst_player_video_info_new ();
   ret->info = g_object_ref (ref->info);
 
-  return (GstPlayerStreamInfo *) ret;
+  return (GtkGstPlayerStreamInfo *) ret;
 }
 
-static GstPlayerStreamInfo *
-gst_player_audio_info_copy (GstPlayerAudioInfo * ref)
+static GtkGstPlayerStreamInfo *
+gtk_gst_player_audio_info_copy (GtkGstPlayerAudioInfo * ref)
 {
-  GstPlayerAudioInfo *ret;
+  GtkGstPlayerAudioInfo *ret;
 
-  ret = gst_player_audio_info_new ();
+  ret = gtk_gst_player_audio_info_new ();
   ret->info = g_object_ref (ref->info);
 
-  return (GstPlayerStreamInfo *) ret;
+  return (GtkGstPlayerStreamInfo *) ret;
 }
 
-static GstPlayerStreamInfo *
-gst_player_subtitle_info_copy (GstPlayerSubtitleInfo * ref)
+static GtkGstPlayerStreamInfo *
+gtk_gst_player_subtitle_info_copy (GtkGstPlayerSubtitleInfo * ref)
 {
-  GstPlayerSubtitleInfo *ret;
+  GtkGstPlayerSubtitleInfo *ret;
 
-  ret = gst_player_subtitle_info_new ();
+  ret = gtk_gst_player_subtitle_info_new ();
   ret->info = g_object_ref (ref->info);
 
-  return (GstPlayerStreamInfo *) ret;
+  return (GtkGstPlayerStreamInfo *) ret;
 }
 
-GstPlayerStreamInfo *
-gst_player_stream_info_copy (GstPlayerStreamInfo * ref)
+GtkGstPlayerStreamInfo *
+gtk_gst_player_stream_info_copy (GtkGstPlayerStreamInfo * ref)
 {
-  GstPlayerStreamInfo *info = NULL;
+  GtkGstPlayerStreamInfo *info = NULL;
 
   if (!ref)
     return NULL;
 
   if (GST_IS_PLAYER_VIDEO_INFO (ref))
-    info = gst_player_video_info_copy ((GstPlayerVideoInfo *) ref);
+    info = gtk_gst_player_video_info_copy ((GtkGstPlayerVideoInfo *) ref);
   else if (GST_IS_PLAYER_AUDIO_INFO (ref))
-    info = gst_player_audio_info_copy ((GstPlayerAudioInfo *) ref);
+    info = gtk_gst_player_audio_info_copy ((GtkGstPlayerAudioInfo *) ref);
   else
-    info = gst_player_subtitle_info_copy ((GstPlayerSubtitleInfo *) ref);
+    info = gtk_gst_player_subtitle_info_copy ((GtkGstPlayerSubtitleInfo *) ref);
 
   info->stream_index = ref->stream_index;
 
   return info;
 }
 
-GstPlayerMediaInfo *
-gst_player_media_info_copy (GstPlayerMediaInfo * ref)
+GtkGstPlayerMediaInfo *
+gtk_gst_player_media_info_copy (GtkGstPlayerMediaInfo * ref)
 {
   GList *l;
-  GstPlayerMediaInfo *info;
+  GtkGstPlayerMediaInfo *info;
 
   if (!ref)
     return NULL;
 
-  info = gst_player_media_info_new ();
+  info = gtk_gst_player_media_info_new ();
 
-  for (l = gst_player_media_info_get_stream_list (ref); l != NULL; l = l->next) {
-    GstPlayerStreamInfo *s;
+  for (l = gtk_gst_player_media_info_get_stream_list (ref); l != NULL; l = l->next) {
+    GtkGstPlayerStreamInfo *s;
 
-    s = gst_player_stream_info_copy ((GstPlayerStreamInfo *) l->data);
+    s = gtk_gst_player_stream_info_copy ((GtkGstPlayerStreamInfo *) l->data);
     info->stream_list = g_list_append (info->stream_list, s);
 
     if (GST_IS_PLAYER_AUDIO_INFO (s))
@@ -539,27 +539,27 @@ gst_player_media_info_copy (GstPlayerMediaInfo * ref)
   return info;
 }
 
-GstPlayerStreamInfo *
-gst_player_stream_info_new (gint stream_index, GType type)
+GtkGstPlayerStreamInfo *
+gtk_gst_player_stream_info_new (gint stream_index, GType type)
 {
-  GstPlayerStreamInfo *info = NULL;
+  GtkGstPlayerStreamInfo *info = NULL;
 
   if (type == GST_TYPE_PLAYER_AUDIO_INFO)
-    info = (GstPlayerStreamInfo *) gst_player_audio_info_new ();
+    info = (GtkGstPlayerStreamInfo *) gtk_gst_player_audio_info_new ();
   else if (type == GST_TYPE_PLAYER_VIDEO_INFO)
-    info = (GstPlayerStreamInfo *) gst_player_video_info_new ();
+    info = (GtkGstPlayerStreamInfo *) gtk_gst_player_video_info_new ();
   else
-    info = (GstPlayerStreamInfo *) gst_player_subtitle_info_new ();
+    info = (GtkGstPlayerStreamInfo *) gtk_gst_player_subtitle_info_new ();
 
   info->stream_index = stream_index;
 
   return info;
 }
 
-GstPlayerStreamInfo *
-gst_player_stream_info_wrapped (GstPlayStreamInfo * info)
+GtkGstPlayerStreamInfo *
+gtk_gst_player_stream_info_wrapped (GtkGstPlayStreamInfo * info)
 {
-  GstPlayerStreamInfo *ret;
+  GtkGstPlayerStreamInfo *ret;
   GType type;
 
   if (GST_IS_PLAY_AUDIO_INFO (info)) {
@@ -571,43 +571,43 @@ gst_player_stream_info_wrapped (GstPlayStreamInfo * info)
   }
 
   ret =
-      gst_player_stream_info_new (gst_play_stream_info_get_index (info), type);
+      gtk_gst_player_stream_info_new (gtk_gst_play_stream_info_get_index (info), type);
   ret->info = g_object_ref (info);
   return ret;
 }
 
-GstPlayerMediaInfo *
-gst_player_media_info_new (void)
+GtkGstPlayerMediaInfo *
+gtk_gst_player_media_info_new (void)
 {
   return g_object_new (GST_TYPE_PLAYER_MEDIA_INFO, NULL);
 }
 
-GstPlayerMediaInfo *
-gst_player_media_info_wrapped (GstPlayMediaInfo * info)
+GtkGstPlayerMediaInfo *
+gtk_gst_player_media_info_wrapped (GtkGstPlayMediaInfo * info)
 {
-  GstPlayerMediaInfo *ret;
+  GtkGstPlayerMediaInfo *ret;
   GList *l;
 
-  ret = gst_player_media_info_new ();
+  ret = gtk_gst_player_media_info_new ();
   ret->info = g_object_ref (info);
 
-  for (l = gst_play_media_info_get_stream_list (info); l != NULL; l = l->next) {
-    GstPlayerStreamInfo *s;
+  for (l = gtk_gst_play_media_info_get_stream_list (info); l != NULL; l = l->next) {
+    GtkGstPlayerStreamInfo *s;
 
-    s = gst_player_stream_info_wrapped ((GstPlayStreamInfo *) l->data);
+    s = gtk_gst_player_stream_info_wrapped ((GtkGstPlayStreamInfo *) l->data);
     ret->stream_list = g_list_append (ret->stream_list, s);
 
     if (GST_IS_PLAYER_AUDIO_INFO (s)) {
-      GstPlayerAudioInfo *i = GST_PLAYER_AUDIO_INFO (s);
-      i->info = g_object_ref (GST_PLAY_AUDIO_INFO (l->data));
+      GtkGstPlayerAudioInfo *i = GTK_GST_PLAYER_AUDIO_INFO (s);
+      i->info = g_object_ref (GTL_GST_PLAY_AUDIO_INFO (l->data));
       ret->audio_stream_list = g_list_append (ret->audio_stream_list, i);
     } else if (GST_IS_PLAYER_VIDEO_INFO (s)) {
-      GstPlayerVideoInfo *i = GST_PLAYER_VIDEO_INFO (s);
-      i->info = g_object_ref (GST_PLAY_VIDEO_INFO (l->data));
+      GtkGstPlayerVideoInfo *i = GTK_GST_PLAYER_VIDEO_INFO (s);
+      i->info = g_object_ref (GTL_GST_PLAY_VIDEO_INFO (l->data));
       ret->video_stream_list = g_list_append (ret->video_stream_list, i);
     } else {
-      GstPlayerSubtitleInfo *i = GST_PLAYER_SUBTITLE_INFO (s);
-      i->info = g_object_ref (GST_PLAY_SUBTITLE_INFO (l->data));
+      GtkGstPlayerSubtitleInfo *i = GTK_GST_PLAYER_SUBTITLE_INFO (s);
+      i->info = g_object_ref (GTL_GST_PLAY_SUBTITLE_INFO (l->data));
       ret->subtitle_stream_list = g_list_append (ret->subtitle_stream_list, i);
     }
   }
@@ -615,93 +615,93 @@ gst_player_media_info_wrapped (GstPlayMediaInfo * info)
   return ret;
 }
 
-GstPlayerAudioInfo *
-gst_player_audio_info_wrapped (GstPlayAudioInfo * info)
+GtkGstPlayerAudioInfo *
+gtk_gst_player_audio_info_wrapped (GtkGstPlayAudioInfo * info)
 {
-  GstPlayerStreamInfo *s;
-  GstPlayerAudioInfo *i;
+  GtkGstPlayerStreamInfo *s;
+  GtkGstPlayerAudioInfo *i;
 
-  s = gst_player_stream_info_wrapped ((GstPlayStreamInfo *) info);
-  i = GST_PLAYER_AUDIO_INFO (s);
+  s = gtk_gst_player_stream_info_wrapped ((GtkGstPlayStreamInfo *) info);
+  i = GTK_GST_PLAYER_AUDIO_INFO (s);
   i->info = g_object_ref (info);
   return i;
 }
 
-GstPlayerVideoInfo *
-gst_player_video_info_wrapped (GstPlayVideoInfo * info)
+GtkGstPlayerVideoInfo *
+gtk_gst_player_video_info_wrapped (GtkGstPlayVideoInfo * info)
 {
-  GstPlayerStreamInfo *s;
-  GstPlayerVideoInfo *i;
+  GtkGstPlayerStreamInfo *s;
+  GtkGstPlayerVideoInfo *i;
 
-  s = gst_player_stream_info_wrapped ((GstPlayStreamInfo *) info);
-  i = GST_PLAYER_VIDEO_INFO (s);
+  s = gtk_gst_player_stream_info_wrapped ((GtkGstPlayStreamInfo *) info);
+  i = GTK_GST_PLAYER_VIDEO_INFO (s);
   i->info = g_object_ref (info);
   return i;
 }
 
-GstPlayerSubtitleInfo *
-gst_player_subtitle_info_wrapped (GstPlaySubtitleInfo * info)
+GtkGstPlayerSubtitleInfo *
+gtk_gst_player_subtitle_info_wrapped (GtkGstPlaySubtitleInfo * info)
 {
-  GstPlayerStreamInfo *s;
-  GstPlayerSubtitleInfo *i;
+  GtkGstPlayerStreamInfo *s;
+  GtkGstPlayerSubtitleInfo *i;
 
-  s = gst_player_stream_info_wrapped ((GstPlayStreamInfo *) info);
-  i = GST_PLAYER_SUBTITLE_INFO (s);
+  s = gtk_gst_player_stream_info_wrapped ((GtkGstPlayStreamInfo *) info);
+  i = GTK_GST_PLAYER_SUBTITLE_INFO (s);
   i->info = g_object_ref (info);
   return i;
 }
 
 /**
- * gst_player_media_info_get_uri:
- * @info: a #GstPlayerMediaInfo
+ * gtk_gst_player_media_info_get_uri:
+ * @info: a #GtkGstPlayerMediaInfo
  *
- * Returns: the URI associated with #GstPlayerMediaInfo.
+ * Returns: the URI associated with #GtkGstPlayerMediaInfo.
  */
 const gchar *
-gst_player_media_info_get_uri (const GstPlayerMediaInfo * info)
+gtk_gst_player_media_info_get_uri (const GtkGstPlayerMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_MEDIA_INFO (info), NULL);
 
-  return gst_play_media_info_get_uri (info->info);
+  return gtk_gst_play_media_info_get_uri (info->info);
 }
 
 /**
- * gst_player_media_info_is_seekable:
- * @info: a #GstPlayerMediaInfo
+ * gtk_gst_player_media_info_is_seekable:
+ * @info: a #GtkGstPlayerMediaInfo
  *
  * Returns: %TRUE if the media is seekable.
  */
 gboolean
-gst_player_media_info_is_seekable (const GstPlayerMediaInfo * info)
+gtk_gst_player_media_info_is_seekable (const GtkGstPlayerMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_MEDIA_INFO (info), FALSE);
 
-  return gst_play_media_info_is_seekable (info->info);
+  return gtk_gst_play_media_info_is_seekable (info->info);
 }
 
 /**
- * gst_player_media_info_is_live:
- * @info: a #GstPlayerMediaInfo
+ * gtk_gst_player_media_info_is_live:
+ * @info: a #GtkGstPlayerMediaInfo
  *
  * Returns: %TRUE if the media is live.
  */
 gboolean
-gst_player_media_info_is_live (const GstPlayerMediaInfo * info)
+gtk_gst_player_media_info_is_live (const GtkGstPlayerMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_MEDIA_INFO (info), FALSE);
 
-  return gst_play_media_info_is_live (info->info);
+  return gtk_gst_play_media_info_is_live (info->info);
 }
 
 /**
- * gst_player_media_info_get_stream_list:
- * @info: a #GstPlayerMediaInfo
+ * gtk_gst_player_media_info_get_stream_list:
+ * @info: a #GtkGstPlayerMediaInfo
  *
- * Returns: (transfer none) (element-type GstPlayerStreamInfo): A #GList of
- * matching #GstPlayerStreamInfo.
+ * Returns: (transfer none) (element-type GtkGstPlayerStreamInfo): A #GList of
+ * matching #GtkGstPlayerStreamInfo.
  */
 GList *
-gst_player_media_info_get_stream_list (const GstPlayerMediaInfo * info)
+gtk_gst_player_media_info_get_stream_list (const GtkGstPlayerMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_MEDIA_INFO (info), NULL);
 
@@ -709,14 +709,14 @@ gst_player_media_info_get_stream_list (const GstPlayerMediaInfo * info)
 }
 
 /**
- * gst_player_media_info_get_video_streams:
- * @info: a #GstPlayerMediaInfo
+ * gtk_gst_player_media_info_get_video_streams:
+ * @info: a #GtkGstPlayerMediaInfo
  *
- * Returns: (transfer none) (element-type GstPlayerVideoInfo): A #GList of
- * matching #GstPlayerVideoInfo.
+ * Returns: (transfer none) (element-type GtkGstPlayerVideoInfo): A #GList of
+ * matching #GtkGstPlayerVideoInfo.
  */
 GList *
-gst_player_media_info_get_video_streams (const GstPlayerMediaInfo * info)
+gtk_gst_player_media_info_get_video_streams (const GtkGstPlayerMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_MEDIA_INFO (info), NULL);
 
@@ -724,14 +724,14 @@ gst_player_media_info_get_video_streams (const GstPlayerMediaInfo * info)
 }
 
 /**
- * gst_player_media_info_get_subtitle_streams:
- * @info: a #GstPlayerMediaInfo
+ * gtk_gst_player_media_info_get_subtitle_streams:
+ * @info: a #GtkGstPlayerMediaInfo
  *
- * Returns: (transfer none) (element-type GstPlayerSubtitleInfo): A #GList of
- * matching #GstPlayerSubtitleInfo.
+ * Returns: (transfer none) (element-type GtkGstPlayerSubtitleInfo): A #GList of
+ * matching #GtkGstPlayerSubtitleInfo.
  */
 GList *
-gst_player_media_info_get_subtitle_streams (const GstPlayerMediaInfo * info)
+gtk_gst_player_media_info_get_subtitle_streams (const GtkGstPlayerMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_MEDIA_INFO (info), NULL);
 
@@ -739,14 +739,14 @@ gst_player_media_info_get_subtitle_streams (const GstPlayerMediaInfo * info)
 }
 
 /**
- * gst_player_media_info_get_audio_streams:
- * @info: a #GstPlayerMediaInfo
+ * gtk_gst_player_media_info_get_audio_streams:
+ * @info: a #GtkGstPlayerMediaInfo
  *
- * Returns: (transfer none) (element-type GstPlayerAudioInfo): A #GList of
- * matching #GstPlayerAudioInfo.
+ * Returns: (transfer none) (element-type GtkGstPlayerAudioInfo): A #GList of
+ * matching #GtkGstPlayerAudioInfo.
  */
 GList *
-gst_player_media_info_get_audio_streams (const GstPlayerMediaInfo * info)
+gtk_gst_player_media_info_get_audio_streams (const GtkGstPlayerMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_MEDIA_INFO (info), NULL);
 
@@ -754,64 +754,64 @@ gst_player_media_info_get_audio_streams (const GstPlayerMediaInfo * info)
 }
 
 /**
- * gst_player_media_info_get_duration:
- * @info: a #GstPlayerMediaInfo
+ * gtk_gst_player_media_info_get_duration:
+ * @info: a #GtkGstPlayerMediaInfo
  *
  * Returns: duration of the media or %GST_CLOCK_TIME_NONE if unknown.
  */
 GstClockTime
-gst_player_media_info_get_duration (const GstPlayerMediaInfo * info)
+gtk_gst_player_media_info_get_duration (const GtkGstPlayerMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_MEDIA_INFO (info), -1);
 
-  return gst_play_media_info_get_duration (info->info);
+  return gtk_gst_play_media_info_get_duration (info->info);
 }
 
 /**
- * gst_player_media_info_get_tags:
- * @info: a #GstPlayerMediaInfo
+ * gtk_gst_player_media_info_get_tags:
+ * @info: a #GtkGstPlayerMediaInfo
  *
  * Returns: (transfer none) (nullable): the tags contained in media info.
  */
 GstTagList *
-gst_player_media_info_get_tags (const GstPlayerMediaInfo * info)
+gtk_gst_player_media_info_get_tags (const GtkGstPlayerMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_MEDIA_INFO (info), NULL);
 
-  return gst_play_media_info_get_tags (info->info);
+  return gtk_gst_play_media_info_get_tags (info->info);
 }
 
 /**
- * gst_player_media_info_get_title:
- * @info: a #GstPlayerMediaInfo
+ * gtk_gst_player_media_info_get_title:
+ * @info: a #GtkGstPlayerMediaInfo
  *
  * Returns: (nullable): the media title or %NULL if unknown.
  */
 const gchar *
-gst_player_media_info_get_title (const GstPlayerMediaInfo * info)
+gtk_gst_player_media_info_get_title (const GtkGstPlayerMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_MEDIA_INFO (info), NULL);
 
-  return gst_play_media_info_get_title (info->info);
+  return gtk_gst_play_media_info_get_title (info->info);
 }
 
 /**
- * gst_player_media_info_get_container_format:
- * @info: a #GstPlayerMediaInfo
+ * gtk_gst_player_media_info_get_container_format:
+ * @info: a #GtkGstPlayerMediaInfo
  *
  * Returns: (nullable): the container format or %NULL if unknown.
  */
 const gchar *
-gst_player_media_info_get_container_format (const GstPlayerMediaInfo * info)
+gtk_gst_player_media_info_get_container_format (const GtkGstPlayerMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_MEDIA_INFO (info), NULL);
 
-  return gst_play_media_info_get_container_format (info->info);
+  return gtk_gst_play_media_info_get_container_format (info->info);
 }
 
 /**
- * gst_player_media_info_get_image_sample:
- * @info: a #GstPlayerMediaInfo
+ * gtk_gst_player_media_info_get_image_sample:
+ * @info: a #GtkGstPlayerMediaInfo
  *
  * Function to get the image (or preview-image) stored in taglist.
  * Application can use `gst_sample_*_()` API's to get caps, buffer etc.
@@ -819,23 +819,23 @@ gst_player_media_info_get_container_format (const GstPlayerMediaInfo * info)
  * Returns: (transfer none) (nullable): GstSample or %NULL.
  */
 GstSample *
-gst_player_media_info_get_image_sample (const GstPlayerMediaInfo * info)
+gtk_gst_player_media_info_get_image_sample (const GtkGstPlayerMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_MEDIA_INFO (info), NULL);
 
-  return gst_play_media_info_get_image_sample (info->info);
+  return gtk_gst_play_media_info_get_image_sample (info->info);
 }
 
 /**
- * gst_player_media_info_get_number_of_streams:
- * @info: a #GstPlayerMediaInfo
+ * gtk_gst_player_media_info_get_number_of_streams:
+ * @info: a #GtkGstPlayerMediaInfo
  *
  * Returns: number of total streams or 0 if unknown.
  *
  * Since: 1.12
  */
 guint
-gst_player_media_info_get_number_of_streams (const GstPlayerMediaInfo * info)
+gtk_gst_player_media_info_get_number_of_streams (const GtkGstPlayerMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_MEDIA_INFO (info), 0);
 
@@ -843,15 +843,15 @@ gst_player_media_info_get_number_of_streams (const GstPlayerMediaInfo * info)
 }
 
 /**
- * gst_player_media_info_get_number_of_video_streams:
- * @info: a #GstPlayerMediaInfo
+ * gtk_gst_player_media_info_get_number_of_video_streams:
+ * @info: a #GtkGstPlayerMediaInfo
  *
  * Returns: number of video streams or 0 if unknown.
  *
  * Since: 1.12
  */
 guint
-gst_player_media_info_get_number_of_video_streams (const GstPlayerMediaInfo *
+gtk_gst_player_media_info_get_number_of_video_streams (const GtkGstPlayerMediaInfo *
     info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_MEDIA_INFO (info), 0);
@@ -860,15 +860,15 @@ gst_player_media_info_get_number_of_video_streams (const GstPlayerMediaInfo *
 }
 
 /**
- * gst_player_media_info_get_number_of_audio_streams:
- * @info: a #GstPlayerMediaInfo
+ * gtk_gst_player_media_info_get_number_of_audio_streams:
+ * @info: a #GtkGstPlayerMediaInfo
  *
  * Returns: number of audio streams or 0 if unknown.
  *
  * Since: 1.12
  */
 guint
-gst_player_media_info_get_number_of_audio_streams (const GstPlayerMediaInfo *
+gtk_gst_player_media_info_get_number_of_audio_streams (const GtkGstPlayerMediaInfo *
     info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_MEDIA_INFO (info), 0);
@@ -877,15 +877,15 @@ gst_player_media_info_get_number_of_audio_streams (const GstPlayerMediaInfo *
 }
 
 /**
- * gst_player_media_info_get_number_of_subtitle_streams:
- * @info: a #GstPlayerMediaInfo
+ * gtk_gst_player_media_info_get_number_of_subtitle_streams:
+ * @info: a #GtkGstPlayerMediaInfo
  *
  * Returns: number of subtitle streams or 0 if unknown.
  *
  * Since: 1.12
  */
-guint gst_player_media_info_get_number_of_subtitle_streams
-    (const GstPlayerMediaInfo * info)
+guint gtk_gst_player_media_info_get_number_of_subtitle_streams
+    (const GtkGstPlayerMediaInfo * info)
 {
   g_return_val_if_fail (GST_IS_PLAYER_MEDIA_INFO (info), 0);
 
@@ -893,46 +893,46 @@ guint gst_player_media_info_get_number_of_subtitle_streams
 }
 
 /**
- * gst_player_get_video_streams:
- * @info: a #GstPlayerMediaInfo
+ * gtk_gst_player_get_video_streams:
+ * @info: a #GtkGstPlayerMediaInfo
  *
- * Returns: (transfer none) (element-type GstPlayerVideoInfo): A #GList of
- * matching #GstPlayerVideoInfo.
+ * Returns: (transfer none) (element-type GtkGstPlayerVideoInfo): A #GList of
+ * matching #GtkGstPlayerVideoInfo.
  */
 #ifndef GST_REMOVE_DEPRECATED
 GList *
-gst_player_get_video_streams (const GstPlayerMediaInfo * info)
+gtk_gst_player_get_video_streams (const GtkGstPlayerMediaInfo * info)
 {
-  return gst_player_media_info_get_video_streams (info);
+  return gtk_gst_player_media_info_get_video_streams (info);
 }
 #endif
 
 /**
- * gst_player_get_audio_streams:
- * @info: a #GstPlayerMediaInfo
+ * gtk_gst_player_get_audio_streams:
+ * @info: a #GtkGstPlayerMediaInfo
  *
- * Returns: (transfer none) (element-type GstPlayerAudioInfo): A #GList of
- * matching #GstPlayerAudioInfo.
+ * Returns: (transfer none) (element-type GtkGstPlayerAudioInfo): A #GList of
+ * matching #GtkGstPlayerAudioInfo.
  */
 #ifndef GST_REMOVE_DEPRECATED
 GList *
-gst_player_get_audio_streams (const GstPlayerMediaInfo * info)
+gtk_gst_player_get_audio_streams (const GtkGstPlayerMediaInfo * info)
 {
-  return gst_player_media_info_get_audio_streams (info);
+  return gtk_gst_player_media_info_get_audio_streams (info);
 }
 #endif
 
 /**
- * gst_player_get_subtitle_streams:
- * @info: a #GstPlayerMediaInfo
+ * gtk_gst_player_get_subtitle_streams:
+ * @info: a #GtkGstPlayerMediaInfo
  *
- * Returns: (transfer none) (element-type GstPlayerSubtitleInfo): A #GList of
- * matching #GstPlayerSubtitleInfo.
+ * Returns: (transfer none) (element-type GtkGstPlayerSubtitleInfo): A #GList of
+ * matching #GtkGstPlayerSubtitleInfo.
  */
 #ifndef GST_REMOVE_DEPRECATED
 GList *
-gst_player_get_subtitle_streams (const GstPlayerMediaInfo * info)
+gtk_gst_player_get_subtitle_streams (const GtkGstPlayerMediaInfo * info)
 {
-  return gst_player_media_info_get_subtitle_streams (info);
+  return gtk_gst_player_media_info_get_subtitle_streams (info);
 }
 #endif
diff --git a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-media-info.h b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-media-info.h
index ab034b1..c35e842 100644
--- a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-media-info.h
+++ b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-media-info.h
@@ -18,8 +18,8 @@
  * Boston, MA 02110-1301, USA.
  */
 
-#ifndef __GST_PLAYER_MEDIA_INFO_H__
-#define __GST_PLAYER_MEDIA_INFO_H__
+#ifndef __GTK_GST_PLAYER_MEDIA_INFO_H__
+#define __GTK_GST_PLAYER_MEDIA_INFO_H__
 
 #include <gst/gst.h>
 #include <gst/player/player-prelude.h>
@@ -27,229 +27,229 @@
 G_BEGIN_DECLS
 
 #define GST_TYPE_PLAYER_STREAM_INFO \
-  (gst_player_stream_info_get_type ())
-#define GST_PLAYER_STREAM_INFO(obj) \
-  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_PLAYER_STREAM_INFO,GstPlayerStreamInfo))
-#define GST_PLAYER_STREAM_INFO_CLASS(klass) \
-  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_PLAYER_STREAM_INFO,GstPlayerStreamInfo))
+  (gtk_gst_player_stream_info_get_type ())
+#define GTK_GST_PLAYER_STREAM_INFO(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_PLAYER_STREAM_INFO,GtkGstPlayerStreamInfo))
+#define GTK_GST_PLAYER_STREAM_INFO_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_PLAYER_STREAM_INFO,GtkGstPlayerStreamInfo))
 #define GST_IS_PLAYER_STREAM_INFO(obj) \
   (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_PLAYER_STREAM_INFO))
 #define GST_IS_PLAYER_STREAM_INFO_CLASS(klass) \
   (G_TYPE_CHECK_CLASS_TYPE((klass),GST_TYPE_PLAYER_STREAM_INFO))
 
 /**
- * GstPlayerStreamInfo:
+ * GtkGstPlayerStreamInfo:
  *
  * Base structure for information concerning a media stream. Depending on
  * the stream type, one can find more media-specific information in
- * #GstPlayerVideoInfo, #GstPlayerAudioInfo, #GstPlayerSubtitleInfo.
+ * #GtkGstPlayerVideoInfo, #GtkGstPlayerAudioInfo, #GtkGstPlayerSubtitleInfo.
  */
-typedef struct _GstPlayerStreamInfo GstPlayerStreamInfo;
-typedef struct _GstPlayerStreamInfoClass GstPlayerStreamInfoClass;
+typedef struct _GtkGstPlayerStreamInfo GtkGstPlayerStreamInfo;
+typedef struct _GtkGstPlayerStreamInfoClass GtkGstPlayerStreamInfoClass;
 
-GST_PLAYER_API
-GType         gst_player_stream_info_get_type (void);
+GTK_GST_PLAYER_API
+GType         gtk_gst_player_stream_info_get_type (void);
 
-GST_PLAYER_API
-gint          gst_player_stream_info_get_index (const GstPlayerStreamInfo *info);
+GTK_GST_PLAYER_API
+gint          gtk_gst_player_stream_info_get_index (const GtkGstPlayerStreamInfo *info);
 
-GST_PLAYER_API
-const gchar*  gst_player_stream_info_get_stream_type (const GstPlayerStreamInfo *info);
+GTK_GST_PLAYER_API
+const gchar*  gtk_gst_player_stream_info_get_stream_type (const GtkGstPlayerStreamInfo *info);
 
-GST_PLAYER_API
-GstTagList*   gst_player_stream_info_get_tags  (const GstPlayerStreamInfo *info);
+GTK_GST_PLAYER_API
+GstTagList*   gtk_gst_player_stream_info_get_tags  (const GtkGstPlayerStreamInfo *info);
 
-GST_PLAYER_API
-GstCaps*      gst_player_stream_info_get_caps  (const GstPlayerStreamInfo *info);
+GTK_GST_PLAYER_API
+GstCaps*      gtk_gst_player_stream_info_get_caps  (const GtkGstPlayerStreamInfo *info);
 
-GST_PLAYER_API
-const gchar*  gst_player_stream_info_get_codec (const GstPlayerStreamInfo *info);
+GTK_GST_PLAYER_API
+const gchar*  gtk_gst_player_stream_info_get_codec (const GtkGstPlayerStreamInfo *info);
 
 #define GST_TYPE_PLAYER_VIDEO_INFO \
-  (gst_player_video_info_get_type ())
-#define GST_PLAYER_VIDEO_INFO(obj) \
-  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_PLAYER_VIDEO_INFO, GstPlayerVideoInfo))
-#define GST_PLAYER_VIDEO_INFO_CLASS(klass) \
-  (G_TYPE_CHECK_CLASS_CAST((obj),GST_TYPE_PLAYER_VIDEO_INFO, GstPlayerVideoInfoClass))
+  (gtk_gst_player_video_info_get_type ())
+#define GTK_GST_PLAYER_VIDEO_INFO(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_PLAYER_VIDEO_INFO, GtkGstPlayerVideoInfo))
+#define GTK_GST_PLAYER_VIDEO_INFO_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST((obj),GST_TYPE_PLAYER_VIDEO_INFO, GtkGstPlayerVideoInfoClass))
 #define GST_IS_PLAYER_VIDEO_INFO(obj) \
   (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_PLAYER_VIDEO_INFO))
 #define GST_IS_PLAYER_VIDEO_INFO_CLASS(klass) \
   (G_TYPE_CHECK_CLASS_TYPE((obj),GST_TYPE_PLAYER_VIDEO_INFO))
 
 /**
- * GstPlayerVideoInfo:
+ * GtkGstPlayerVideoInfo:
  *
- * #GstPlayerStreamInfo specific to video streams.
+ * #GtkGstPlayerStreamInfo specific to video streams.
  */
-typedef struct _GstPlayerVideoInfo GstPlayerVideoInfo;
-typedef struct _GstPlayerVideoInfoClass GstPlayerVideoInfoClass;
+typedef struct _GtkGstPlayerVideoInfo GtkGstPlayerVideoInfo;
+typedef struct _GtkGstPlayerVideoInfoClass GtkGstPlayerVideoInfoClass;
 
-GST_PLAYER_API
-GType         gst_player_video_info_get_type (void);
+GTK_GST_PLAYER_API
+GType         gtk_gst_player_video_info_get_type (void);
 
-GST_PLAYER_API
-gint          gst_player_video_info_get_bitrate     (const GstPlayerVideoInfo * info);
+GTK_GST_PLAYER_API
+gint          gtk_gst_player_video_info_get_bitrate     (const GtkGstPlayerVideoInfo * info);
 
-GST_PLAYER_API
-gint          gst_player_video_info_get_max_bitrate (const GstPlayerVideoInfo * info);
+GTK_GST_PLAYER_API
+gint          gtk_gst_player_video_info_get_max_bitrate (const GtkGstPlayerVideoInfo * info);
 
-GST_PLAYER_API
-gint          gst_player_video_info_get_width       (const GstPlayerVideoInfo * info);
+GTK_GST_PLAYER_API
+gint          gtk_gst_player_video_info_get_width       (const GtkGstPlayerVideoInfo * info);
 
-GST_PLAYER_API
-gint          gst_player_video_info_get_height      (const GstPlayerVideoInfo * info);
+GTK_GST_PLAYER_API
+gint          gtk_gst_player_video_info_get_height      (const GtkGstPlayerVideoInfo * info);
 
-GST_PLAYER_API
-void          gst_player_video_info_get_framerate   (const GstPlayerVideoInfo * info,
+GTK_GST_PLAYER_API
+void          gtk_gst_player_video_info_get_framerate   (const GtkGstPlayerVideoInfo * info,
                                                      gint * fps_n,
                                                      gint * fps_d);
 
-GST_PLAYER_API
-void          gst_player_video_info_get_pixel_aspect_ratio (const GstPlayerVideoInfo * info,
+GTK_GST_PLAYER_API
+void          gtk_gst_player_video_info_get_pixel_aspect_ratio (const GtkGstPlayerVideoInfo * info,
                                                             guint * par_n,
                                                             guint * par_d);
 
 #define GST_TYPE_PLAYER_AUDIO_INFO \
-  (gst_player_audio_info_get_type ())
-#define GST_PLAYER_AUDIO_INFO(obj) \
-  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_PLAYER_AUDIO_INFO, GstPlayerAudioInfo))
-#define GST_PLAYER_AUDIO_INFO_CLASS(klass) \
-  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_PLAYER_AUDIO_INFO, GstPlayerAudioInfoClass))
+  (gtk_gst_player_audio_info_get_type ())
+#define GTK_GST_PLAYER_AUDIO_INFO(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_PLAYER_AUDIO_INFO, GtkGstPlayerAudioInfo))
+#define GTK_GST_PLAYER_AUDIO_INFO_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_PLAYER_AUDIO_INFO, GtkGstPlayerAudioInfoClass))
 #define GST_IS_PLAYER_AUDIO_INFO(obj) \
   (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_PLAYER_AUDIO_INFO))
 #define GST_IS_PLAYER_AUDIO_INFO_CLASS(klass) \
   (G_TYPE_CHECK_CLASS_TYPE((klass),GST_TYPE_PLAYER_AUDIO_INFO))
 
 /**
- * GstPlayerAudioInfo:
+ * GtkGstPlayerAudioInfo:
  *
- * #GstPlayerStreamInfo specific to audio streams.
+ * #GtkGstPlayerStreamInfo specific to audio streams.
  */
-typedef struct _GstPlayerAudioInfo GstPlayerAudioInfo;
-typedef struct _GstPlayerAudioInfoClass GstPlayerAudioInfoClass;
+typedef struct _GtkGstPlayerAudioInfo GtkGstPlayerAudioInfo;
+typedef struct _GtkGstPlayerAudioInfoClass GtkGstPlayerAudioInfoClass;
 
-GST_PLAYER_API
-GType         gst_player_audio_info_get_type (void);
+GTK_GST_PLAYER_API
+GType         gtk_gst_player_audio_info_get_type (void);
 
-GST_PLAYER_API
-gint          gst_player_audio_info_get_channels    (const GstPlayerAudioInfo* info);
+GTK_GST_PLAYER_API
+gint          gtk_gst_player_audio_info_get_channels    (const GtkGstPlayerAudioInfo* info);
 
-GST_PLAYER_API
-gint          gst_player_audio_info_get_sample_rate (const GstPlayerAudioInfo* info);
+GTK_GST_PLAYER_API
+gint          gtk_gst_player_audio_info_get_sample_rate (const GtkGstPlayerAudioInfo* info);
 
-GST_PLAYER_API
-gint          gst_player_audio_info_get_bitrate     (const GstPlayerAudioInfo* info);
+GTK_GST_PLAYER_API
+gint          gtk_gst_player_audio_info_get_bitrate     (const GtkGstPlayerAudioInfo* info);
 
-GST_PLAYER_API
-gint          gst_player_audio_info_get_max_bitrate (const GstPlayerAudioInfo* info);
+GTK_GST_PLAYER_API
+gint          gtk_gst_player_audio_info_get_max_bitrate (const GtkGstPlayerAudioInfo* info);
 
-GST_PLAYER_API
-const gchar*  gst_player_audio_info_get_language    (const GstPlayerAudioInfo* info);
+GTK_GST_PLAYER_API
+const gchar*  gtk_gst_player_audio_info_get_language    (const GtkGstPlayerAudioInfo* info);
 
 #define GST_TYPE_PLAYER_SUBTITLE_INFO \
-  (gst_player_subtitle_info_get_type ())
-#define GST_PLAYER_SUBTITLE_INFO(obj) \
-  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_PLAYER_SUBTITLE_INFO, GstPlayerSubtitleInfo))
-#define GST_PLAYER_SUBTITLE_INFO_CLASS(klass) \
-  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_PLAYER_SUBTITLE_INFO,GstPlayerSubtitleInfoClass))
+  (gtk_gst_player_subtitle_info_get_type ())
+#define GTK_GST_PLAYER_SUBTITLE_INFO(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_PLAYER_SUBTITLE_INFO, GtkGstPlayerSubtitleInfo))
+#define GTK_GST_PLAYER_SUBTITLE_INFO_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_PLAYER_SUBTITLE_INFO,GtkGstPlayerSubtitleInfoClass))
 #define GST_IS_PLAYER_SUBTITLE_INFO(obj) \
   (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_PLAYER_SUBTITLE_INFO))
 #define GST_IS_PLAYER_SUBTITLE_INFO_CLASS(klass) \
   (G_TYPE_CHECK_CLASS_TYPE((klass),GST_TYPE_PLAYER_SUBTITLE_INFO))
 
 /**
- * GstPlayerSubtitleInfo:
+ * GtkGstPlayerSubtitleInfo:
  *
- * #GstPlayerStreamInfo specific to subtitle streams.
+ * #GtkGstPlayerStreamInfo specific to subtitle streams.
  */
-typedef struct _GstPlayerSubtitleInfo GstPlayerSubtitleInfo;
-typedef struct _GstPlayerSubtitleInfoClass GstPlayerSubtitleInfoClass;
+typedef struct _GtkGstPlayerSubtitleInfo GtkGstPlayerSubtitleInfo;
+typedef struct _GtkGstPlayerSubtitleInfoClass GtkGstPlayerSubtitleInfoClass;
 
-GST_PLAYER_API
-GType         gst_player_subtitle_info_get_type (void);
+GTK_GST_PLAYER_API
+GType         gtk_gst_player_subtitle_info_get_type (void);
 
-GST_PLAYER_API
-const gchar * gst_player_subtitle_info_get_language (const GstPlayerSubtitleInfo* info);
+GTK_GST_PLAYER_API
+const gchar * gtk_gst_player_subtitle_info_get_language (const GtkGstPlayerSubtitleInfo* info);
 
 #define GST_TYPE_PLAYER_MEDIA_INFO \
-  (gst_player_media_info_get_type())
-#define GST_PLAYER_MEDIA_INFO(obj) \
-  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_PLAYER_MEDIA_INFO,GstPlayerMediaInfo))
-#define GST_PLAYER_MEDIA_INFO_CLASS(klass) \
-  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_PLAYER_MEDIA_INFO,GstPlayerMediaInfoClass))
+  (gtk_gst_player_media_info_get_type())
+#define GTK_GST_PLAYER_MEDIA_INFO(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_PLAYER_MEDIA_INFO,GtkGstPlayerMediaInfo))
+#define GTK_GST_PLAYER_MEDIA_INFO_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_PLAYER_MEDIA_INFO,GtkGstPlayerMediaInfoClass))
 #define GST_IS_PLAYER_MEDIA_INFO(obj) \
   (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_PLAYER_MEDIA_INFO))
 #define GST_IS_PLAYER_MEDIA_INFO_CLASS(klass) \
   (G_TYPE_CHECK_CLASS_TYPE((klass),GST_TYPE_PLAYER_MEDIA_INFO))
 
 /**
- * GstPlayerMediaInfo:
+ * GtkGstPlayerMediaInfo:
  *
  * Structure containing the media information of a URI.
  */
-typedef struct _GstPlayerMediaInfo GstPlayerMediaInfo;
-typedef struct _GstPlayerMediaInfoClass GstPlayerMediaInfoClass;
+typedef struct _GtkGstPlayerMediaInfo GtkGstPlayerMediaInfo;
+typedef struct _GtkGstPlayerMediaInfoClass GtkGstPlayerMediaInfoClass;
 
-GST_PLAYER_API
-GType         gst_player_media_info_get_type (void);
+GTK_GST_PLAYER_API
+GType         gtk_gst_player_media_info_get_type (void);
 
-GST_PLAYER_API
-const gchar * gst_player_media_info_get_uri (const GstPlayerMediaInfo *info);
+GTK_GST_PLAYER_API
+const gchar * gtk_gst_player_media_info_get_uri (const GtkGstPlayerMediaInfo *info);
 
-GST_PLAYER_API
-gboolean      gst_player_media_info_is_seekable (const GstPlayerMediaInfo *info);
+GTK_GST_PLAYER_API
+gboolean      gtk_gst_player_media_info_is_seekable (const GtkGstPlayerMediaInfo *info);
 
-GST_PLAYER_API
-gboolean      gst_player_media_info_is_live (const GstPlayerMediaInfo *info);
+GTK_GST_PLAYER_API
+gboolean      gtk_gst_player_media_info_is_live (const GtkGstPlayerMediaInfo *info);
 
-GST_PLAYER_API
-GstClockTime  gst_player_media_info_get_duration (const GstPlayerMediaInfo *info);
+GTK_GST_PLAYER_API
+GstClockTime  gtk_gst_player_media_info_get_duration (const GtkGstPlayerMediaInfo *info);
 
-GST_PLAYER_API
-GList*        gst_player_media_info_get_stream_list (const GstPlayerMediaInfo *info);
+GTK_GST_PLAYER_API
+GList*        gtk_gst_player_media_info_get_stream_list (const GtkGstPlayerMediaInfo *info);
 
-GST_PLAYER_API
-guint         gst_player_media_info_get_number_of_streams (const GstPlayerMediaInfo *info);
+GTK_GST_PLAYER_API
+guint         gtk_gst_player_media_info_get_number_of_streams (const GtkGstPlayerMediaInfo *info);
 
-GST_PLAYER_API
-GList*        gst_player_media_info_get_video_streams (const GstPlayerMediaInfo *info);
+GTK_GST_PLAYER_API
+GList*        gtk_gst_player_media_info_get_video_streams (const GtkGstPlayerMediaInfo *info);
 
-GST_PLAYER_API
-guint         gst_player_media_info_get_number_of_video_streams (const GstPlayerMediaInfo *info);
+GTK_GST_PLAYER_API
+guint         gtk_gst_player_media_info_get_number_of_video_streams (const GtkGstPlayerMediaInfo *info);
 
-GST_PLAYER_API
-GList*        gst_player_media_info_get_audio_streams (const GstPlayerMediaInfo *info);
+GTK_GST_PLAYER_API
+GList*        gtk_gst_player_media_info_get_audio_streams (const GtkGstPlayerMediaInfo *info);
 
-GST_PLAYER_API
-guint         gst_player_media_info_get_number_of_audio_streams (const GstPlayerMediaInfo *info);
+GTK_GST_PLAYER_API
+guint         gtk_gst_player_media_info_get_number_of_audio_streams (const GtkGstPlayerMediaInfo *info);
 
-GST_PLAYER_API
-GList*        gst_player_media_info_get_subtitle_streams (const GstPlayerMediaInfo *info);
+GTK_GST_PLAYER_API
+GList*        gtk_gst_player_media_info_get_subtitle_streams (const GtkGstPlayerMediaInfo *info);
 
-GST_PLAYER_API
-guint         gst_player_media_info_get_number_of_subtitle_streams (const GstPlayerMediaInfo *info);
+GTK_GST_PLAYER_API
+guint         gtk_gst_player_media_info_get_number_of_subtitle_streams (const GtkGstPlayerMediaInfo *info);
 
-GST_PLAYER_API
-GstTagList*   gst_player_media_info_get_tags (const GstPlayerMediaInfo *info);
+GTK_GST_PLAYER_API
+GstTagList*   gtk_gst_player_media_info_get_tags (const GtkGstPlayerMediaInfo *info);
 
-GST_PLAYER_API
-const gchar*  gst_player_media_info_get_title (const GstPlayerMediaInfo *info);
+GTK_GST_PLAYER_API
+const gchar*  gtk_gst_player_media_info_get_title (const GtkGstPlayerMediaInfo *info);
 
-GST_PLAYER_API
-const gchar*  gst_player_media_info_get_container_format (const GstPlayerMediaInfo *info);
+GTK_GST_PLAYER_API
+const gchar*  gtk_gst_player_media_info_get_container_format (const GtkGstPlayerMediaInfo *info);
 
-GST_PLAYER_API
-GstSample*    gst_player_media_info_get_image_sample (const GstPlayerMediaInfo *info);
+GTK_GST_PLAYER_API
+GstSample*    gtk_gst_player_media_info_get_image_sample (const GtkGstPlayerMediaInfo *info);
 
-GST_PLAYER_DEPRECATED_FOR(gst_player_media_info_get_video_streams)
-GList*        gst_player_get_video_streams    (const GstPlayerMediaInfo *info);
+GTK_GST_PLAYER_DEPRECATED_FOR(gtk_gst_player_media_info_get_video_streams)
+GList*        gtk_gst_player_get_video_streams    (const GtkGstPlayerMediaInfo *info);
 
-GST_PLAYER_DEPRECATED_FOR(gst_player_media_info_get_audio_streams)
-GList*        gst_player_get_audio_streams    (const GstPlayerMediaInfo *info);
+GTK_GST_PLAYER_DEPRECATED_FOR(gtk_gst_player_media_info_get_audio_streams)
+GList*        gtk_gst_player_get_audio_streams    (const GtkGstPlayerMediaInfo *info);
 
-GST_PLAYER_DEPRECATED_FOR(gst_player_media_info_get_subtitle_streams)
-GList*        gst_player_get_subtitle_streams (const GstPlayerMediaInfo *info);
+GTK_GST_PLAYER_DEPRECATED_FOR(gtk_gst_player_media_info_get_subtitle_streams)
+GList*        gtk_gst_player_get_subtitle_streams (const GtkGstPlayerMediaInfo *info);
 
 G_END_DECLS
 
-#endif /* __GST_PLAYER_MEDIA_INFO_H */
+#endif /* __GTK_GST_PLAYER_MEDIA_INFO_H */
diff --git a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-signal-dispatcher-private.h b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-signal-dispatcher-private.h
index 7399161..88011da 100644
--- a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-signal-dispatcher-private.h
+++ b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-signal-dispatcher-private.h
@@ -18,17 +18,17 @@
  * Boston, MA 02110-1301, USA.
  */
 
-#ifndef __GST_PLAYER_SIGNAL_DISPATCHER_PRIVATE_H__
-#define __GST_PLAYER_SIGNAL_DISPATCHER_PRIVATE_H__
+#ifndef __GTK_GST_PLAYER_SIGNAL_DISPATCHER_PRIVATE_H__
+#define __GTK_GST_PLAYER_SIGNAL_DISPATCHER_PRIVATE_H__
 
 #include <gst/player/gstplayer-signal-dispatcher.h>
 
 G_BEGIN_DECLS
 
-G_GNUC_INTERNAL void gst_player_signal_dispatcher_dispatch (GstPlayerSignalDispatcher * self,
-    GstPlayer * player, GstPlayerSignalDispatcherFunc emitter, gpointer data,
+G_GNUC_INTERNAL void gtk_gst_player_signal_dispatcher_dispatch (GtkGstPlayerSignalDispatcher * self,
+    GtkGstPlayer * player, GtkGstPlayerSignalDispatcherFunc emitter, gpointer data,
     GDestroyNotify destroy);
 
 G_END_DECLS
 
-#endif /* __GST_PLAYER_SIGNAL_DISPATCHER_PRIVATE_H__ */
+#endif /* __GTK_GST_PLAYER_SIGNAL_DISPATCHER_PRIVATE_H__ */
diff --git a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-signal-dispatcher.c b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-signal-dispatcher.c
index 33e7b73..39fb883 100644
--- a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-signal-dispatcher.c
+++ b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-signal-dispatcher.c
@@ -25,22 +25,22 @@
 #include "gstplayer-signal-dispatcher.h"
 #include "gstplayer-signal-dispatcher-private.h"
 
-G_DEFINE_INTERFACE (GstPlayerSignalDispatcher, gst_player_signal_dispatcher,
+G_DEFINE_INTERFACE (GtkGstPlayerSignalDispatcher, gtk_gst_player_signal_dispatcher,
     G_TYPE_OBJECT);
 
 static void
-gst_player_signal_dispatcher_default_init (G_GNUC_UNUSED
-    GstPlayerSignalDispatcherInterface * iface)
+gtk_gst_player_signal_dispatcher_default_init (G_GNUC_UNUSED
+    GtkGstPlayerSignalDispatcherInterface * iface)
 {
 
 }
 
 void
-gst_player_signal_dispatcher_dispatch (GstPlayerSignalDispatcher * self,
-    GstPlayer * player, GstPlayerSignalDispatcherFunc emitter, gpointer data,
+gtk_gst_player_signal_dispatcher_dispatch (GtkGstPlayerSignalDispatcher * self,
+    GtkGstPlayer * player, GtkGstPlayerSignalDispatcherFunc emitter, gpointer data,
     GDestroyNotify destroy)
 {
-  GstPlayerSignalDispatcherInterface *iface;
+  GtkGstPlayerSignalDispatcherInterface *iface;
 
   if (!self) {
     emitter (data);
@@ -50,7 +50,7 @@ gst_player_signal_dispatcher_dispatch (GstPlayerSignalDispatcher * self,
   }
 
   g_return_if_fail (GST_IS_PLAYER_SIGNAL_DISPATCHER (self));
-  iface = GST_PLAYER_SIGNAL_DISPATCHER_GET_INTERFACE (self);
+  iface = GTK_GST_PLAYER_SIGNAL_DISPATCHER_GET_INTERFACE (self);
   g_return_if_fail (iface->dispatch != NULL);
 
   iface->dispatch (self, player, emitter, data, destroy);
diff --git a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-signal-dispatcher.h b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-signal-dispatcher.h
index 554f1e3..8714108 100644
--- a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-signal-dispatcher.h
+++ b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-signal-dispatcher.h
@@ -18,37 +18,37 @@
  * Boston, MA 02110-1301, USA.
  */
 
-#ifndef __GST_PLAYER_SIGNAL_DISPATCHER_H__
-#define __GST_PLAYER_SIGNAL_DISPATCHER_H__
+#ifndef __GTK_GST_PLAYER_SIGNAL_DISPATCHER_H__
+#define __GTK_GST_PLAYER_SIGNAL_DISPATCHER_H__
 
 #include <gst/gst.h>
 #include <gst/player/gstplayer-types.h>
 
 G_BEGIN_DECLS
 
-typedef struct _GstPlayerSignalDispatcher GstPlayerSignalDispatcher;
-typedef struct _GstPlayerSignalDispatcherInterface GstPlayerSignalDispatcherInterface;
+typedef struct _GtkGstPlayerSignalDispatcher GtkGstPlayerSignalDispatcher;
+typedef struct _GtkGstPlayerSignalDispatcherInterface GtkGstPlayerSignalDispatcherInterface;
 
-#define GST_TYPE_PLAYER_SIGNAL_DISPATCHER                (gst_player_signal_dispatcher_get_type ())
-#define GST_PLAYER_SIGNAL_DISPATCHER(obj)                (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PLAYER_SIGNAL_DISPATCHER, GstPlayerSignalDispatcher))
+#define GST_TYPE_PLAYER_SIGNAL_DISPATCHER                (gtk_gst_player_signal_dispatcher_get_type ())
+#define GTK_GST_PLAYER_SIGNAL_DISPATCHER(obj)                (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PLAYER_SIGNAL_DISPATCHER, GtkGstPlayerSignalDispatcher))
 #define GST_IS_PLAYER_SIGNAL_DISPATCHER(obj)             (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_PLAYER_SIGNAL_DISPATCHER))
-#define GST_PLAYER_SIGNAL_DISPATCHER_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), GST_TYPE_PLAYER_SIGNAL_DISPATCHER, GstPlayerSignalDispatcherInterface))
+#define GTK_GST_PLAYER_SIGNAL_DISPATCHER_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), GST_TYPE_PLAYER_SIGNAL_DISPATCHER, GtkGstPlayerSignalDispatcherInterface))
 
-typedef void (*GstPlayerSignalDispatcherFunc) (gpointer data);
+typedef void (*GtkGstPlayerSignalDispatcherFunc) (gpointer data);
 
-struct _GstPlayerSignalDispatcherInterface {
+struct _GtkGstPlayerSignalDispatcherInterface {
   GTypeInterface parent_iface;
 
-  void (*dispatch) (GstPlayerSignalDispatcher * self,
-                    GstPlayer * player,
-                    GstPlayerSignalDispatcherFunc emitter,
+  void (*dispatch) (GtkGstPlayerSignalDispatcher * self,
+                    GtkGstPlayer * player,
+                    GtkGstPlayerSignalDispatcherFunc emitter,
                     gpointer data,
                     GDestroyNotify destroy);
 };
 
-GST_PLAYER_API
-GType        gst_player_signal_dispatcher_get_type    (void);
+GTK_GST_PLAYER_API
+GType        gtk_gst_player_signal_dispatcher_get_type    (void);
 
 G_END_DECLS
 
-#endif /* __GST_PLAYER_SIGNAL_DISPATCHER_H__ */
+#endif /* __GTK_GST_PLAYER_SIGNAL_DISPATCHER_H__ */
diff --git a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-types.h b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-types.h
index bed2dc3..ff932c4 100644
--- a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-types.h
+++ b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-types.h
@@ -18,19 +18,19 @@
  * Boston, MA 02110-1301, USA.
  */
 
-#ifndef __GST_PLAYER_TYPES_H__
-#define __GST_PLAYER_TYPES_H__
+#ifndef __GTK_GST_PLAYER_TYPES_H__
+#define __GTK_GST_PLAYER_TYPES_H__
 
 #include <gst/gst.h>
 #include <gst/player/player-prelude.h>
 
 G_BEGIN_DECLS
 
-typedef struct _GstPlayer GstPlayer;
-typedef struct _GstPlayerClass GstPlayerClass;
+typedef struct _GtkGstPlayer GtkGstPlayer;
+typedef struct _GtkGstPlayerClass GtkGstPlayerClass;
 
 G_END_DECLS
 
-#endif /* __GST_PLAYER_TYPES_H__ */
+#endif /* __GTK_GST_PLAYER_TYPES_H__ */
 
 
diff --git a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-video-overlay-video-renderer.c b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-video-overlay-video-renderer.c
index a1651c4..958d6b1 100644
--- a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-video-overlay-video-renderer.c
+++ b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-video-overlay-video-renderer.c
@@ -20,7 +20,7 @@
 
 /**
  * SECTION:gstplayer-videooverlayvideorenderer
- * @title: GstPlayerVideoOverlayVideoRenderer
+ * @title: GtkGstPlayerVideoOverlayVideoRenderer
  * @short_description: Player Video Overlay Video Renderer
  *
  */
@@ -34,7 +34,7 @@
 
 #include <gst/video/video.h>
 
-struct _GstPlayerVideoOverlayVideoRenderer
+struct _GtkGstPlayerVideoOverlayVideoRenderer
 {
   GObject parent;
 
@@ -45,14 +45,14 @@ struct _GstPlayerVideoOverlayVideoRenderer
   GstElement *video_sink;       /* configured video sink, or NULL      */
 };
 
-struct _GstPlayerVideoOverlayVideoRendererClass
+struct _GtkGstPlayerVideoOverlayVideoRendererClass
 {
   GObjectClass parent_class;
 };
 
 static void
-    gst_player_video_overlay_video_renderer_interface_init
-    (GstPlayerVideoRendererInterface * iface);
+    gtk_gst_player_video_overlay_video_renderer_interface_init
+    (GtkGstPlayerVideoRendererInterface * iface);
 
 enum
 {
@@ -62,21 +62,21 @@ enum
   VIDEO_OVERLAY_VIDEO_RENDERER_PROP_LAST
 };
 
-G_DEFINE_TYPE_WITH_CODE (GstPlayerVideoOverlayVideoRenderer,
-    gst_player_video_overlay_video_renderer, G_TYPE_OBJECT,
+G_DEFINE_TYPE_WITH_CODE (GtkGstPlayerVideoOverlayVideoRenderer,
+    gtk_gst_player_video_overlay_video_renderer, G_TYPE_OBJECT,
     G_IMPLEMENT_INTERFACE (GST_TYPE_PLAYER_VIDEO_RENDERER,
-        gst_player_video_overlay_video_renderer_interface_init));
+        gtk_gst_player_video_overlay_video_renderer_interface_init));
 
 static GParamSpec
     * video_overlay_video_renderer_param_specs
     [VIDEO_OVERLAY_VIDEO_RENDERER_PROP_LAST] = { NULL, };
 
 static void
-gst_player_video_overlay_video_renderer_set_property (GObject * object,
+gtk_gst_player_video_overlay_video_renderer_set_property (GObject * object,
     guint prop_id, const GValue * value, GParamSpec * pspec)
 {
-  GstPlayerVideoOverlayVideoRenderer *self =
-      GST_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER (object);
+  GtkGstPlayerVideoOverlayVideoRenderer *self =
+      GTK_GST_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER (object);
 
   switch (prop_id) {
     case VIDEO_OVERLAY_VIDEO_RENDERER_PROP_WINDOW_HANDLE:
@@ -95,11 +95,11 @@ gst_player_video_overlay_video_renderer_set_property (GObject * object,
 }
 
 static void
-gst_player_video_overlay_video_renderer_get_property (GObject * object,
+gtk_gst_player_video_overlay_video_renderer_get_property (GObject * object,
     guint prop_id, GValue * value, GParamSpec * pspec)
 {
-  GstPlayerVideoOverlayVideoRenderer *self =
-      GST_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER (object);
+  GtkGstPlayerVideoOverlayVideoRenderer *self =
+      GTK_GST_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER (object);
 
   switch (prop_id) {
     case VIDEO_OVERLAY_VIDEO_RENDERER_PROP_WINDOW_HANDLE:
@@ -115,10 +115,10 @@ gst_player_video_overlay_video_renderer_get_property (GObject * object,
 }
 
 static void
-gst_player_video_overlay_video_renderer_finalize (GObject * object)
+gtk_gst_player_video_overlay_video_renderer_finalize (GObject * object)
 {
-  GstPlayerVideoOverlayVideoRenderer *self =
-      GST_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER (object);
+  GtkGstPlayerVideoOverlayVideoRenderer *self =
+      GTK_GST_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER (object);
 
   if (self->video_overlay)
     gst_object_unref (self->video_overlay);
@@ -127,20 +127,20 @@ gst_player_video_overlay_video_renderer_finalize (GObject * object)
     gst_object_unref (self->video_sink);
 
   G_OBJECT_CLASS
-      (gst_player_video_overlay_video_renderer_parent_class)->finalize (object);
+      (gtk_gst_player_video_overlay_video_renderer_parent_class)->finalize (object);
 }
 
 static void
-    gst_player_video_overlay_video_renderer_class_init
-    (GstPlayerVideoOverlayVideoRendererClass * klass)
+    gtk_gst_player_video_overlay_video_renderer_class_init
+    (GtkGstPlayerVideoOverlayVideoRendererClass * klass)
 {
   GObjectClass *gobject_class = G_OBJECT_CLASS (klass);
 
   gobject_class->set_property =
-      gst_player_video_overlay_video_renderer_set_property;
+      gtk_gst_player_video_overlay_video_renderer_set_property;
   gobject_class->get_property =
-      gst_player_video_overlay_video_renderer_get_property;
-  gobject_class->finalize = gst_player_video_overlay_video_renderer_finalize;
+      gtk_gst_player_video_overlay_video_renderer_get_property;
+  gobject_class->finalize = gtk_gst_player_video_overlay_video_renderer_finalize;
 
   video_overlay_video_renderer_param_specs
       [VIDEO_OVERLAY_VIDEO_RENDERER_PROP_WINDOW_HANDLE] =
@@ -160,24 +160,24 @@ static void
 }
 
 static void
-    gst_player_video_overlay_video_renderer_init
-    (GstPlayerVideoOverlayVideoRenderer * self)
+    gtk_gst_player_video_overlay_video_renderer_init
+    (GtkGstPlayerVideoOverlayVideoRenderer * self)
 {
   self->x = self->y = self->width = self->height = -1;
   self->video_sink = NULL;
 }
 
-static GstElement *gst_player_video_overlay_video_renderer_create_video_sink
-    (GstPlayerVideoRenderer * iface, GstPlayer * player)
+static GstElement *gtk_gst_player_video_overlay_video_renderer_create_video_sink
+    (GtkGstPlayerVideoRenderer * iface, GtkGstPlayer * player)
 {
   GstElement *video_overlay;
-  GstPlayerVideoOverlayVideoRenderer *self =
-      GST_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER (iface);
+  GtkGstPlayerVideoOverlayVideoRenderer *self =
+      GTK_GST_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER (iface);
 
   if (self->video_overlay)
     gst_object_unref (self->video_overlay);
 
-  video_overlay = gst_player_get_pipeline (player);
+  video_overlay = gtk_gst_player_get_pipeline (player);
   g_return_val_if_fail (GST_IS_VIDEO_OVERLAY (video_overlay), NULL);
 
   self->video_overlay = GST_VIDEO_OVERLAY (video_overlay);
@@ -192,28 +192,28 @@ static GstElement *gst_player_video_overlay_video_renderer_create_video_sink
 }
 
 static void
-    gst_player_video_overlay_video_renderer_interface_init
-    (GstPlayerVideoRendererInterface * iface)
+    gtk_gst_player_video_overlay_video_renderer_interface_init
+    (GtkGstPlayerVideoRendererInterface * iface)
 {
   iface->create_video_sink =
-      gst_player_video_overlay_video_renderer_create_video_sink;
+      gtk_gst_player_video_overlay_video_renderer_create_video_sink;
 }
 
 /**
- * gst_player_video_overlay_video_renderer_new:
+ * gtk_gst_player_video_overlay_video_renderer_new:
  * @window_handle: (allow-none): Window handle to use or %NULL
  *
  * Returns: (transfer full):
  */
-GstPlayerVideoRenderer *
-gst_player_video_overlay_video_renderer_new (gpointer window_handle)
+GtkGstPlayerVideoRenderer *
+gtk_gst_player_video_overlay_video_renderer_new (gpointer window_handle)
 {
   return g_object_new (GST_TYPE_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER,
       "window-handle", window_handle, NULL);
 }
 
 /**
- * gst_player_video_overlay_video_renderer_new_with_sink:
+ * gtk_gst_player_video_overlay_video_renderer_new_with_sink:
  * @window_handle: (allow-none): Window handle to use or %NULL
  * @video_sink: (transfer floating): the custom video_sink element to be set for the video renderer
  *
@@ -221,8 +221,8 @@ gst_player_video_overlay_video_renderer_new (gpointer window_handle)
  *
  * Since: 1.12
  */
-GstPlayerVideoRenderer *
-gst_player_video_overlay_video_renderer_new_with_sink (gpointer window_handle,
+GtkGstPlayerVideoRenderer *
+gtk_gst_player_video_overlay_video_renderer_new_with_sink (gpointer window_handle,
     GstElement * video_sink)
 {
   return g_object_new (GST_TYPE_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER,
@@ -230,15 +230,15 @@ gst_player_video_overlay_video_renderer_new_with_sink (gpointer window_handle,
 }
 
 /**
- * gst_player_video_overlay_video_renderer_set_window_handle:
- * @self: #GstPlayerVideoRenderer instance
+ * gtk_gst_player_video_overlay_video_renderer_set_window_handle:
+ * @self: #GtkGstPlayerVideoRenderer instance
  * @window_handle: handle referencing to the platform specific window
  *
  * Sets the platform specific window handle into which the video
  * should be rendered
  **/
-void gst_player_video_overlay_video_renderer_set_window_handle
-    (GstPlayerVideoOverlayVideoRenderer * self, gpointer window_handle)
+void gtk_gst_player_video_overlay_video_renderer_set_window_handle
+    (GtkGstPlayerVideoOverlayVideoRenderer * self, gpointer window_handle)
 {
   g_return_if_fail (GST_IS_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER (self));
 
@@ -246,15 +246,15 @@ void gst_player_video_overlay_video_renderer_set_window_handle
 }
 
 /**
- * gst_player_video_overlay_video_renderer_get_window_handle:
- * @self: #GstPlayerVideoRenderer instance
+ * gtk_gst_player_video_overlay_video_renderer_get_window_handle:
+ * @self: #GtkGstPlayerVideoRenderer instance
  *
  * Returns: (transfer none): The currently set, platform specific window
  * handle
  */
 gpointer
-    gst_player_video_overlay_video_renderer_get_window_handle
-    (GstPlayerVideoOverlayVideoRenderer * self) {
+    gtk_gst_player_video_overlay_video_renderer_get_window_handle
+    (GtkGstPlayerVideoOverlayVideoRenderer * self) {
   gpointer window_handle;
 
   g_return_val_if_fail (GST_IS_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER (self),
@@ -266,14 +266,14 @@ gpointer
 }
 
 /**
- * gst_player_video_overlay_video_renderer_expose:
- * @self: a #GstPlayerVideoOverlayVideoRenderer instance.
+ * gtk_gst_player_video_overlay_video_renderer_expose:
+ * @self: a #GtkGstPlayerVideoOverlayVideoRenderer instance.
  *
  * Tell an overlay that it has been exposed. This will redraw the current frame
  * in the drawable even if the pipeline is PAUSED.
  */
-void gst_player_video_overlay_video_renderer_expose
-    (GstPlayerVideoOverlayVideoRenderer * self)
+void gtk_gst_player_video_overlay_video_renderer_expose
+    (GtkGstPlayerVideoOverlayVideoRenderer * self)
 {
   g_return_if_fail (GST_IS_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER (self));
 
@@ -282,27 +282,27 @@ void gst_player_video_overlay_video_renderer_expose
 }
 
 /**
- * gst_player_video_overlay_video_renderer_set_render_rectangle:
- * @self: a #GstPlayerVideoOverlayVideoRenderer instance
+ * gtk_gst_player_video_overlay_video_renderer_set_render_rectangle:
+ * @self: a #GtkGstPlayerVideoOverlayVideoRenderer instance
  * @x: the horizontal offset of the render area inside the window
  * @y: the vertical offset of the render area inside the window
  * @width: the width of the render area inside the window
  * @height: the height of the render area inside the window
  *
  * Configure a subregion as a video target within the window set by
- * gst_player_video_overlay_video_renderer_set_window_handle(). If this is not
+ * gtk_gst_player_video_overlay_video_renderer_set_window_handle(). If this is not
  * used or not supported the video will fill the area of the window set as the
  * overlay to 100%. By specifying the rectangle, the video can be overlaid to
  * a specific region of that window only. After setting the new rectangle one
- * should call gst_player_video_overlay_video_renderer_expose() to force a
+ * should call gtk_gst_player_video_overlay_video_renderer_expose() to force a
  * redraw. To unset the region pass -1 for the @width and @height parameters.
  *
  * This method is needed for non fullscreen video overlay in UI toolkits that
  * do not support subwindows.
  *
  */
-void gst_player_video_overlay_video_renderer_set_render_rectangle
-    (GstPlayerVideoOverlayVideoRenderer * self, gint x, gint y, gint width,
+void gtk_gst_player_video_overlay_video_renderer_set_render_rectangle
+    (GtkGstPlayerVideoOverlayVideoRenderer * self, gint x, gint y, gint width,
     gint height)
 {
   g_return_if_fail (GST_IS_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER (self));
@@ -318,19 +318,19 @@ void gst_player_video_overlay_video_renderer_set_render_rectangle
 }
 
 /**
- * gst_player_video_overlay_video_renderer_get_render_rectangle:
- * @self: a #GstPlayerVideoOverlayVideoRenderer instance
+ * gtk_gst_player_video_overlay_video_renderer_get_render_rectangle:
+ * @self: a #GtkGstPlayerVideoOverlayVideoRenderer instance
  * @x: (out) (allow-none): the horizontal offset of the render area inside the window
  * @y: (out) (allow-none): the vertical offset of the render area inside the window
  * @width: (out) (allow-none): the width of the render area inside the window
  * @height: (out) (allow-none): the height of the render area inside the window
  *
- * Return the currently configured render rectangle. See gst_player_video_overlay_video_renderer_set_render_rectangle()
+ * Return the currently configured render rectangle. See gtk_gst_player_video_overlay_video_renderer_set_render_rectangle()
  * for details.
  *
  */
-void gst_player_video_overlay_video_renderer_get_render_rectangle
-    (GstPlayerVideoOverlayVideoRenderer * self, gint * x, gint * y,
+void gtk_gst_player_video_overlay_video_renderer_get_render_rectangle
+    (GtkGstPlayerVideoOverlayVideoRenderer * self, gint * x, gint * y,
     gint * width, gint * height)
 {
   g_return_if_fail (GST_IS_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER (self));
diff --git a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-video-overlay-video-renderer.h b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-video-overlay-video-renderer.h
index 7068705..b04171e 100644
--- a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-video-overlay-video-renderer.h
+++ b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-video-overlay-video-renderer.h
@@ -18,51 +18,51 @@
  * Boston, MA 02110-1301, USA.
  */
 
-#ifndef __GST_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER_H__
-#define __GST_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER_H__
+#ifndef __GTK_GST_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER_H__
+#define __GTK_GST_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER_H__
 
 #include <gst/player/gstplayer-types.h>
 #include <gst/player/gstplayer-video-renderer.h>
 
 G_BEGIN_DECLS
 
-typedef struct _GstPlayerVideoOverlayVideoRenderer
-    GstPlayerVideoOverlayVideoRenderer;
-typedef struct _GstPlayerVideoOverlayVideoRendererClass
-    GstPlayerVideoOverlayVideoRendererClass;
+typedef struct _GtkGstPlayerVideoOverlayVideoRenderer
+    GtkGstPlayerVideoOverlayVideoRenderer;
+typedef struct _GtkGstPlayerVideoOverlayVideoRendererClass
+    GtkGstPlayerVideoOverlayVideoRendererClass;
 
-#define GST_TYPE_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER             (gst_player_video_overlay_video_renderer_get_type ())
+#define GST_TYPE_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER             (gtk_gst_player_video_overlay_video_renderer_get_type ())
 #define GST_IS_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER))
 #define GST_IS_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER_CLASS(klass)  (G_TYPE_CHECK_CLASS_TYPE ((klass), GST_TYPE_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER))
-#define GST_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GST_TYPE_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER, GstPlayerVideoOverlayVideoRendererClass))
-#define GST_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER, GstPlayerVideoOverlayVideoRenderer))
-#define GST_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER, GstPlayerVideoOverlayVideoRendererClass))
-#define GST_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER_CAST(obj)        ((GstPlayerVideoOverlayVideoRenderer*)(obj))
+#define GTK_GST_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GST_TYPE_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER, GtkGstPlayerVideoOverlayVideoRendererClass))
+#define GTK_GST_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER, GtkGstPlayerVideoOverlayVideoRenderer))
+#define GTK_GST_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER, GtkGstPlayerVideoOverlayVideoRendererClass))
+#define GTK_GST_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER_CAST(obj)        ((GtkGstPlayerVideoOverlayVideoRenderer*)(obj))
 
-GST_PLAYER_API
-GType gst_player_video_overlay_video_renderer_get_type (void);
+GTK_GST_PLAYER_API
+GType gtk_gst_player_video_overlay_video_renderer_get_type (void);
 
-GST_PLAYER_API
-GstPlayerVideoRenderer * gst_player_video_overlay_video_renderer_new (gpointer window_handle);
+GTK_GST_PLAYER_API
+GtkGstPlayerVideoRenderer * gtk_gst_player_video_overlay_video_renderer_new (gpointer window_handle);
 
-GST_PLAYER_API
-GstPlayerVideoRenderer * gst_player_video_overlay_video_renderer_new_with_sink (gpointer window_handle, GstElement * video_sink);
+GTK_GST_PLAYER_API
+GtkGstPlayerVideoRenderer * gtk_gst_player_video_overlay_video_renderer_new_with_sink (gpointer window_handle, GstElement * video_sink);
 
-GST_PLAYER_API
-void gst_player_video_overlay_video_renderer_set_window_handle (GstPlayerVideoOverlayVideoRenderer * self, gpointer window_handle);
+GTK_GST_PLAYER_API
+void gtk_gst_player_video_overlay_video_renderer_set_window_handle (GtkGstPlayerVideoOverlayVideoRenderer * self, gpointer window_handle);
 
-GST_PLAYER_API
-gpointer gst_player_video_overlay_video_renderer_get_window_handle (GstPlayerVideoOverlayVideoRenderer * self);
+GTK_GST_PLAYER_API
+gpointer gtk_gst_player_video_overlay_video_renderer_get_window_handle (GtkGstPlayerVideoOverlayVideoRenderer * self);
 
-GST_PLAYER_API
-void gst_player_video_overlay_video_renderer_expose (GstPlayerVideoOverlayVideoRenderer * self);
+GTK_GST_PLAYER_API
+void gtk_gst_player_video_overlay_video_renderer_expose (GtkGstPlayerVideoOverlayVideoRenderer * self);
 
-GST_PLAYER_API
-void gst_player_video_overlay_video_renderer_set_render_rectangle (GstPlayerVideoOverlayVideoRenderer * self, gint x, gint y, gint width, gint height);
+GTK_GST_PLAYER_API
+void gtk_gst_player_video_overlay_video_renderer_set_render_rectangle (GtkGstPlayerVideoOverlayVideoRenderer * self, gint x, gint y, gint width, gint height);
 
-GST_PLAYER_API
-void gst_player_video_overlay_video_renderer_get_render_rectangle (GstPlayerVideoOverlayVideoRenderer * self, gint *x, gint *y, gint *width, gint *height);
+GTK_GST_PLAYER_API
+void gtk_gst_player_video_overlay_video_renderer_get_render_rectangle (GtkGstPlayerVideoOverlayVideoRenderer * self, gint *x, gint *y, gint *width, gint *height);
 
 G_END_DECLS
 
-#endif /* __GST_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER_H__ */
+#endif /* __GTK_GST_PLAYER_VIDEO_OVERLAY_VIDEO_RENDERER_H__ */
diff --git a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-video-renderer-private.h b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-video-renderer-private.h
index 6ecab15..a6da6f5 100644
--- a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-video-renderer-private.h
+++ b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-video-renderer-private.h
@@ -18,16 +18,16 @@
  * Boston, MA 02110-1301, USA.
  */
 
-#ifndef __GST_PLAYER_VIDEO_RENDERER_PRIVATE_H__
-#define __GST_PLAYER_VIDEO_RENDERER_PRIVATE_H__
+#ifndef __GTK_GST_PLAYER_VIDEO_RENDERER_PRIVATE_H__
+#define __GTK_GST_PLAYER_VIDEO_RENDERER_PRIVATE_H__
 
 #include <gst/player/gstplayer-video-renderer.h>
 
 G_BEGIN_DECLS
 
-G_GNUC_INTERNAL GstElement * gst_player_video_renderer_create_video_sink (GstPlayerVideoRenderer *
-    self, GstPlayer * player);
+G_GNUC_INTERNAL GstElement * gtk_gst_player_video_renderer_create_video_sink (GtkGstPlayerVideoRenderer *
+    self, GtkGstPlayer * player);
 
 G_END_DECLS
 
-#endif /* __GST_PLAYER_VIDEO_RENDERER_PRIVATE_H__ */
+#endif /* __GTK_GST_PLAYER_VIDEO_RENDERER_PRIVATE_H__ */
diff --git a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-video-renderer.c b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-video-renderer.c
index 6faf6a8..28fa4aa 100644
--- a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-video-renderer.c
+++ b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-video-renderer.c
@@ -25,24 +25,24 @@
 #include "gstplayer-video-renderer.h"
 #include "gstplayer-video-renderer-private.h"
 
-G_DEFINE_INTERFACE (GstPlayerVideoRenderer, gst_player_video_renderer,
+G_DEFINE_INTERFACE (GtkGstPlayerVideoRenderer, gtk_gst_player_video_renderer,
     G_TYPE_OBJECT);
 
 static void
-gst_player_video_renderer_default_init (G_GNUC_UNUSED
-    GstPlayerVideoRendererInterface * iface)
+gtk_gst_player_video_renderer_default_init (G_GNUC_UNUSED
+    GtkGstPlayerVideoRendererInterface * iface)
 {
 
 }
 
 GstElement *
-gst_player_video_renderer_create_video_sink (GstPlayerVideoRenderer * self,
-    GstPlayer * player)
+gtk_gst_player_video_renderer_create_video_sink (GtkGstPlayerVideoRenderer * self,
+    GtkGstPlayer * player)
 {
-  GstPlayerVideoRendererInterface *iface;
+  GtkGstPlayerVideoRendererInterface *iface;
 
   g_return_val_if_fail (GST_IS_PLAYER_VIDEO_RENDERER (self), NULL);
-  iface = GST_PLAYER_VIDEO_RENDERER_GET_INTERFACE (self);
+  iface = GTK_GST_PLAYER_VIDEO_RENDERER_GET_INTERFACE (self);
   g_return_val_if_fail (iface->create_video_sink != NULL, NULL);
 
   return iface->create_video_sink (self, player);
diff --git a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-video-renderer.h b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-video-renderer.h
index 611670c..d353f7d 100644
--- a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-video-renderer.h
+++ b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-video-renderer.h
@@ -18,31 +18,31 @@
  * Boston, MA 02110-1301, USA.
  */
 
-#ifndef __GST_PLAYER_VIDEO_RENDERER_H__
-#define __GST_PLAYER_VIDEO_RENDERER_H__
+#ifndef __GTK_GST_PLAYER_VIDEO_RENDERER_H__
+#define __GTK_GST_PLAYER_VIDEO_RENDERER_H__
 
 #include <gst/gst.h>
 #include <gst/player/gstplayer-types.h>
 
 G_BEGIN_DECLS
 
-typedef struct _GstPlayerVideoRenderer GstPlayerVideoRenderer;
-typedef struct _GstPlayerVideoRendererInterface GstPlayerVideoRendererInterface;
+typedef struct _GtkGstPlayerVideoRenderer GtkGstPlayerVideoRenderer;
+typedef struct _GtkGstPlayerVideoRendererInterface GtkGstPlayerVideoRendererInterface;
 
-#define GST_TYPE_PLAYER_VIDEO_RENDERER                (gst_player_video_renderer_get_type ())
-#define GST_PLAYER_VIDEO_RENDERER(obj)                (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PLAYER_VIDEO_RENDERER, GstPlayerVideoRenderer))
+#define GST_TYPE_PLAYER_VIDEO_RENDERER                (gtk_gst_player_video_renderer_get_type ())
+#define GTK_GST_PLAYER_VIDEO_RENDERER(obj)                (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PLAYER_VIDEO_RENDERER, GtkGstPlayerVideoRenderer))
 #define GST_IS_PLAYER_VIDEO_RENDERER(obj)             (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_PLAYER_VIDEO_RENDERER))
-#define GST_PLAYER_VIDEO_RENDERER_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), GST_TYPE_PLAYER_VIDEO_RENDERER, GstPlayerVideoRendererInterface))
+#define GTK_GST_PLAYER_VIDEO_RENDERER_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), GST_TYPE_PLAYER_VIDEO_RENDERER, GtkGstPlayerVideoRendererInterface))
 
-struct _GstPlayerVideoRendererInterface {
+struct _GtkGstPlayerVideoRendererInterface {
   GTypeInterface parent_iface;
 
-  GstElement * (*create_video_sink) (GstPlayerVideoRenderer * self, GstPlayer * player);
+  GstElement * (*create_video_sink) (GtkGstPlayerVideoRenderer * self, GtkGstPlayer * player);
 };
 
-GST_PLAYER_API
-GType        gst_player_video_renderer_get_type       (void);
+GTK_GST_PLAYER_API
+GType        gtk_gst_player_video_renderer_get_type       (void);
 
 G_END_DECLS
 
-#endif /* __GST_PLAYER_VIDEO_RENDERER_H__ */
+#endif /* __GTK_GST_PLAYER_VIDEO_RENDERER_H__ */
diff --git a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-visualization.c b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-visualization.c
index 0f425a6..96e22ad 100644
--- a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-visualization.c
+++ b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-visualization.c
@@ -21,7 +21,7 @@
 
 /**
  * SECTION:gstplayer-visualization
- * @title: GstPlayerVisualization
+ * @title: GtkGstPlayerVisualization
  * @short_description: Player Visualization
  *
  */
@@ -38,18 +38,18 @@ static GMutex vis_lock;
 static GQueue vis_list = G_QUEUE_INIT;
 static guint32 vis_cookie;
 
-G_DEFINE_BOXED_TYPE (GstPlayerVisualization, gst_player_visualization,
-    (GBoxedCopyFunc) gst_player_visualization_copy,
-    (GBoxedFreeFunc) gst_player_visualization_free);
+G_DEFINE_BOXED_TYPE (GtkGstPlayerVisualization, gtk_gst_player_visualization,
+    (GBoxedCopyFunc) gtk_gst_player_visualization_copy,
+    (GBoxedFreeFunc) gtk_gst_player_visualization_free);
 
 /**
- * gst_player_visualization_free:
- * @vis: #GstPlayerVisualization instance
+ * gtk_gst_player_visualization_free:
+ * @vis: #GtkGstPlayerVisualization instance
  *
- * Frees a #GstPlayerVisualization.
+ * Frees a #GtkGstPlayerVisualization.
  */
 void
-gst_player_visualization_free (GstPlayerVisualization * vis)
+gtk_gst_player_visualization_free (GtkGstPlayerVisualization * vis)
 {
   g_return_if_fail (vis != NULL);
 
@@ -59,22 +59,22 @@ gst_player_visualization_free (GstPlayerVisualization * vis)
 }
 
 /**
- * gst_player_visualization_copy:
- * @vis: #GstPlayerVisualization instance
+ * gtk_gst_player_visualization_copy:
+ * @vis: #GtkGstPlayerVisualization instance
  *
- * Makes a copy of the #GstPlayerVisualization. The result must be
- * freed using gst_player_visualization_free().
+ * Makes a copy of the #GtkGstPlayerVisualization. The result must be
+ * freed using gtk_gst_player_visualization_free().
  *
  * Returns: (transfer full): an allocated copy of @vis.
  */
-GstPlayerVisualization *
-gst_player_visualization_copy (const GstPlayerVisualization * vis)
+GtkGstPlayerVisualization *
+gtk_gst_player_visualization_copy (const GtkGstPlayerVisualization * vis)
 {
-  GstPlayerVisualization *ret;
+  GtkGstPlayerVisualization *ret;
 
   g_return_val_if_fail (vis != NULL, NULL);
 
-  ret = g_new0 (GstPlayerVisualization, 1);
+  ret = g_new0 (GtkGstPlayerVisualization, 1);
   ret->name = vis->name ? g_strdup (vis->name) : NULL;
   ret->description = vis->description ? g_strdup (vis->description) : NULL;
 
@@ -82,15 +82,15 @@ gst_player_visualization_copy (const GstPlayerVisualization * vis)
 }
 
 /**
- * gst_player_visualizations_free:
- * @viss: a %NULL terminated array of #GstPlayerVisualization to free
+ * gtk_gst_player_visualizations_free:
+ * @viss: a %NULL terminated array of #GtkGstPlayerVisualization to free
  *
- * Frees a %NULL terminated array of #GstPlayerVisualization.
+ * Frees a %NULL terminated array of #GtkGstPlayerVisualization.
  */
 void
-gst_player_visualizations_free (GstPlayerVisualization ** viss)
+gtk_gst_player_visualizations_free (GtkGstPlayerVisualization ** viss)
 {
-  GstPlayerVisualization **p;
+  GtkGstPlayerVisualization **p;
 
   g_return_if_fail (viss != NULL);
 
@@ -105,12 +105,12 @@ gst_player_visualizations_free (GstPlayerVisualization ** viss)
 }
 
 static void
-gst_player_update_visualization_list (void)
+gtk_gst_player_update_visualization_list (void)
 {
   GList *features;
   GList *l;
   guint32 cookie;
-  GstPlayerVisualization *vis;
+  GtkGstPlayerVisualization *vis;
 
   g_mutex_lock (&vis_lock);
 
@@ -123,7 +123,7 @@ gst_player_update_visualization_list (void)
 
   /* if update is needed then first free the existing list */
   while ((vis = g_queue_pop_head (&vis_list)))
-    gst_player_visualization_free (vis);
+    gtk_gst_player_visualization_free (vis);
 
   features = gst_registry_get_feature_list (gst_registry_get (),
       GST_TYPE_ELEMENT_FACTORY);
@@ -136,7 +136,7 @@ gst_player_update_visualization_list (void)
         GST_ELEMENT_METADATA_KLASS);
 
     if (strstr (klass, "Visualization")) {
-      vis = g_new0 (GstPlayerVisualization, 1);
+      vis = g_new0 (GtkGstPlayerVisualization, 1);
 
       vis->name = g_strdup (gst_plugin_feature_get_name (feature));
       vis->description =
@@ -153,26 +153,26 @@ gst_player_update_visualization_list (void)
 }
 
 /**
- * gst_player_visualizations_get:
+ * gtk_gst_player_visualizations_get:
  *
- * Returns: (transfer full) (array zero-terminated=1) (element-type GstPlayerVisualization):
+ * Returns: (transfer full) (array zero-terminated=1) (element-type GtkGstPlayerVisualization):
  *  a %NULL terminated array containing all available
- *  visualizations. Use gst_player_visualizations_free() after
+ *  visualizations. Use gtk_gst_player_visualizations_free() after
  *  usage.
  */
-GstPlayerVisualization **
-gst_player_visualizations_get (void)
+GtkGstPlayerVisualization **
+gtk_gst_player_visualizations_get (void)
 {
   gint i = 0;
   GList *l;
-  GstPlayerVisualization **ret;
+  GtkGstPlayerVisualization **ret;
 
-  gst_player_update_visualization_list ();
+  gtk_gst_player_update_visualization_list ();
 
   g_mutex_lock (&vis_lock);
-  ret = g_new0 (GstPlayerVisualization *, g_queue_get_length (&vis_list) + 1);
+  ret = g_new0 (GtkGstPlayerVisualization *, g_queue_get_length (&vis_list) + 1);
   for (l = vis_list.head; l; l = l->next)
-    ret[i++] = gst_player_visualization_copy (l->data);
+    ret[i++] = gtk_gst_player_visualization_copy (l->data);
   g_mutex_unlock (&vis_lock);
 
   return ret;
diff --git a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-visualization.h b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-visualization.h
index c09a4f0..396e0b0 100644
--- a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-visualization.h
+++ b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-visualization.h
@@ -19,42 +19,42 @@
  * Boston, MA 02110-1301, USA.
  */
 
-#ifndef __GST_PLAYER_VISUALIZATION_H__
-#define __GST_PLAYER_VISUALIZATION_H__
+#ifndef __GTK_GST_PLAYER_VISUALIZATION_H__
+#define __GTK_GST_PLAYER_VISUALIZATION_H__
 
 #include <gst/gst.h>
 #include <gst/player/player-prelude.h>
 
 G_BEGIN_DECLS
 
-typedef struct _GstPlayerVisualization GstPlayerVisualization;
+typedef struct _GtkGstPlayerVisualization GtkGstPlayerVisualization;
 /**
- * GstPlayerVisualization:
+ * GtkGstPlayerVisualization:
  * @name: name of the visualization.
  * @description: description of the visualization.
  *
- * A #GstPlayerVisualization descriptor.
+ * A #GtkGstPlayerVisualization descriptor.
  */
-struct _GstPlayerVisualization {
+struct _GtkGstPlayerVisualization {
   gchar *name;
   gchar *description;
 };
 
-GST_PLAYER_API
-GType                     gst_player_visualization_get_type (void);
+GTK_GST_PLAYER_API
+GType                     gtk_gst_player_visualization_get_type (void);
 
-GST_PLAYER_API
-GstPlayerVisualization *  gst_player_visualization_copy  (const GstPlayerVisualization *vis);
+GTK_GST_PLAYER_API
+GtkGstPlayerVisualization *  gtk_gst_player_visualization_copy  (const GtkGstPlayerVisualization *vis);
 
-GST_PLAYER_API
-void                      gst_player_visualization_free  (GstPlayerVisualization *vis);
+GTK_GST_PLAYER_API
+void                      gtk_gst_player_visualization_free  (GtkGstPlayerVisualization *vis);
 
-GST_PLAYER_API
-GstPlayerVisualization ** gst_player_visualizations_get  (void);
+GTK_GST_PLAYER_API
+GtkGstPlayerVisualization ** gtk_gst_player_visualizations_get  (void);
 
-GST_PLAYER_API
-void                      gst_player_visualizations_free (GstPlayerVisualization **viss);
+GTK_GST_PLAYER_API
+void                      gtk_gst_player_visualizations_free (GtkGstPlayerVisualization **viss);
 
 G_END_DECLS
 
-#endif /* __GST_PLAYER_VISUALIZATION_H__ */
+#endif /* __GTK_GST_PLAYER_VISUALIZATION_H__ */
diff --git a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-wrapped-video-renderer-private.h b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-wrapped-video-renderer-private.h
index 99fd155..96a700e 100644
--- a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-wrapped-video-renderer-private.h
+++ b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-wrapped-video-renderer-private.h
@@ -18,32 +18,32 @@
  * Boston, MA 02110-1301, USA.
  */
 
-#ifndef __GST_PLAYER_WRAPPED_VIDEO_RENDERER_H__
-#define __GST_PLAYER_WRAPPED_VIDEO_RENDERER_H__
+#ifndef __GTK_GST_PLAYER_WRAPPED_VIDEO_RENDERER_H__
+#define __GTK_GST_PLAYER_WRAPPED_VIDEO_RENDERER_H__
 
 #include <gst/player/gstplayer-types.h>
 #include <gst/player/gstplayer-video-renderer.h>
 
 G_BEGIN_DECLS
 
-typedef struct _GstPlayerWrappedVideoRenderer
-    GstPlayerWrappedVideoRenderer;
-typedef struct _GstPlayerWrappedVideoRendererClass
-    GstPlayerWrappedVideoRendererClass;
+typedef struct _GtkGstPlayerWrappedVideoRenderer
+    GtkGstPlayerWrappedVideoRenderer;
+typedef struct _GtkGstPlayerWrappedVideoRendererClass
+    GtkGstPlayerWrappedVideoRendererClass;
 
-#define GST_TYPE_PLAYER_WRAPPED_VIDEO_RENDERER             (gst_player_wrapped_video_renderer_get_type ())
+#define GST_TYPE_PLAYER_WRAPPED_VIDEO_RENDERER             (gtk_gst_player_wrapped_video_renderer_get_type ())
 #define GST_IS_PLAYER_WRAPPED_VIDEO_RENDERER(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_PLAYER_WRAPPED_VIDEO_RENDERER))
 #define GST_IS_PLAYER_WRAPPED_VIDEO_RENDERER_CLASS(klass)  (G_TYPE_CHECK_CLASS_TYPE ((klass), GST_TYPE_PLAYER_WRAPPED_VIDEO_RENDERER))
-#define GST_PLAYER_WRAPPED_VIDEO_RENDERER_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GST_TYPE_PLAYER_WRAPPED_VIDEO_RENDERER, GstPlayerWrappedVideoRendererClass))
-#define GST_PLAYER_WRAPPED_VIDEO_RENDERER(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PLAYER_WRAPPED_VIDEO_RENDERER, GstPlayerWrappedVideoRenderer))
-#define GST_PLAYER_WRAPPED_VIDEO_RENDERER_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_PLAYER_WRAPPED_VIDEO_RENDERER, GstPlayerWrappedVideoRendererClass))
-#define GST_PLAYER_WRAPPED_VIDEO_RENDERER_CAST(obj)        ((GstPlayerWrappedVideoRenderer*)(obj))
+#define GTK_GST_PLAYER_WRAPPED_VIDEO_RENDERER_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GST_TYPE_PLAYER_WRAPPED_VIDEO_RENDERER, GtkGstPlayerWrappedVideoRendererClass))
+#define GTK_GST_PLAYER_WRAPPED_VIDEO_RENDERER(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PLAYER_WRAPPED_VIDEO_RENDERER, GtkGstPlayerWrappedVideoRenderer))
+#define GTK_GST_PLAYER_WRAPPED_VIDEO_RENDERER_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_PLAYER_WRAPPED_VIDEO_RENDERER, GtkGstPlayerWrappedVideoRendererClass))
+#define GTK_GST_PLAYER_WRAPPED_VIDEO_RENDERER_CAST(obj)        ((GtkGstPlayerWrappedVideoRenderer*)(obj))
 
-GType gst_player_wrapped_video_renderer_get_type (void);
+GType gtk_gst_player_wrapped_video_renderer_get_type (void);
 
-GstPlayerVideoRenderer * gst_player_wrapped_video_renderer_new (GstPlayerVideoRenderer * renderer, GstPlayer * player);
+GtkGstPlayerVideoRenderer * gtk_gst_player_wrapped_video_renderer_new (GtkGstPlayerVideoRenderer * renderer, GtkGstPlayer * player);
 
 
 G_END_DECLS
 
-#endif /* __GST_PLAYER_WRAPPED_VIDEO_RENDERER_H__ */
+#endif /* __GTK_GST_PLAYER_WRAPPED_VIDEO_RENDERER_H__ */
diff --git a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-wrapped-video-renderer.c b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-wrapped-video-renderer.c
index a54f1df..564e172 100644
--- a/subprojects/gstreamer-player-1.0/gst/player/gstplayer-wrapped-video-renderer.c
+++ b/subprojects/gstreamer-player-1.0/gst/player/gstplayer-wrapped-video-renderer.c
@@ -29,86 +29,86 @@
 #include "gstplayer-video-renderer-private.h"
 
 /*
- * This object is an internal wrapper created by the GstPlayer, implementing the
- * new GstPlayVideoRenderer interface and acting as a bridge from the legacy
- * GstPlayerVideoRenderer interface.
+ * This object is an internal wrapper created by the GtkGstPlayer, implementing the
+ * new GtkGstPlayVideoRenderer interface and acting as a bridge from the legacy
+ * GtkGstPlayerVideoRenderer interface.
  */
 
-struct _GstPlayerWrappedVideoRenderer
+struct _GtkGstPlayerWrappedVideoRenderer
 {
   GObject parent;
 
-  GstPlayerVideoRenderer *renderer;
-  GstPlayer *player;
+  GtkGstPlayerVideoRenderer *renderer;
+  GtkGstPlayer *player;
 };
 
-struct _GstPlayerWrappedVideoRendererClass
+struct _GtkGstPlayerWrappedVideoRendererClass
 {
   GObjectClass parent_class;
 };
 
 static void
-    gst_player_wrapped_video_renderer_interface_init
-    (GstPlayVideoRendererInterface * iface);
+    gtk_gst_player_wrapped_video_renderer_interface_init
+    (GtkGstPlayVideoRendererInterface * iface);
 
-G_DEFINE_TYPE_WITH_CODE (GstPlayerWrappedVideoRenderer,
-    gst_player_wrapped_video_renderer, G_TYPE_OBJECT,
+G_DEFINE_TYPE_WITH_CODE (GtkGstPlayerWrappedVideoRenderer,
+    gtk_gst_player_wrapped_video_renderer, G_TYPE_OBJECT,
     G_IMPLEMENT_INTERFACE (GST_TYPE_PLAY_VIDEO_RENDERER,
-        gst_player_wrapped_video_renderer_interface_init));
+        gtk_gst_player_wrapped_video_renderer_interface_init));
 
 static void
-gst_player_wrapped_video_renderer_finalize (GObject * object)
+gtk_gst_player_wrapped_video_renderer_finalize (GObject * object)
 {
-  GstPlayerWrappedVideoRenderer *self =
-      GST_PLAYER_WRAPPED_VIDEO_RENDERER (object);
+  GtkGstPlayerWrappedVideoRenderer *self =
+      GTK_GST_PLAYER_WRAPPED_VIDEO_RENDERER (object);
 
   g_clear_object (&self->renderer);
 
   G_OBJECT_CLASS
-      (gst_player_wrapped_video_renderer_parent_class)->finalize (object);
+      (gtk_gst_player_wrapped_video_renderer_parent_class)->finalize (object);
 }
 
 static void
-gst_player_wrapped_video_renderer_class_init (GstPlayerWrappedVideoRendererClass
+gtk_gst_player_wrapped_video_renderer_class_init (GtkGstPlayerWrappedVideoRendererClass
     * klass)
 {
   GObjectClass *gobject_class = G_OBJECT_CLASS (klass);
 
-  gobject_class->finalize = gst_player_wrapped_video_renderer_finalize;
+  gobject_class->finalize = gtk_gst_player_wrapped_video_renderer_finalize;
 }
 
 static void
-gst_player_wrapped_video_renderer_init (GstPlayerWrappedVideoRenderer * self)
+gtk_gst_player_wrapped_video_renderer_init (GtkGstPlayerWrappedVideoRenderer * self)
 {
 }
 
 static GstElement *
-gst_player_wrapped_video_renderer_create_video_sink (GstPlayVideoRenderer *
-    iface, GstPlay * player)
+gtk_gst_player_wrapped_video_renderer_create_video_sink (GtkGstPlayVideoRenderer *
+    iface, GtkGstPlay * player)
 {
-  GstPlayerWrappedVideoRenderer *self =
-      GST_PLAYER_WRAPPED_VIDEO_RENDERER (iface);
+  GtkGstPlayerWrappedVideoRenderer *self =
+      GTK_GST_PLAYER_WRAPPED_VIDEO_RENDERER (iface);
 
-  return gst_player_video_renderer_create_video_sink (self->renderer,
+  return gtk_gst_player_video_renderer_create_video_sink (self->renderer,
       self->player);
 }
 
 static void
-gst_player_wrapped_video_renderer_interface_init (GstPlayVideoRendererInterface
+gtk_gst_player_wrapped_video_renderer_interface_init (GtkGstPlayVideoRendererInterface
     * iface)
 {
   iface->create_video_sink =
-      gst_player_wrapped_video_renderer_create_video_sink;
+      gtk_gst_player_wrapped_video_renderer_create_video_sink;
 }
 
-GstPlayerVideoRenderer *
-gst_player_wrapped_video_renderer_new (GstPlayerVideoRenderer * renderer,
-    GstPlayer * player)
+GtkGstPlayerVideoRenderer *
+gtk_gst_player_wrapped_video_renderer_new (GtkGstPlayerVideoRenderer * renderer,
+    GtkGstPlayer * player)
 {
-  GstPlayerWrappedVideoRenderer *self =
+  GtkGstPlayerWrappedVideoRenderer *self =
       g_object_new (GST_TYPE_PLAYER_WRAPPED_VIDEO_RENDERER,
       NULL);
   self->renderer = g_object_ref (renderer);
   self->player = player;
-  return (GstPlayerVideoRenderer *) self;
+  return (GtkGstPlayerVideoRenderer *) self;
 }
diff --git a/subprojects/gstreamer-player-1.0/gst/player/gstplayer.c b/subprojects/gstreamer-player-1.0/gst/player/gstplayer.c
index 5fc0584..4245a4a 100644
--- a/subprojects/gstreamer-player-1.0/gst/player/gstplayer.c
+++ b/subprojects/gstreamer-player-1.0/gst/player/gstplayer.c
@@ -21,13 +21,13 @@
 
 /**
  * SECTION:gstplayer
- * @title: GstPlayer
+ * @title: GtkGstPlayer
  * @short_description: Player
  * @symbols:
- * - GstPlayer
+ * - GtkGstPlayer
  *
- * Starting from GStreamer 1.20, application developers are strongly advised to migrate to #GstPlay.
- * #GstPlayer will be deprecated in 1.20 and most likely removed by 1.24.
+ * Starting from GStreamer 1.20, application developers are strongly advised to migrate to #GtkGstPlay.
+ * #GtkGstPlayer will be deprecated in 1.20 and most likely removed by 1.24.
  */
 
 /* TODO:
@@ -62,8 +62,8 @@
 
 #include <string.h>
 
-GST_DEBUG_CATEGORY_STATIC (gst_player_debug);
-#define GST_CAT_DEFAULT gst_player_debug
+GST_DEBUG_CATEGORY_STATIC (gtk_gst_player_debug);
+#define GST_CAT_DEFAULT gtk_gst_player_debug
 
 #define DEFAULT_URI NULL
 #define DEFAULT_POSITION GST_CLOCK_TIME_NONE
@@ -76,10 +76,10 @@ GST_DEBUG_CATEGORY_STATIC (gst_player_debug);
 #define DEFAULT_SUBTITLE_VIDEO_OFFSET 0
 
 /**
- * gst_player_error_quark:
+ * gtk_gst_player_error_quark:
  */
 GQuark
-gst_player_error_quark (void)
+gtk_gst_player_error_quark (void)
 {
   return g_quark_from_static_string ("gst-player-error-quark");
 }
@@ -148,40 +148,40 @@ enum
   SIGNAL_LAST
 };
 
-struct _GstPlayer
+struct _GtkGstPlayer
 {
   GstObject parent;
 
-  GstPlay *play;
-  GstPlaySignalAdapter *signal_adapter;
+  GtkGstPlay *play;
+  GtkGstPlaySignalAdapter *signal_adapter;
 
   /* legacy */
-  GstPlayerSignalDispatcher *signal_dispatcher;
-  GstPlayerVideoRenderer *video_renderer;
+  GtkGstPlayerSignalDispatcher *signal_dispatcher;
+  GtkGstPlayerVideoRenderer *video_renderer;
 };
 
-struct _GstPlayerClass
+struct _GtkGstPlayerClass
 {
   GstObjectClass parent_class;
 };
 
-#define parent_class gst_player_parent_class
-G_DEFINE_TYPE (GstPlayer, gst_player, GST_TYPE_OBJECT);
+#define parent_class gtk_gst_player_parent_class
+G_DEFINE_TYPE (GtkGstPlayer, gtk_gst_player, GST_TYPE_OBJECT);
 
 static guint signals[SIGNAL_LAST] = { 0, };
 static GParamSpec *param_specs[PROP_LAST] = { NULL, };
 
-static void gst_player_finalize (GObject * object);
-static void gst_player_set_property (GObject * object, guint prop_id,
+static void gtk_gst_player_finalize (GObject * object);
+static void gtk_gst_player_set_property (GObject * object, guint prop_id,
     const GValue * value, GParamSpec * pspec);
-static void gst_player_get_property (GObject * object, guint prop_id,
+static void gtk_gst_player_get_property (GObject * object, guint prop_id,
     GValue * value, GParamSpec * pspec);
-static void gst_player_constructed (GObject * object);
+static void gtk_gst_player_constructed (GObject * object);
 
 static void
-gst_player_init (GstPlayer * self)
+gtk_gst_player_init (GtkGstPlayer * self)
 {
-  self->play = gst_play_new (NULL);
+  self->play = gtk_gst_play_new (NULL);
 }
 
 static void
@@ -202,14 +202,14 @@ config_quark_initialize (void)
 }
 
 static void
-gst_player_class_init (GstPlayerClass * klass)
+gtk_gst_player_class_init (GtkGstPlayerClass * klass)
 {
   GObjectClass *gobject_class = (GObjectClass *) klass;
 
-  gobject_class->set_property = gst_player_set_property;
-  gobject_class->get_property = gst_player_get_property;
-  gobject_class->finalize = gst_player_finalize;
-  gobject_class->constructed = gst_player_constructed;
+  gobject_class->set_property = gtk_gst_player_set_property;
+  gobject_class->get_property = gtk_gst_player_get_property;
+  gobject_class->finalize = gtk_gst_player_finalize;
+  gobject_class->constructed = gtk_gst_player_constructed;
 
   param_specs[PROP_VIDEO_RENDERER] =
       g_param_spec_object ("video-renderer",
@@ -372,9 +372,9 @@ gst_player_class_init (GstPlayerClass * klass)
 }
 
 static void
-gst_player_finalize (GObject * object)
+gtk_gst_player_finalize (GObject * object)
 {
-  GstPlayer *self = GST_PLAYER (object);
+  GtkGstPlayer *self = GST_PLAYER (object);
 
   GST_TRACE_OBJECT (self, "Finalizing");
 
@@ -391,10 +391,10 @@ gst_player_finalize (GObject * object)
 }
 
 static void
-gst_player_set_property (GObject * object, guint prop_id,
+gtk_gst_player_set_property (GObject * object, guint prop_id,
     const GValue * value, GParamSpec * pspec)
 {
-  GstPlayer *self = GST_PLAYER (object);
+  GtkGstPlayer *self = GST_PLAYER (object);
 
   switch (prop_id) {
     case PROP_SIGNAL_DISPATCHER:
@@ -411,26 +411,26 @@ gst_player_set_property (GObject * object, guint prop_id,
 }
 
 static void
-gst_player_get_property (GObject * object, guint prop_id,
+gtk_gst_player_get_property (GObject * object, guint prop_id,
     GValue * value, GParamSpec * pspec)
 {
-  GstPlayer *self = GST_PLAYER (object);
+  GtkGstPlayer *self = GST_PLAYER (object);
 
   switch (prop_id) {
     case PROP_VIDEO_RENDERER:
       g_value_set_object (value, self->video_renderer);
       break;
     case PROP_MEDIA_INFO:
-      g_value_take_object (value, gst_player_get_media_info (self));
+      g_value_take_object (value, gtk_gst_player_get_media_info (self));
       break;
     case PROP_CURRENT_AUDIO_TRACK:
-      g_value_take_object (value, gst_player_get_current_audio_track (self));
+      g_value_take_object (value, gtk_gst_player_get_current_audio_track (self));
       break;
     case PROP_CURRENT_VIDEO_TRACK:
-      g_value_take_object (value, gst_player_get_current_video_track (self));
+      g_value_take_object (value, gtk_gst_player_get_current_video_track (self));
       break;
     case PROP_CURRENT_SUBTITLE_TRACK:
-      g_value_take_object (value, gst_player_get_current_subtitle_track (self));
+      g_value_take_object (value, gtk_gst_player_get_current_subtitle_track (self));
       break;
     default:
       g_object_get_property (G_OBJECT (self->play),
@@ -440,136 +440,136 @@ gst_player_get_property (GObject * object, guint prop_id,
 }
 
 static gpointer
-gst_player_init_once (G_GNUC_UNUSED gpointer user_data)
+gtk_gst_player_init_once (G_GNUC_UNUSED gpointer user_data)
 {
   gst_init (NULL, NULL);
 
-  GST_DEBUG_CATEGORY_INIT (gst_player_debug, "gst-player", 0, "GstPlayer");
-  gst_player_error_quark ();
+  GST_DEBUG_CATEGORY_INIT (gtk_gst_player_debug, "gst-player", 0, "GtkGstPlayer");
+  gtk_gst_player_error_quark ();
 
   return NULL;
 }
 
 static void
-uri_loaded_cb (GstPlaySignalAdapter * adapter, const gchar * uri,
-    GstPlayer * self)
+uri_loaded_cb (GtkGstPlaySignalAdapter * adapter, const gchar * uri,
+    GtkGstPlayer * self)
 {
   g_signal_emit (self, signals[SIGNAL_URI_LOADED], 0, uri);
 }
 
 static void
-position_updated_cb (GstPlaySignalAdapter * adapter, GstClockTime position,
-    GstPlayer * self)
+position_updated_cb (GtkGstPlaySignalAdapter * adapter, GstClockTime position,
+    GtkGstPlayer * self)
 {
   g_signal_emit (self, signals[SIGNAL_POSITION_UPDATED], 0, position);
 }
 
 static void
-duration_changed_cb (GstPlaySignalAdapter * adapter, GstClockTime duraton,
-    GstPlayer * self)
+duration_changed_cb (GtkGstPlaySignalAdapter * adapter, GstClockTime duraton,
+    GtkGstPlayer * self)
 {
   g_signal_emit (self, signals[SIGNAL_DURATION_CHANGED], 0, duraton);
 }
 
 static void
-state_changed_cb (GstPlaySignalAdapter * adapter, GstPlayState state,
-    GstPlayer * self)
+state_changed_cb (GtkGstPlaySignalAdapter * adapter, GtkGstPlayState state,
+    GtkGstPlayer * self)
 {
-  GstPlayerState s = GST_PLAYER_STATE_BUFFERING;
+  GtkGstPlayerState s = GTK_GST_PLAYER_STATE_BUFFERING;
   switch (state) {
-    case GST_PLAY_STATE_BUFFERING:
-      s = GST_PLAYER_STATE_BUFFERING;
+    case GTL_GST_PLAY_STATE_BUFFERING:
+      s = GTK_GST_PLAYER_STATE_BUFFERING;
       break;
-    case GST_PLAY_STATE_PAUSED:
-      s = GST_PLAYER_STATE_PAUSED;
+    case GTL_GST_PLAY_STATE_PAUSED:
+      s = GTK_GST_PLAYER_STATE_PAUSED;
       break;
-    case GST_PLAY_STATE_PLAYING:
-      s = GST_PLAYER_STATE_PLAYING;
+    case GTL_GST_PLAY_STATE_PLAYING:
+      s = GTK_GST_PLAYER_STATE_PLAYING;
       break;
-    case GST_PLAY_STATE_STOPPED:
-      s = GST_PLAYER_STATE_STOPPED;
+    case GTL_GST_PLAY_STATE_STOPPED:
+      s = GTK_GST_PLAYER_STATE_STOPPED;
       break;
   }
   g_signal_emit (self, signals[SIGNAL_STATE_CHANGED], 0, s);
 }
 
 static void
-buffering_cb (GstPlaySignalAdapter * adapter, gint buffering_percent,
-    GstPlayer * self)
+buffering_cb (GtkGstPlaySignalAdapter * adapter, gint buffering_percent,
+    GtkGstPlayer * self)
 {
   g_signal_emit (self, signals[SIGNAL_BUFFERING], 0, buffering_percent);
 }
 
 static void
-end_of_stream_cb (GstPlaySignalAdapter * adapter, GstPlayer * self)
+end_of_stream_cb (GtkGstPlaySignalAdapter * adapter, GtkGstPlayer * self)
 {
   g_signal_emit (self, signals[SIGNAL_END_OF_STREAM], 0, NULL);
 }
 
 static void
-error_cb (GstPlaySignalAdapter * adapter, GError * error,
-    GstStructure * details, GstPlayer * self)
+error_cb (GtkGstPlaySignalAdapter * adapter, GError * error,
+    GstStructure * details, GtkGstPlayer * self)
 {
   g_signal_emit (self, signals[SIGNAL_ERROR], 0, error);
 }
 
 static void
-dimensions_changed_cb (GstPlaySignalAdapter * adapter, guint width,
-    guint height, GstPlayer * self)
+dimensions_changed_cb (GtkGstPlaySignalAdapter * adapter, guint width,
+    guint height, GtkGstPlayer * self)
 {
   g_signal_emit (self, signals[SIGNAL_VIDEO_DIMENSIONS_CHANGED], 0, width,
       height);
 }
 
 static void
-media_info_cb (GstPlaySignalAdapter * adapter, GstPlayMediaInfo * info,
-    GstPlayer * self)
+media_info_cb (GtkGstPlaySignalAdapter * adapter, GtkGstPlayMediaInfo * info,
+    GtkGstPlayer * self)
 {
-  GstPlayerMediaInfo *i = gst_player_media_info_wrapped (info);
+  GtkGstPlayerMediaInfo *i = gtk_gst_player_media_info_wrapped (info);
   g_signal_emit (self, signals[SIGNAL_MEDIA_INFO_UPDATED], 0, i);
   g_object_unref (i);
 }
 
 static void
-volume_cb (GstPlaySignalAdapter * adapter, gdouble volume, GstPlayer * self)
+volume_cb (GtkGstPlaySignalAdapter * adapter, gdouble volume, GtkGstPlayer * self)
 {
   g_signal_emit (self, signals[SIGNAL_VOLUME_CHANGED], 0, NULL);
 }
 
 
 static void
-mute_cb (GstPlaySignalAdapter * adapter, gboolean muted, GstPlayer * self)
+mute_cb (GtkGstPlaySignalAdapter * adapter, gboolean muted, GtkGstPlayer * self)
 {
   g_signal_emit (self, signals[SIGNAL_MUTE_CHANGED], 0, NULL);
 }
 
 static void
-warning_cb (GstPlaySignalAdapter * adapter, GError * warning,
-    GstStructure * details, GstPlayer * self)
+warning_cb (GtkGstPlaySignalAdapter * adapter, GError * warning,
+    GstStructure * details, GtkGstPlayer * self)
 {
   g_signal_emit (self, signals[SIGNAL_WARNING], 0, warning);
 }
 
 static void
-seek_done_cb (GstPlaySignalAdapter * adapter, GstClockTime time,
-    GstPlayer * self)
+seek_done_cb (GtkGstPlaySignalAdapter * adapter, GstClockTime time,
+    GtkGstPlayer * self)
 {
   g_signal_emit (self, signals[SIGNAL_SEEK_DONE], 0, time);
 }
 
 static void
-gst_player_constructed (GObject * object)
+gtk_gst_player_constructed (GObject * object)
 {
-  GstPlayer *self = GST_PLAYER (object);
-  GstPlayerVideoRenderer *renderer = NULL;
+  GtkGstPlayer *self = GST_PLAYER (object);
+  GtkGstPlayerVideoRenderer *renderer = NULL;
 
   G_OBJECT_CLASS (parent_class)->constructed (object);
 
   if (self->video_renderer != NULL) {
     renderer =
-        gst_player_wrapped_video_renderer_new (self->video_renderer, self);
+        gtk_gst_player_wrapped_video_renderer_new (self->video_renderer, self);
     g_object_set (self->play, "video-renderer",
-        GST_PLAY_VIDEO_RENDERER (renderer), NULL);
+        GTL_GST_PLAY_VIDEO_RENDERER (renderer), NULL);
     g_object_unref (renderer);
   }
 
@@ -579,10 +579,10 @@ gst_player_constructed (GObject * object)
     g_object_get (self->signal_dispatcher, "application-context", &context,
         NULL);
     self->signal_adapter =
-        gst_play_signal_adapter_new_with_main_context (self->play, context);
+        gtk_gst_play_signal_adapter_new_with_main_context (self->play, context);
     g_main_context_unref (context);
   } else {
-    self->signal_adapter = gst_play_signal_adapter_new (self->play);
+    self->signal_adapter = gtk_gst_play_signal_adapter_new (self->play);
   }
 
   g_signal_connect (self->signal_adapter, "uri-loaded",
@@ -613,28 +613,28 @@ gst_player_constructed (GObject * object)
 }
 
 /**
- * gst_player_new:
- * @video_renderer: (transfer full) (allow-none): GstPlayerVideoRenderer to use
- * @signal_dispatcher: (transfer full) (allow-none): GstPlayerSignalDispatcher to use
+ * gtk_gst_player_new:
+ * @video_renderer: (transfer full) (allow-none): GtkGstPlayerVideoRenderer to use
+ * @signal_dispatcher: (transfer full) (allow-none): GtkGstPlayerSignalDispatcher to use
  *
- * Creates a new #GstPlayer instance that uses @signal_dispatcher to dispatch
+ * Creates a new #GtkGstPlayer instance that uses @signal_dispatcher to dispatch
  * signals to some event loop system, or emits signals directly if NULL is
- * passed. See gst_player_g_main_context_signal_dispatcher_new().
+ * passed. See gtk_gst_player_g_main_context_signal_dispatcher_new().
  *
  * Video is going to be rendered by @video_renderer, or if %NULL is provided
  * no special video set up will be done and some default handling will be
  * performed.
  *
- * Returns: (transfer full): a new #GstPlayer instance
+ * Returns: (transfer full): a new #GtkGstPlayer instance
  */
-GstPlayer *
-gst_player_new (GstPlayerVideoRenderer * video_renderer,
-    GstPlayerSignalDispatcher * signal_dispatcher)
+GtkGstPlayer *
+gtk_gst_player_new (GtkGstPlayerVideoRenderer * video_renderer,
+    GtkGstPlayerSignalDispatcher * signal_dispatcher)
 {
   static GOnce once = G_ONCE_INIT;
-  GstPlayer *self;
+  GtkGstPlayer *self;
 
-  g_once (&once, gst_player_init_once, NULL);
+  g_once (&once, gtk_gst_player_init_once, NULL);
 
   self =
       g_object_new (GST_TYPE_PLAYER, "signal-dispatcher", signal_dispatcher,
@@ -651,57 +651,57 @@ gst_player_new (GstPlayerVideoRenderer * video_renderer,
 }
 
 /**
- * gst_player_play:
- * @player: #GstPlayer instance
+ * gtk_gst_player_play:
+ * @player: #GtkGstPlayer instance
  *
  * Request to play the loaded stream.
  */
 void
-gst_player_play (GstPlayer * self)
+gtk_gst_player_play (GtkGstPlayer * self)
 {
   g_return_if_fail (GST_IS_PLAYER (self));
 
-  gst_play_play (self->play);
+  gtk_gst_play_play (self->play);
 }
 
 /**
- * gst_player_pause:
- * @player: #GstPlayer instance
+ * gtk_gst_player_pause:
+ * @player: #GtkGstPlayer instance
  *
  * Pauses the current stream.
  */
 void
-gst_player_pause (GstPlayer * self)
+gtk_gst_player_pause (GtkGstPlayer * self)
 {
   g_return_if_fail (GST_IS_PLAYER (self));
 
-  gst_play_pause (self->play);
+  gtk_gst_play_pause (self->play);
 }
 
 /**
- * gst_player_stop:
- * @player: #GstPlayer instance
+ * gtk_gst_player_stop:
+ * @player: #GtkGstPlayer instance
  *
  * Stops playing the current stream and resets to the first position
  * in the stream.
  */
 void
-gst_player_stop (GstPlayer * self)
+gtk_gst_player_stop (GtkGstPlayer * self)
 {
   g_return_if_fail (GST_IS_PLAYER (self));
 
-  gst_play_stop (self->play);
+  gtk_gst_play_stop (self->play);
 }
 
 /**
- * gst_player_set_rate:
- * @player: #GstPlayer instance
+ * gtk_gst_player_set_rate:
+ * @player: #GtkGstPlayer instance
  * @rate: playback rate
  *
  * Playback at specified rate
  */
 void
-gst_player_set_rate (GstPlayer * self, gdouble rate)
+gtk_gst_player_set_rate (GtkGstPlayer * self, gdouble rate)
 {
   g_return_if_fail (GST_IS_PLAYER (self));
   g_return_if_fail (rate != 0.0);
@@ -710,13 +710,13 @@ gst_player_set_rate (GstPlayer * self, gdouble rate)
 }
 
 /**
- * gst_player_get_rate:
- * @player: #GstPlayer instance
+ * gtk_gst_player_get_rate:
+ * @player: #GtkGstPlayer instance
  *
  * Returns: current playback rate
  */
 gdouble
-gst_player_get_rate (GstPlayer * self)
+gtk_gst_player_get_rate (GtkGstPlayer * self)
 {
   gdouble val;
 
@@ -728,25 +728,25 @@ gst_player_get_rate (GstPlayer * self)
 }
 
 /**
- * gst_player_seek:
- * @player: #GstPlayer instance
+ * gtk_gst_player_seek:
+ * @player: #GtkGstPlayer instance
  * @position: position to seek in nanoseconds
  *
  * Seeks the currently-playing stream to the absolute @position time
  * in nanoseconds.
  */
 void
-gst_player_seek (GstPlayer * self, GstClockTime position)
+gtk_gst_player_seek (GtkGstPlayer * self, GstClockTime position)
 {
   g_return_if_fail (GST_IS_PLAYER (self));
   g_return_if_fail (GST_CLOCK_TIME_IS_VALID (position));
 
-  gst_play_seek (self->play, position);
+  gtk_gst_play_seek (self->play, position);
 }
 
 /**
- * gst_player_get_uri:
- * @player: #GstPlayer instance
+ * gtk_gst_player_get_uri:
+ * @player: #GtkGstPlayer instance
  *
  * Gets the URI of the currently-playing stream.
  *
@@ -754,7 +754,7 @@ gst_player_seek (GstPlayer * self, GstClockTime position)
  * currently-playing stream. g_free() after usage.
  */
 gchar *
-gst_player_get_uri (GstPlayer * self)
+gtk_gst_player_get_uri (GtkGstPlayer * self)
 {
   gchar *val;
 
@@ -766,14 +766,14 @@ gst_player_get_uri (GstPlayer * self)
 }
 
 /**
- * gst_player_set_uri:
- * @player: #GstPlayer instance
+ * gtk_gst_player_set_uri:
+ * @player: #GtkGstPlayer instance
  * @uri: (nullable): next URI to play.
  *
  * Sets the next URI to play.
  */
 void
-gst_player_set_uri (GstPlayer * self, const gchar * val)
+gtk_gst_player_set_uri (GtkGstPlayer * self, const gchar * val)
 {
   g_return_if_fail (GST_IS_PLAYER (self));
 
@@ -781,16 +781,16 @@ gst_player_set_uri (GstPlayer * self, const gchar * val)
 }
 
 /**
- * gst_player_set_subtitle_uri:
- * @player: #GstPlayer instance
+ * gtk_gst_player_set_subtitle_uri:
+ * @player: #GtkGstPlayer instance
  * @uri: (nullable): subtitle URI
  *
  * Sets the external subtitle URI. This should be combined with a call to
- * gst_player_set_subtitle_track_enabled(@player, TRUE) so the subtitles are actually
+ * gtk_gst_player_set_subtitle_track_enabled(@player, TRUE) so the subtitles are actually
  * rendered.
  */
 void
-gst_player_set_subtitle_uri (GstPlayer * self, const gchar * suburi)
+gtk_gst_player_set_subtitle_uri (GtkGstPlayer * self, const gchar * suburi)
 {
   g_return_if_fail (GST_IS_PLAYER (self));
 
@@ -798,8 +798,8 @@ gst_player_set_subtitle_uri (GstPlayer * self, const gchar * suburi)
 }
 
 /**
- * gst_player_get_subtitle_uri:
- * @player: #GstPlayer instance
+ * gtk_gst_player_get_subtitle_uri:
+ * @player: #GtkGstPlayer instance
  *
  * current subtitle URI
  *
@@ -807,7 +807,7 @@ gst_player_set_subtitle_uri (GstPlayer * self, const gchar * suburi)
  *   g_free() after usage.
  */
 gchar *
-gst_player_get_subtitle_uri (GstPlayer * self)
+gtk_gst_player_get_subtitle_uri (GtkGstPlayer * self)
 {
   gchar *val = NULL;
 
@@ -819,14 +819,14 @@ gst_player_get_subtitle_uri (GstPlayer * self)
 }
 
 /**
- * gst_player_get_position:
- * @player: #GstPlayer instance
+ * gtk_gst_player_get_position:
+ * @player: #GtkGstPlayer instance
  *
  * Returns: the absolute position time, in nanoseconds, of the
  * currently-playing stream.
  */
 GstClockTime
-gst_player_get_position (GstPlayer * self)
+gtk_gst_player_get_position (GtkGstPlayer * self)
 {
   GstClockTime val;
 
@@ -838,8 +838,8 @@ gst_player_get_position (GstPlayer * self)
 }
 
 /**
- * gst_player_get_duration:
- * @player: #GstPlayer instance
+ * gtk_gst_player_get_duration:
+ * @player: #GtkGstPlayer instance
  *
  * Retrieves the duration of the media stream that self represents.
  *
@@ -847,7 +847,7 @@ gst_player_get_position (GstPlayer * self)
  * nanoseconds.
  */
 GstClockTime
-gst_player_get_duration (GstPlayer * self)
+gtk_gst_player_get_duration (GtkGstPlayer * self)
 {
   GstClockTime val;
 
@@ -859,15 +859,15 @@ gst_player_get_duration (GstPlayer * self)
 }
 
 /**
- * gst_player_get_volume:
- * @player: #GstPlayer instance
+ * gtk_gst_player_get_volume:
+ * @player: #GtkGstPlayer instance
  *
  * Returns the current volume level, as a percentage between 0 and 1.
  *
  * Returns: the volume as percentage between 0 and 1.
  */
 gdouble
-gst_player_get_volume (GstPlayer * self)
+gtk_gst_player_get_volume (GtkGstPlayer * self)
 {
   gdouble val;
 
@@ -879,8 +879,8 @@ gst_player_get_volume (GstPlayer * self)
 }
 
 /**
- * gst_player_set_volume:
- * @player: #GstPlayer instance
+ * gtk_gst_player_set_volume:
+ * @player: #GtkGstPlayer instance
  * @val: the new volume level, as a percentage between 0 and 1
  *
  * Sets the volume level of the stream as a percentage between 0 and 1.
@@ -890,7 +890,7 @@ gst_player_get_volume (GstPlayer * self)
  * should usually use a cubic volume. See gst_stream_volume_convert_volume().
  */
 void
-gst_player_set_volume (GstPlayer * self, gdouble val)
+gtk_gst_player_set_volume (GtkGstPlayer * self, gdouble val)
 {
   g_return_if_fail (GST_IS_PLAYER (self));
 
@@ -898,13 +898,13 @@ gst_player_set_volume (GstPlayer * self, gdouble val)
 }
 
 /**
- * gst_player_get_mute:
- * @player: #GstPlayer instance
+ * gtk_gst_player_get_mute:
+ * @player: #GtkGstPlayer instance
  *
  * Returns: %TRUE if the currently-playing stream is muted.
  */
 gboolean
-gst_player_get_mute (GstPlayer * self)
+gtk_gst_player_get_mute (GtkGstPlayer * self)
 {
   gboolean val;
 
@@ -916,14 +916,14 @@ gst_player_get_mute (GstPlayer * self)
 }
 
 /**
- * gst_player_set_mute:
- * @player: #GstPlayer instance
+ * gtk_gst_player_set_mute:
+ * @player: #GtkGstPlayer instance
  * @val: Mute state the should be set
  *
  * %TRUE if the currently-playing stream should be muted.
  */
 void
-gst_player_set_mute (GstPlayer * self, gboolean val)
+gtk_gst_player_set_mute (GtkGstPlayer * self, gboolean val)
 {
   g_return_if_fail (GST_IS_PLAYER (self));
 
@@ -931,15 +931,15 @@ gst_player_set_mute (GstPlayer * self, gboolean val)
 }
 
 /**
- * gst_player_get_pipeline:
- * @player: #GstPlayer instance
+ * gtk_gst_player_get_pipeline:
+ * @player: #GtkGstPlayer instance
  *
  * Returns: (transfer full): The internal playbin instance.
  *
  * The caller should free it with g_object_unref()
  */
 GstElement *
-gst_player_get_pipeline (GstPlayer * self)
+gtk_gst_player_get_pipeline (GtkGstPlayer * self)
 {
   GstElement *val;
 
@@ -951,113 +951,113 @@ gst_player_get_pipeline (GstPlayer * self)
 }
 
 /**
- * gst_player_get_media_info:
- * @player: #GstPlayer instance
+ * gtk_gst_player_get_media_info:
+ * @player: #GtkGstPlayer instance
  *
- * A Function to get the current media info #GstPlayerMediaInfo instance.
+ * A Function to get the current media info #GtkGstPlayerMediaInfo instance.
  *
  * Returns: (transfer full) (nullable): media info instance.
  *
  * The caller should free it with g_object_unref()
  */
-GstPlayerMediaInfo *
-gst_player_get_media_info (GstPlayer * self)
+GtkGstPlayerMediaInfo *
+gtk_gst_player_get_media_info (GtkGstPlayer * self)
 {
-  GstPlayMediaInfo *info;
-  GstPlayerMediaInfo *ret;
+  GtkGstPlayMediaInfo *info;
+  GtkGstPlayerMediaInfo *ret;
 
   g_return_val_if_fail (GST_IS_PLAYER (self), NULL);
 
-  info = gst_play_get_media_info (self->play);
+  info = gtk_gst_play_get_media_info (self->play);
   if (!info)
     return NULL;
 
-  ret = gst_player_media_info_wrapped (info);
+  ret = gtk_gst_player_media_info_wrapped (info);
   g_object_unref (info);
   return ret;
 }
 
 /**
- * gst_player_get_current_audio_track:
- * @player: #GstPlayer instance
+ * gtk_gst_player_get_current_audio_track:
+ * @player: #GtkGstPlayer instance
  *
- * A Function to get current audio #GstPlayerAudioInfo instance.
+ * A Function to get current audio #GtkGstPlayerAudioInfo instance.
  *
  * Returns: (transfer full) (nullable): current audio track.
  *
  * The caller should free it with g_object_unref()
  */
-GstPlayerAudioInfo *
-gst_player_get_current_audio_track (GstPlayer * self)
+GtkGstPlayerAudioInfo *
+gtk_gst_player_get_current_audio_track (GtkGstPlayer * self)
 {
-  GstPlayAudioInfo *info;
-  GstPlayerAudioInfo *ret = NULL;
+  GtkGstPlayAudioInfo *info;
+  GtkGstPlayerAudioInfo *ret = NULL;
 
   g_return_val_if_fail (GST_IS_PLAYER (self), NULL);
 
-  info = gst_play_get_current_audio_track (self->play);
+  info = gtk_gst_play_get_current_audio_track (self->play);
   if (info != NULL) {
-    ret = gst_player_audio_info_wrapped (info);
+    ret = gtk_gst_player_audio_info_wrapped (info);
     g_object_unref (info);
   }
   return ret;
 }
 
 /**
- * gst_player_get_current_video_track:
- * @player: #GstPlayer instance
+ * gtk_gst_player_get_current_video_track:
+ * @player: #GtkGstPlayer instance
  *
- * A Function to get current video #GstPlayerVideoInfo instance.
+ * A Function to get current video #GtkGstPlayerVideoInfo instance.
  *
  * Returns: (transfer full) (nullable): current video track.
  *
  * The caller should free it with g_object_unref()
  */
-GstPlayerVideoInfo *
-gst_player_get_current_video_track (GstPlayer * self)
+GtkGstPlayerVideoInfo *
+gtk_gst_player_get_current_video_track (GtkGstPlayer * self)
 {
-  GstPlayVideoInfo *info;
-  GstPlayerVideoInfo *ret = NULL;
+  GtkGstPlayVideoInfo *info;
+  GtkGstPlayerVideoInfo *ret = NULL;
 
   g_return_val_if_fail (GST_IS_PLAYER (self), NULL);
 
-  info = gst_play_get_current_video_track (self->play);
+  info = gtk_gst_play_get_current_video_track (self->play);
   if (info != NULL) {
-    ret = gst_player_video_info_wrapped (info);
+    ret = gtk_gst_player_video_info_wrapped (info);
     g_object_unref (info);
   }
   return ret;
 }
 
 /**
- * gst_player_get_current_subtitle_track:
- * @player: #GstPlayer instance
+ * gtk_gst_player_get_current_subtitle_track:
+ * @player: #GtkGstPlayer instance
  *
- * A Function to get current subtitle #GstPlayerSubtitleInfo instance.
+ * A Function to get current subtitle #GtkGstPlayerSubtitleInfo instance.
  *
  * Returns: (transfer full) (nullable): current subtitle track.
  *
  * The caller should free it with g_object_unref()
  */
-GstPlayerSubtitleInfo *
-gst_player_get_current_subtitle_track (GstPlayer * self)
+GtkGstPlayerSubtitleInfo *
+gtk_gst_player_get_current_subtitle_track (GtkGstPlayer * self)
 {
-  GstPlaySubtitleInfo *info;
-  GstPlayerSubtitleInfo *ret = NULL;
+  GtkGstPlaySubtitleInfo *info;
+  GtkGstPlayerSubtitleInfo *ret = NULL;
 
   g_return_val_if_fail (GST_IS_PLAYER (self), NULL);
 
-  info = gst_play_get_current_subtitle_track (self->play);
+  info = gtk_gst_play_get_current_subtitle_track (self->play);
   if (info != NULL) {
-    ret = gst_player_subtitle_info_wrapped (info);
+    ret = gtk_gst_player_subtitle_info_wrapped (info);
     g_object_unref (info);
   }
   return ret;
 }
 
 /**
- * gst_player_set_audio_track:
- * @player: #GstPlayer instance
+ * gtk_gst_player_set_audio_track:
+ * @player: #GtkGstPlayer instance
  * @stream_index: stream index
  *
  * Returns: %TRUE or %FALSE
@@ -1065,16 +1065,16 @@ gst_player_get_current_subtitle_track (GstPlayer * self)
  * Sets the audio track @stream_idex.
  */
 gboolean
-gst_player_set_audio_track (GstPlayer * self, gint stream_index)
+gtk_gst_player_set_audio_track (GtkGstPlayer * self, gint stream_index)
 {
   g_return_val_if_fail (GST_IS_PLAYER (self), 0);
 
-  return gst_play_set_audio_track (self->play, stream_index);
+  return gtk_gst_play_set_audio_track (self->play, stream_index);
 }
 
 /**
- * gst_player_set_video_track:
- * @player: #GstPlayer instance
+ * gtk_gst_player_set_video_track:
+ * @player: #GtkGstPlayer instance
  * @stream_index: stream index
  *
  * Returns: %TRUE or %FALSE
@@ -1082,16 +1082,16 @@ gst_player_set_audio_track (GstPlayer * self, gint stream_index)
  * Sets the video track @stream_index.
  */
 gboolean
-gst_player_set_video_track (GstPlayer * self, gint stream_index)
+gtk_gst_player_set_video_track (GtkGstPlayer * self, gint stream_index)
 {
   g_return_val_if_fail (GST_IS_PLAYER (self), 0);
 
-  return gst_play_set_video_track (self->play, stream_index);
+  return gtk_gst_play_set_video_track (self->play, stream_index);
 }
 
 /**
- * gst_player_set_subtitle_track:
- * @player: #GstPlayer instance
+ * gtk_gst_player_set_subtitle_track:
+ * @player: #GtkGstPlayer instance
  * @stream_index: stream index
  *
  * Returns: %TRUE or %FALSE
@@ -1099,104 +1099,104 @@ gst_player_set_video_track (GstPlayer * self, gint stream_index)
  * Sets the subtitle stack @stream_index.
  */
 gboolean
-gst_player_set_subtitle_track (GstPlayer * self, gint stream_index)
+gtk_gst_player_set_subtitle_track (GtkGstPlayer * self, gint stream_index)
 {
   g_return_val_if_fail (GST_IS_PLAYER (self), 0);
 
-  return gst_play_set_subtitle_track (self->play, stream_index);
+  return gtk_gst_play_set_subtitle_track (self->play, stream_index);
 }
 
 /**
- * gst_player_set_audio_track_enabled:
- * @player: #GstPlayer instance
+ * gtk_gst_player_set_audio_track_enabled:
+ * @player: #GtkGstPlayer instance
  * @enabled: TRUE or FALSE
  *
  * Enable or disable the current audio track.
  */
 void
-gst_player_set_audio_track_enabled (GstPlayer * self, gboolean enabled)
+gtk_gst_player_set_audio_track_enabled (GtkGstPlayer * self, gboolean enabled)
 {
   g_return_if_fail (GST_IS_PLAYER (self));
 
-  gst_play_set_audio_track_enabled (self->play, enabled);
+  gtk_gst_play_set_audio_track_enabled (self->play, enabled);
 }
 
 /**
- * gst_player_set_video_track_enabled:
- * @player: #GstPlayer instance
+ * gtk_gst_player_set_video_track_enabled:
+ * @player: #GtkGstPlayer instance
  * @enabled: TRUE or FALSE
  *
  * Enable or disable the current video track.
  */
 void
-gst_player_set_video_track_enabled (GstPlayer * self, gboolean enabled)
+gtk_gst_player_set_video_track_enabled (GtkGstPlayer * self, gboolean enabled)
 {
   g_return_if_fail (GST_IS_PLAYER (self));
 
-  gst_play_set_video_track_enabled (self->play, enabled);
+  gtk_gst_play_set_video_track_enabled (self->play, enabled);
 }
 
 /**
- * gst_player_set_subtitle_track_enabled:
- * @player: #GstPlayer instance
+ * gtk_gst_player_set_subtitle_track_enabled:
+ * @player: #GtkGstPlayer instance
  * @enabled: TRUE or FALSE
  *
  * Enable or disable the current subtitle track.
  */
 void
-gst_player_set_subtitle_track_enabled (GstPlayer * self, gboolean enabled)
+gtk_gst_player_set_subtitle_track_enabled (GtkGstPlayer * self, gboolean enabled)
 {
   g_return_if_fail (GST_IS_PLAYER (self));
 
-  gst_play_set_subtitle_track_enabled (self->play, enabled);
+  gtk_gst_play_set_subtitle_track_enabled (self->play, enabled);
 }
 
 /**
- * gst_player_set_visualization:
- * @player: #GstPlayer instance
+ * gtk_gst_player_set_visualization:
+ * @player: #GtkGstPlayer instance
  * @name: (nullable): visualization element obtained from
- * #gst_player_visualizations_get()
+ * #gtk_gst_player_visualizations_get()
  *
  * Returns: %TRUE if the visualizations was set correctly. Otherwise,
  * %FALSE.
  */
 gboolean
-gst_player_set_visualization (GstPlayer * self, const gchar * name)
+gtk_gst_player_set_visualization (GtkGstPlayer * self, const gchar * name)
 {
   g_return_val_if_fail (GST_IS_PLAYER (self), FALSE);
 
-  return gst_play_set_visualization (self->play, name);
+  return gtk_gst_play_set_visualization (self->play, name);
 }
 
 /**
- * gst_player_get_current_visualization:
- * @player: #GstPlayer instance
+ * gtk_gst_player_get_current_visualization:
+ * @player: #GtkGstPlayer instance
  *
  * Returns: (transfer full) (nullable): Name of the currently enabled
  *   visualization.
  *   g_free() after usage.
  */
 gchar *
-gst_player_get_current_visualization (GstPlayer * self)
+gtk_gst_player_get_current_visualization (GtkGstPlayer * self)
 {
   g_return_val_if_fail (GST_IS_PLAYER (self), NULL);
 
-  return gst_play_get_current_visualization (self->play);
+  return gtk_gst_play_get_current_visualization (self->play);
 }
 
 /**
- * gst_player_set_visualization_enabled:
- * @player: #GstPlayer instance
+ * gtk_gst_player_set_visualization_enabled:
+ * @player: #GtkGstPlayer instance
  * @enabled: TRUE or FALSE
  *
  * Enable or disable the visualization.
  */
 void
-gst_player_set_visualization_enabled (GstPlayer * self, gboolean enabled)
+gtk_gst_player_set_visualization_enabled (GtkGstPlayer * self, gboolean enabled)
 {
   g_return_if_fail (GST_IS_PLAYER (self));
 
-  gst_play_set_visualization_enabled (self->play, enabled);
+  gtk_gst_play_set_visualization_enabled (self->play, enabled);
 }
 
 struct CBChannelMap
@@ -1206,15 +1206,15 @@ struct CBChannelMap
 };
 
 static const struct CBChannelMap cb_channel_map[] = {
-  /* GST_PLAYER_COLOR_BALANCE_BRIGHTNESS */ {"BRIGHTNESS", "brightness"},
-  /* GST_PLAYER_COLOR_BALANCE_CONTRAST   */ {"CONTRAST", "contrast"},
-  /* GST_PLAYER_COLOR_BALANCE_SATURATION */ {"SATURATION", "saturation"},
-  /* GST_PLAYER_COLOR_BALANCE_HUE        */ {"HUE", "hue"},
+  /* GTK_GST_PLAYER_COLOR_BALANCE_BRIGHTNESS */ {"BRIGHTNESS", "brightness"},
+  /* GTK_GST_PLAYER_COLOR_BALANCE_CONTRAST   */ {"CONTRAST", "contrast"},
+  /* GTK_GST_PLAYER_COLOR_BALANCE_SATURATION */ {"SATURATION", "saturation"},
+  /* GTK_GST_PLAYER_COLOR_BALANCE_HUE        */ {"HUE", "hue"},
 };
 
 /**
- * gst_player_has_color_balance:
- * @player:#GstPlayer instance
+ * gtk_gst_player_has_color_balance:
+ * @player:#GtkGstPlayer instance
  *
  * Checks whether the @player has color balance support available.
  *
@@ -1222,37 +1222,37 @@ static const struct CBChannelMap cb_channel_map[] = {
  *   %FALSE.
  */
 gboolean
-gst_player_has_color_balance (GstPlayer * self)
+gtk_gst_player_has_color_balance (GtkGstPlayer * self)
 {
   g_return_val_if_fail (GST_IS_PLAYER (self), FALSE);
 
-  return gst_play_has_color_balance (self->play);
+  return gtk_gst_play_has_color_balance (self->play);
 }
 
 /**
- * gst_player_set_color_balance:
- * @player: #GstPlayer instance
- * @type: #GstPlayerColorBalanceType
+ * gtk_gst_player_set_color_balance:
+ * @player: #GtkGstPlayer instance
+ * @type: #GtkGstPlayerColorBalanceType
  * @value: The new value for the @type, ranged [0,1]
  *
  * Sets the current value of the indicated channel @type to the passed
  * value.
  */
 void
-gst_player_set_color_balance (GstPlayer * self, GstPlayerColorBalanceType type,
+gtk_gst_player_set_color_balance (GtkGstPlayer * self, GtkGstPlayerColorBalanceType type,
     gdouble value)
 {
   g_return_if_fail (GST_IS_PLAYER (self));
   g_return_if_fail (value >= 0.0 && value <= 1.0);
 
-  gst_play_set_color_balance (self->play, (GstPlayColorBalanceType) type,
+  gtk_gst_play_set_color_balance (self->play, (GtkGstPlayColorBalanceType) type,
       value);
 }
 
 /**
- * gst_player_get_color_balance:
- * @player: #GstPlayer instance
- * @type: #GstPlayerColorBalanceType
+ * gtk_gst_player_get_color_balance:
+ * @player: #GtkGstPlayer instance
+ * @type: #GtkGstPlayerColorBalanceType
  *
  * Retrieve the current value of the indicated @type.
  *
@@ -1260,17 +1260,17 @@ gst_player_set_color_balance (GstPlayer * self, GstPlayerColorBalanceType type,
  *   error -1 is returned.
  */
 gdouble
-gst_player_get_color_balance (GstPlayer * self, GstPlayerColorBalanceType type)
+gtk_gst_player_get_color_balance (GtkGstPlayer * self, GtkGstPlayerColorBalanceType type)
 {
   g_return_val_if_fail (GST_IS_PLAYER (self), -1);
 
-  return gst_play_get_color_balance (self->play,
-      (GstPlayColorBalanceType) type);
+  return gtk_gst_play_get_color_balance (self->play,
+      (GtkGstPlayColorBalanceType) type);
 }
 
 /**
- * gst_player_get_multiview_mode:
- * @player: #GstPlayer instance
+ * gtk_gst_player_get_multiview_mode:
+ * @player: #GtkGstPlayer instance
  *
  * Retrieve the current value of the indicated @type.
  *
@@ -1279,7 +1279,7 @@ gst_player_get_color_balance (GstPlayer * self, GstPlayerColorBalanceType type)
  * Since: 1.10
  */
 GstVideoMultiviewFramePacking
-gst_player_get_multiview_mode (GstPlayer * self)
+gtk_gst_player_get_multiview_mode (GtkGstPlayer * self)
 {
   GstVideoMultiviewFramePacking val = GST_VIDEO_MULTIVIEW_FRAME_PACKING_NONE;
 
@@ -1292,8 +1292,8 @@ gst_player_get_multiview_mode (GstPlayer * self)
 }
 
 /**
- * gst_player_set_multiview_mode:
- * @player: #GstPlayer instance
+ * gtk_gst_player_set_multiview_mode:
+ * @player: #GtkGstPlayer instance
  * @mode: The new value for the @type
  *
  * Sets the current value of the indicated mode @type to the passed
@@ -1302,7 +1302,7 @@ gst_player_get_multiview_mode (GstPlayer * self)
  * Since: 1.10
  */
 void
-gst_player_set_multiview_mode (GstPlayer * self,
+gtk_gst_player_set_multiview_mode (GtkGstPlayer * self,
     GstVideoMultiviewFramePacking mode)
 {
   g_return_if_fail (GST_IS_PLAYER (self));
@@ -1311,8 +1311,8 @@ gst_player_set_multiview_mode (GstPlayer * self,
 }
 
 /**
- * gst_player_get_multiview_flags:
- * @player: #GstPlayer instance
+ * gtk_gst_player_get_multiview_flags:
+ * @player: #GtkGstPlayer instance
  *
  * Retrieve the current value of the indicated @type.
  *
@@ -1321,7 +1321,7 @@ gst_player_set_multiview_mode (GstPlayer * self,
  * Since: 1.10
  */
 GstVideoMultiviewFlags
-gst_player_get_multiview_flags (GstPlayer * self)
+gtk_gst_player_get_multiview_flags (GtkGstPlayer * self)
 {
   GstVideoMultiviewFlags val = GST_VIDEO_MULTIVIEW_FLAGS_NONE;
 
@@ -1333,8 +1333,8 @@ gst_player_get_multiview_flags (GstPlayer * self)
 }
 
 /**
- * gst_player_set_multiview_flags:
- * @player: #GstPlayer instance
+ * gtk_gst_player_set_multiview_flags:
+ * @player: #GtkGstPlayer instance
  * @flags: The new value for the @type
  *
  * Sets the current value of the indicated mode @type to the passed
@@ -1343,7 +1343,7 @@ gst_player_get_multiview_flags (GstPlayer * self)
  * Since: 1.10
  */
 void
-gst_player_set_multiview_flags (GstPlayer * self, GstVideoMultiviewFlags flags)
+gtk_gst_player_set_multiview_flags (GtkGstPlayer * self, GstVideoMultiviewFlags flags)
 {
   g_return_if_fail (GST_IS_PLAYER (self));
 
@@ -1351,8 +1351,8 @@ gst_player_set_multiview_flags (GstPlayer * self, GstVideoMultiviewFlags flags)
 }
 
 /**
- * gst_player_get_audio_video_offset:
- * @player: #GstPlayer instance
+ * gtk_gst_player_get_audio_video_offset:
+ * @player: #GtkGstPlayer instance
  *
  * Retrieve the current value of audio-video-offset property
  *
@@ -1361,7 +1361,7 @@ gst_player_set_multiview_flags (GstPlayer * self, GstVideoMultiviewFlags flags)
  * Since: 1.10
  */
 gint64
-gst_player_get_audio_video_offset (GstPlayer * self)
+gtk_gst_player_get_audio_video_offset (GtkGstPlayer * self)
 {
   gint64 val = 0;
 
@@ -1373,8 +1373,8 @@ gst_player_get_audio_video_offset (GstPlayer * self)
 }
 
 /**
- * gst_player_set_audio_video_offset:
- * @player: #GstPlayer instance
+ * gtk_gst_player_set_audio_video_offset:
+ * @player: #GtkGstPlayer instance
  * @offset: #gint64 in nanoseconds
  *
  * Sets audio-video-offset property by value of @offset
@@ -1382,7 +1382,7 @@ gst_player_get_audio_video_offset (GstPlayer * self)
  * Since: 1.10
  */
 void
-gst_player_set_audio_video_offset (GstPlayer * self, gint64 offset)
+gtk_gst_player_set_audio_video_offset (GtkGstPlayer * self, gint64 offset)
 {
   g_return_if_fail (GST_IS_PLAYER (self));
 
@@ -1390,8 +1390,8 @@ gst_player_set_audio_video_offset (GstPlayer * self, gint64 offset)
 }
 
 /**
- * gst_player_get_subtitle_video_offset:
- * @player: #GstPlayer instance
+ * gtk_gst_player_get_subtitle_video_offset:
+ * @player: #GtkGstPlayer instance
  *
  * Retrieve the current value of subtitle-video-offset property
  *
@@ -1400,7 +1400,7 @@ gst_player_set_audio_video_offset (GstPlayer * self, gint64 offset)
  * Since: 1.16
  */
 gint64
-gst_player_get_subtitle_video_offset (GstPlayer * self)
+gtk_gst_player_get_subtitle_video_offset (GtkGstPlayer * self)
 {
   gint64 val = 0;
 
@@ -1412,8 +1412,8 @@ gst_player_get_subtitle_video_offset (GstPlayer * self)
 }
 
 /**
- * gst_player_set_subtitle_video_offset:
- * @player: #GstPlayer instance
+ * gtk_gst_player_set_subtitle_video_offset:
+ * @player: #GtkGstPlayer instance
  * @offset: #gint64 in nanoseconds
  *
  * Sets subtitle-video-offset property by value of @offset
@@ -1421,7 +1421,7 @@ gst_player_get_subtitle_video_offset (GstPlayer * self)
  * Since: 1.16
  */
 void
-gst_player_set_subtitle_video_offset (GstPlayer * self, gint64 offset)
+gtk_gst_player_set_subtitle_video_offset (GtkGstPlayer * self, gint64 offset)
 {
   g_return_if_fail (GST_IS_PLAYER (self));
 
@@ -1433,23 +1433,23 @@ gst_player_set_subtitle_video_offset (GstPlayer * self, gint64 offset)
 #define C_FLAGS(v) ((guint) v)
 
 GType
-gst_player_color_balance_type_get_type (void)
+gtk_gst_player_color_balance_type_get_type (void)
 {
   static gsize id = 0;
   static const GEnumValue values[] = {
-    {C_ENUM (GST_PLAYER_COLOR_BALANCE_HUE), "GST_PLAYER_COLOR_BALANCE_HUE",
+    {C_ENUM (GTK_GST_PLAYER_COLOR_BALANCE_HUE), "GTK_GST_PLAYER_COLOR_BALANCE_HUE",
         "hue"},
-    {C_ENUM (GST_PLAYER_COLOR_BALANCE_BRIGHTNESS),
-        "GST_PLAYER_COLOR_BALANCE_BRIGHTNESS", "brightness"},
-    {C_ENUM (GST_PLAYER_COLOR_BALANCE_SATURATION),
-        "GST_PLAYER_COLOR_BALANCE_SATURATION", "saturation"},
-    {C_ENUM (GST_PLAYER_COLOR_BALANCE_CONTRAST),
-        "GST_PLAYER_COLOR_BALANCE_CONTRAST", "contrast"},
+    {C_ENUM (GTK_GST_PLAYER_COLOR_BALANCE_BRIGHTNESS),
+        "GTK_GST_PLAYER_COLOR_BALANCE_BRIGHTNESS", "brightness"},
+    {C_ENUM (GTK_GST_PLAYER_COLOR_BALANCE_SATURATION),
+        "GTK_GST_PLAYER_COLOR_BALANCE_SATURATION", "saturation"},
+    {C_ENUM (GTK_GST_PLAYER_COLOR_BALANCE_CONTRAST),
+        "GTK_GST_PLAYER_COLOR_BALANCE_CONTRAST", "contrast"},
     {0, NULL, NULL}
   };
 
   if (g_once_init_enter (&id)) {
-    GType tmp = g_enum_register_static ("GstPlayerColorBalanceType", values);
+    GType tmp = g_enum_register_static ("GtkGstPlayerColorBalanceType", values);
     g_once_init_leave (&id, tmp);
   }
 
@@ -1457,8 +1457,8 @@ gst_player_color_balance_type_get_type (void)
 }
 
 /**
- * gst_player_color_balance_type_get_name:
- * @type: a #GstPlayerColorBalanceType
+ * gtk_gst_player_color_balance_type_get_name:
+ * @type: a #GtkGstPlayerColorBalanceType
  *
  * Gets a string representing the given color balance type.
  *
@@ -1466,29 +1466,29 @@ gst_player_color_balance_type_get_type (void)
  *   balance type.
  */
 const gchar *
-gst_player_color_balance_type_get_name (GstPlayerColorBalanceType type)
+gtk_gst_player_color_balance_type_get_name (GtkGstPlayerColorBalanceType type)
 {
-  g_return_val_if_fail (type >= GST_PLAYER_COLOR_BALANCE_BRIGHTNESS &&
-      type <= GST_PLAYER_COLOR_BALANCE_HUE, NULL);
+  g_return_val_if_fail (type >= GTK_GST_PLAYER_COLOR_BALANCE_BRIGHTNESS &&
+      type <= GTK_GST_PLAYER_COLOR_BALANCE_HUE, NULL);
 
   return cb_channel_map[type].name;
 }
 
 GType
-gst_player_state_get_type (void)
+gtk_gst_player_state_get_type (void)
 {
   static gsize id = 0;
   static const GEnumValue values[] = {
-    {C_ENUM (GST_PLAYER_STATE_STOPPED), "GST_PLAYER_STATE_STOPPED", "stopped"},
-    {C_ENUM (GST_PLAYER_STATE_BUFFERING), "GST_PLAYER_STATE_BUFFERING",
+    {C_ENUM (GTK_GST_PLAYER_STATE_STOPPED), "GTK_GST_PLAYER_STATE_STOPPED", "stopped"},
+    {C_ENUM (GTK_GST_PLAYER_STATE_BUFFERING), "GTK_GST_PLAYER_STATE_BUFFERING",
         "buffering"},
-    {C_ENUM (GST_PLAYER_STATE_PAUSED), "GST_PLAYER_STATE_PAUSED", "paused"},
-    {C_ENUM (GST_PLAYER_STATE_PLAYING), "GST_PLAYER_STATE_PLAYING", "playing"},
+    {C_ENUM (GTK_GST_PLAYER_STATE_PAUSED), "GTK_GST_PLAYER_STATE_PAUSED", "paused"},
+    {C_ENUM (GTK_GST_PLAYER_STATE_PLAYING), "GTK_GST_PLAYER_STATE_PLAYING", "playing"},
     {0, NULL, NULL}
   };
 
   if (g_once_init_enter (&id)) {
-    GType tmp = g_enum_register_static ("GstPlayerState", values);
+    GType tmp = g_enum_register_static ("GtkGstPlayerState", values);
     g_once_init_leave (&id, tmp);
   }
 
@@ -1496,24 +1496,24 @@ gst_player_state_get_type (void)
 }
 
 /**
- * gst_player_state_get_name:
- * @state: a #GstPlayerState
+ * gtk_gst_player_state_get_name:
+ * @state: a #GtkGstPlayerState
  *
  * Gets a string representing the given state.
  *
  * Returns: (transfer none): a string with the name of the state.
  */
 const gchar *
-gst_player_state_get_name (GstPlayerState state)
+gtk_gst_player_state_get_name (GtkGstPlayerState state)
 {
   switch (state) {
-    case GST_PLAYER_STATE_STOPPED:
+    case GTK_GST_PLAYER_STATE_STOPPED:
       return "stopped";
-    case GST_PLAYER_STATE_BUFFERING:
+    case GTK_GST_PLAYER_STATE_BUFFERING:
       return "buffering";
-    case GST_PLAYER_STATE_PAUSED:
+    case GTK_GST_PLAYER_STATE_PAUSED:
       return "paused";
-    case GST_PLAYER_STATE_PLAYING:
+    case GTK_GST_PLAYER_STATE_PLAYING:
       return "playing";
   }
 
@@ -1522,16 +1522,16 @@ gst_player_state_get_name (GstPlayerState state)
 }
 
 GType
-gst_player_error_get_type (void)
+gtk_gst_player_error_get_type (void)
 {
   static gsize id = 0;
   static const GEnumValue values[] = {
-    {C_ENUM (GST_PLAYER_ERROR_FAILED), "GST_PLAYER_ERROR_FAILED", "failed"},
+    {C_ENUM (GTK_GST_PLAYER_ERROR_FAILED), "GTK_GST_PLAYER_ERROR_FAILED", "failed"},
     {0, NULL, NULL}
   };
 
   if (g_once_init_enter (&id)) {
-    GType tmp = g_enum_register_static ("GstPlayerError", values);
+    GType tmp = g_enum_register_static ("GtkGstPlayerError", values);
     g_once_init_leave (&id, tmp);
   }
 
@@ -1539,18 +1539,18 @@ gst_player_error_get_type (void)
 }
 
 /**
- * gst_player_error_get_name:
- * @error: a #GstPlayerError
+ * gtk_gst_player_error_get_name:
+ * @error: a #GtkGstPlayerError
  *
  * Gets a string representing the given error.
  *
  * Returns: (transfer none): a string with the given error.
  */
 const gchar *
-gst_player_error_get_name (GstPlayerError error)
+gtk_gst_player_error_get_name (GtkGstPlayerError error)
 {
   switch (error) {
-    case GST_PLAYER_ERROR_FAILED:
+    case GTK_GST_PLAYER_ERROR_FAILED:
       return "failed";
   }
 
@@ -1559,13 +1559,13 @@ gst_player_error_get_name (GstPlayerError error)
 }
 
 /**
- * gst_player_set_config:
- * @player: #GstPlayer instance
+ * gtk_gst_player_set_config:
+ * @player: #GtkGstPlayer instance
  * @config: (transfer full): a #GstStructure
  *
  * Set the configuration of the player. If the player is already configured, and
  * the configuration haven't change, this function will return %TRUE. If the
- * player is not in the GST_PLAYER_STATE_STOPPED, this method will return %FALSE
+ * player is not in the GTK_GST_PLAYER_STATE_STOPPED, this method will return %FALSE
  * and active configuration will remain.
  *
  * @config is a #GstStructure that contains the configuration parameters for
@@ -1577,38 +1577,38 @@ gst_player_error_get_name (GstPlayerError error)
  * Since: 1.10
  */
 gboolean
-gst_player_set_config (GstPlayer * self, GstStructure * config)
+gtk_gst_player_set_config (GtkGstPlayer * self, GstStructure * config)
 {
   g_return_val_if_fail (GST_IS_PLAYER (self), FALSE);
   g_return_val_if_fail (config != NULL, FALSE);
 
-  return gst_play_set_config (self->play, config);
+  return gtk_gst_play_set_config (self->play, config);
 }
 
 /**
- * gst_player_get_config:
- * @player: #GstPlayer instance
+ * gtk_gst_player_get_config:
+ * @player: #GtkGstPlayer instance
  *
  * Get a copy of the current configuration of the player. This configuration
- * can either be modified and used for the gst_player_set_config() call
+ * can either be modified and used for the gtk_gst_player_set_config() call
  * or it must be freed after usage.
  *
  * Returns: (transfer full): a copy of the current configuration of @player. Use
- * gst_structure_free() after usage or gst_player_set_config().
+ * gst_structure_free() after usage or gtk_gst_player_set_config().
  *
  * Since: 1.10
  */
 GstStructure *
-gst_player_get_config (GstPlayer * self)
+gtk_gst_player_get_config (GtkGstPlayer * self)
 {
   g_return_val_if_fail (GST_IS_PLAYER (self), NULL);
 
-  return gst_play_get_config (self->play);
+  return gtk_gst_play_get_config (self->play);
 }
 
 /**
- * gst_player_config_set_user_agent:
- * @config: a #GstPlayer configuration
+ * gtk_gst_player_config_set_user_agent:
+ * @config: a #GtkGstPlayer configuration
  * @agent: (nullable): the string to use as user agent
  *
  * Set the user agent to pass to the server if @player needs to connect
@@ -1618,7 +1618,7 @@ gst_player_get_config (GstPlayer * self)
  * Since: 1.10
  */
 void
-gst_player_config_set_user_agent (GstStructure * config, const gchar * agent)
+gtk_gst_player_config_set_user_agent (GstStructure * config, const gchar * agent)
 {
   g_return_if_fail (config != NULL);
   g_return_if_fail (agent != NULL);
@@ -1628,18 +1628,18 @@ gst_player_config_set_user_agent (GstStructure * config, const gchar * agent)
 }
 
 /**
- * gst_player_config_get_user_agent:
- * @config: a #GstPlayer configuration
+ * gtk_gst_player_config_get_user_agent:
+ * @config: a #GtkGstPlayer configuration
  *
  * Return the user agent which has been configured using
- * gst_player_config_set_user_agent() if any.
+ * gtk_gst_player_config_set_user_agent() if any.
  *
  * Returns: (transfer full) (nullable): the configured agent, or %NULL
  *
  * Since: 1.10
  */
 gchar *
-gst_player_config_get_user_agent (const GstStructure * config)
+gtk_gst_player_config_get_user_agent (const GstStructure * config)
 {
   gchar *agent = NULL;
 
@@ -1652,8 +1652,8 @@ gst_player_config_get_user_agent (const GstStructure * config)
 }
 
 /**
- * gst_player_config_set_position_update_interval:
- * @config: a #GstPlayer configuration
+ * gtk_gst_player_config_set_position_update_interval:
+ * @config: a #GtkGstPlayer configuration
  * @interval: interval in ms
  *
  * set interval in milliseconds between two position-updated signals.
@@ -1662,7 +1662,7 @@ gst_player_config_get_user_agent (const GstStructure * config)
  * Since: 1.10
  */
 void
-gst_player_config_set_position_update_interval (GstStructure * config,
+gtk_gst_player_config_set_position_update_interval (GstStructure * config,
     guint interval)
 {
   g_return_if_fail (config != NULL);
@@ -1673,15 +1673,15 @@ gst_player_config_set_position_update_interval (GstStructure * config,
 }
 
 /**
- * gst_player_config_get_position_update_interval:
- * @config: a #GstPlayer configuration
+ * gtk_gst_player_config_get_position_update_interval:
+ * @config: a #GtkGstPlayer configuration
  *
  * Returns: current position update interval in milliseconds
  *
  * Since: 1.10
  */
 guint
-gst_player_config_get_position_update_interval (const GstStructure * config)
+gtk_gst_player_config_get_position_update_interval (const GstStructure * config)
 {
   guint interval = DEFAULT_POSITION_UPDATE_INTERVAL_MS;
 
@@ -1694,8 +1694,8 @@ gst_player_config_get_position_update_interval (const GstStructure * config)
 }
 
 /**
- * gst_player_config_set_seek_accurate:
- * @config: a #GstPlayer configuration
+ * gtk_gst_player_config_set_seek_accurate:
+ * @config: a #GtkGstPlayer configuration
  * @accurate: accurate seek or not
  *
  * Enable or disable accurate seeking. When enabled, elements will try harder
@@ -1711,7 +1711,7 @@ gst_player_config_get_position_update_interval (const GstStructure * config)
  * Since: 1.12
  */
 void
-gst_player_config_set_seek_accurate (GstStructure * config, gboolean accurate)
+gtk_gst_player_config_set_seek_accurate (GstStructure * config, gboolean accurate)
 {
   g_return_if_fail (config != NULL);
 
@@ -1720,15 +1720,15 @@ gst_player_config_set_seek_accurate (GstStructure * config, gboolean accurate)
 }
 
 /**
- * gst_player_config_get_seek_accurate:
- * @config: a #GstPlayer configuration
+ * gtk_gst_player_config_get_seek_accurate:
+ * @config: a #GtkGstPlayer configuration
  *
  * Returns: %TRUE if accurate seeking is enabled
  *
  * Since: 1.12
  */
 gboolean
-gst_player_config_get_seek_accurate (const GstStructure * config)
+gtk_gst_player_config_get_seek_accurate (const GstStructure * config)
 {
   gboolean accurate = FALSE;
 
@@ -1741,8 +1741,8 @@ gst_player_config_get_seek_accurate (const GstStructure * config)
 }
 
 /**
- * gst_player_get_video_snapshot:
- * @player: #GstPlayer instance
+ * gtk_gst_player_get_video_snapshot:
+ * @player: #GtkGstPlayer instance
  * @format: output format of the video snapshot
  * @config: (allow-none): Additional configuration
  *
@@ -1751,18 +1751,18 @@ gst_player_config_get_seek_accurate (const GstStructure * config)
  * Currently supported settings are:
  * - width, height of type G_TYPE_INT
  * - pixel-aspect-ratio of type GST_TYPE_FRACTION
- *  Except for GST_PLAYER_THUMBNAIL_RAW_NATIVE format, if no config is set, pixel-aspect-ratio would be 1/1
+ *  Except for GTK_GST_PLAYER_THUMBNAIL_RAW_NATIVE format, if no config is set, pixel-aspect-ratio would be 1/1
  *
  * Returns: (transfer full) (nullable):  Current video snapshot sample or %NULL on failure
  *
  * Since: 1.12
  */
 GstSample *
-gst_player_get_video_snapshot (GstPlayer * self,
-    GstPlayerSnapshotFormat format, const GstStructure * config)
+gtk_gst_player_get_video_snapshot (GtkGstPlayer * self,
+    GtkGstPlayerSnapshotFormat format, const GstStructure * config)
 {
   g_return_val_if_fail (GST_IS_PLAYER (self), NULL);
 
-  return gst_play_get_video_snapshot (self->play,
-      (GstPlaySnapshotFormat) format, config);
+  return gtk_gst_play_get_video_snapshot (self->play,
+      (GtkGstPlaySnapshotFormat) format, config);
 }
diff --git a/subprojects/gstreamer-player-1.0/gst/player/gstplayer.h b/subprojects/gstreamer-player-1.0/gst/player/gstplayer.h
index e853ed8..b47d467 100644
--- a/subprojects/gstreamer-player-1.0/gst/player/gstplayer.h
+++ b/subprojects/gstreamer-player-1.0/gst/player/gstplayer.h
@@ -18,8 +18,8 @@
  * Boston, MA 02110-1301, USA.
  */
 
-#ifndef __GST_PLAYER_H__
-#define __GST_PLAYER_H__
+#ifndef __GTK_GST_PLAYER_H__
+#define __GTK_GST_PLAYER_H__
 
 #include <gst/gst.h>
 #include <gst/video/video.h>
@@ -31,276 +31,276 @@
 
 G_BEGIN_DECLS
 
-GST_PLAYER_API
-GType        gst_player_state_get_type                (void);
-#define      GST_TYPE_PLAYER_STATE                    (gst_player_state_get_type ())
+GTK_GST_PLAYER_API
+GType        gtk_gst_player_state_get_type                (void);
+#define      GST_TYPE_PLAYER_STATE                    (gtk_gst_player_state_get_type ())
 
 /**
- * GstPlayerState:
- * @GST_PLAYER_STATE_STOPPED: the player is stopped.
- * @GST_PLAYER_STATE_BUFFERING: the player is buffering.
- * @GST_PLAYER_STATE_PAUSED: the player is paused.
- * @GST_PLAYER_STATE_PLAYING: the player is currently playing a
+ * GtkGstPlayerState:
+ * @GTK_GST_PLAYER_STATE_STOPPED: the player is stopped.
+ * @GTK_GST_PLAYER_STATE_BUFFERING: the player is buffering.
+ * @GTK_GST_PLAYER_STATE_PAUSED: the player is paused.
+ * @GTK_GST_PLAYER_STATE_PLAYING: the player is currently playing a
  * stream.
  */
 typedef enum
 {
-  GST_PLAYER_STATE_STOPPED,
-  GST_PLAYER_STATE_BUFFERING,
-  GST_PLAYER_STATE_PAUSED,
-  GST_PLAYER_STATE_PLAYING
-} GstPlayerState;
+  GTK_GST_PLAYER_STATE_STOPPED,
+  GTK_GST_PLAYER_STATE_BUFFERING,
+  GTK_GST_PLAYER_STATE_PAUSED,
+  GTK_GST_PLAYER_STATE_PLAYING
+} GtkGstPlayerState;
 
-GST_PLAYER_API
-const gchar *gst_player_state_get_name                (GstPlayerState state);
+GTK_GST_PLAYER_API
+const gchar *gtk_gst_player_state_get_name                (GtkGstPlayerState state);
 
-GST_PLAYER_API
-GQuark       gst_player_error_quark                   (void);
+GTK_GST_PLAYER_API
+GQuark       gtk_gst_player_error_quark                   (void);
 
-GST_PLAYER_API
-GType        gst_player_error_get_type                (void);
-#define      GST_PLAYER_ERROR                         (gst_player_error_quark ())
-#define      GST_TYPE_PLAYER_ERROR                    (gst_player_error_get_type ())
+GTK_GST_PLAYER_API
+GType        gtk_gst_player_error_get_type                (void);
+#define      GTK_GST_PLAYER_ERROR                         (gtk_gst_player_error_quark ())
+#define      GST_TYPE_PLAYER_ERROR                    (gtk_gst_player_error_get_type ())
 
 /**
- * GstPlayerError:
- * @GST_PLAYER_ERROR_FAILED: generic error.
+ * GtkGstPlayerError:
+ * @GTK_GST_PLAYER_ERROR_FAILED: generic error.
  */
 typedef enum {
-  GST_PLAYER_ERROR_FAILED = 0
-} GstPlayerError;
+  GTK_GST_PLAYER_ERROR_FAILED = 0
+} GtkGstPlayerError;
 
-GST_PLAYER_API
-const gchar *gst_player_error_get_name                (GstPlayerError error);
+GTK_GST_PLAYER_API
+const gchar *gtk_gst_player_error_get_name                (GtkGstPlayerError error);
 
-GST_PLAYER_API
-GType gst_player_color_balance_type_get_type          (void);
-#define GST_TYPE_PLAYER_COLOR_BALANCE_TYPE            (gst_player_color_balance_type_get_type ())
+GTK_GST_PLAYER_API
+GType gtk_gst_player_color_balance_type_get_type          (void);
+#define GST_TYPE_PLAYER_COLOR_BALANCE_TYPE            (gtk_gst_player_color_balance_type_get_type ())
 
 /**
- * GstPlayerColorBalanceType:
- * @GST_PLAYER_COLOR_BALANCE_BRIGHTNESS: brightness or black level.
- * @GST_PLAYER_COLOR_BALANCE_CONTRAST: contrast or luma gain.
- * @GST_PLAYER_COLOR_BALANCE_SATURATION: color saturation or chroma
+ * GtkGstPlayerColorBalanceType:
+ * @GTK_GST_PLAYER_COLOR_BALANCE_BRIGHTNESS: brightness or black level.
+ * @GTK_GST_PLAYER_COLOR_BALANCE_CONTRAST: contrast or luma gain.
+ * @GTK_GST_PLAYER_COLOR_BALANCE_SATURATION: color saturation or chroma
  * gain.
- * @GST_PLAYER_COLOR_BALANCE_HUE: hue or color balance.
+ * @GTK_GST_PLAYER_COLOR_BALANCE_HUE: hue or color balance.
  */
 typedef enum
 {
-  GST_PLAYER_COLOR_BALANCE_BRIGHTNESS,
-  GST_PLAYER_COLOR_BALANCE_CONTRAST,
-  GST_PLAYER_COLOR_BALANCE_SATURATION,
-  GST_PLAYER_COLOR_BALANCE_HUE,
-} GstPlayerColorBalanceType;
+  GTK_GST_PLAYER_COLOR_BALANCE_BRIGHTNESS,
+  GTK_GST_PLAYER_COLOR_BALANCE_CONTRAST,
+  GTK_GST_PLAYER_COLOR_BALANCE_SATURATION,
+  GTK_GST_PLAYER_COLOR_BALANCE_HUE,
+} GtkGstPlayerColorBalanceType;
 
-GST_PLAYER_API
-const gchar *gst_player_color_balance_type_get_name   (GstPlayerColorBalanceType type);
+GTK_GST_PLAYER_API
+const gchar *gtk_gst_player_color_balance_type_get_name   (GtkGstPlayerColorBalanceType type);
 
-#define GST_TYPE_PLAYER             (gst_player_get_type ())
+#define GST_TYPE_PLAYER             (gtk_gst_player_get_type ())
 #define GST_IS_PLAYER(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_PLAYER))
 #define GST_IS_PLAYER_CLASS(klass)  (G_TYPE_CHECK_CLASS_TYPE ((klass), GST_TYPE_PLAYER))
-#define GST_PLAYER_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GST_TYPE_PLAYER, GstPlayerClass))
-#define GST_PLAYER(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PLAYER, GstPlayer))
-#define GST_PLAYER_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_PLAYER, GstPlayerClass))
-#define GST_PLAYER_CAST(obj)        ((GstPlayer*)(obj))
+#define GTK_GST_PLAYER_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GST_TYPE_PLAYER, GtkGstPlayerClass))
+#define GST_PLAYER(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_PLAYER, GtkGstPlayer))
+#define GTK_GST_PLAYER_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_PLAYER, GtkGstPlayerClass))
+#define GTK_GST_PLAYER_CAST(obj)        ((GtkGstPlayer*)(obj))
 
 #ifdef G_DEFINE_AUTOPTR_CLEANUP_FUNC
-G_DEFINE_AUTOPTR_CLEANUP_FUNC(GstPlayer, gst_object_unref)
+G_DEFINE_AUTOPTR_CLEANUP_FUNC(GtkGstPlayer, gst_object_unref)
 #endif
 
-GST_PLAYER_API
-GType        gst_player_get_type                      (void);
+GTK_GST_PLAYER_API
+GType        gtk_gst_player_get_type                      (void);
 
-GST_PLAYER_API
-GstPlayer *  gst_player_new                           (GstPlayerVideoRenderer * video_renderer, GstPlayerSignalDispatcher * signal_dispatcher);
+GTK_GST_PLAYER_API
+GtkGstPlayer *  gtk_gst_player_new                           (GtkGstPlayerVideoRenderer * video_renderer, GtkGstPlayerSignalDispatcher * signal_dispatcher);
 
-GST_PLAYER_API
-void         gst_player_play                          (GstPlayer    * player);
+GTK_GST_PLAYER_API
+void         gtk_gst_player_play                          (GtkGstPlayer    * player);
 
-GST_PLAYER_API
-void         gst_player_pause                         (GstPlayer    * player);
+GTK_GST_PLAYER_API
+void         gtk_gst_player_pause                         (GtkGstPlayer    * player);
 
-GST_PLAYER_API
-void         gst_player_stop                          (GstPlayer    * player);
+GTK_GST_PLAYER_API
+void         gtk_gst_player_stop                          (GtkGstPlayer    * player);
 
-GST_PLAYER_API
-void         gst_player_seek                          (GstPlayer    * player,
+GTK_GST_PLAYER_API
+void         gtk_gst_player_seek                          (GtkGstPlayer    * player,
                                                        GstClockTime   position);
 
-GST_PLAYER_API
-void         gst_player_set_rate                      (GstPlayer    * player,
+GTK_GST_PLAYER_API
+void         gtk_gst_player_set_rate                      (GtkGstPlayer    * player,
                                                        gdouble        rate);
 
-GST_PLAYER_API
-gdouble      gst_player_get_rate                      (GstPlayer    * player);
+GTK_GST_PLAYER_API
+gdouble      gtk_gst_player_get_rate                      (GtkGstPlayer    * player);
 
-GST_PLAYER_API
-gchar *      gst_player_get_uri                       (GstPlayer    * player);
+GTK_GST_PLAYER_API
+gchar *      gtk_gst_player_get_uri                       (GtkGstPlayer    * player);
 
-GST_PLAYER_API
-void         gst_player_set_uri                       (GstPlayer    * player,
+GTK_GST_PLAYER_API
+void         gtk_gst_player_set_uri                       (GtkGstPlayer    * player,
                                                        const gchar  * uri);
 
-GST_PLAYER_API
-gchar *      gst_player_get_subtitle_uri              (GstPlayer    * player);
+GTK_GST_PLAYER_API
+gchar *      gtk_gst_player_get_subtitle_uri              (GtkGstPlayer    * player);
 
-GST_PLAYER_API
-void         gst_player_set_subtitle_uri              (GstPlayer    * player,
+GTK_GST_PLAYER_API
+void         gtk_gst_player_set_subtitle_uri              (GtkGstPlayer    * player,
                                                        const gchar *uri);
 
-GST_PLAYER_API
-GstClockTime gst_player_get_position                  (GstPlayer    * player);
+GTK_GST_PLAYER_API
+GstClockTime gtk_gst_player_get_position                  (GtkGstPlayer    * player);
 
-GST_PLAYER_API
-GstClockTime gst_player_get_duration                  (GstPlayer    * player);
+GTK_GST_PLAYER_API
+GstClockTime gtk_gst_player_get_duration                  (GtkGstPlayer    * player);
 
-GST_PLAYER_API
-gdouble      gst_player_get_volume                    (GstPlayer    * player);
+GTK_GST_PLAYER_API
+gdouble      gtk_gst_player_get_volume                    (GtkGstPlayer    * player);
 
-GST_PLAYER_API
-void         gst_player_set_volume                    (GstPlayer    * player,
+GTK_GST_PLAYER_API
+void         gtk_gst_player_set_volume                    (GtkGstPlayer    * player,
                                                        gdouble        val);
 
-GST_PLAYER_API
-gboolean     gst_player_get_mute                      (GstPlayer    * player);
+GTK_GST_PLAYER_API
+gboolean     gtk_gst_player_get_mute                      (GtkGstPlayer    * player);
 
-GST_PLAYER_API
-void         gst_player_set_mute                      (GstPlayer    * player,
+GTK_GST_PLAYER_API
+void         gtk_gst_player_set_mute                      (GtkGstPlayer    * player,
                                                        gboolean       val);
 
-GST_PLAYER_API
-GstElement * gst_player_get_pipeline                  (GstPlayer    * player);
+GTK_GST_PLAYER_API
+GstElement * gtk_gst_player_get_pipeline                  (GtkGstPlayer    * player);
 
-GST_PLAYER_API
-void         gst_player_set_video_track_enabled       (GstPlayer    * player,
+GTK_GST_PLAYER_API
+void         gtk_gst_player_set_video_track_enabled       (GtkGstPlayer    * player,
                                                        gboolean enabled);
 
-GST_PLAYER_API
-void         gst_player_set_audio_track_enabled       (GstPlayer    * player,
+GTK_GST_PLAYER_API
+void         gtk_gst_player_set_audio_track_enabled       (GtkGstPlayer    * player,
                                                        gboolean enabled);
 
-GST_PLAYER_API
-void         gst_player_set_subtitle_track_enabled    (GstPlayer    * player,
+GTK_GST_PLAYER_API
+void         gtk_gst_player_set_subtitle_track_enabled    (GtkGstPlayer    * player,
                                                        gboolean enabled);
 
-GST_PLAYER_API
-gboolean     gst_player_set_audio_track               (GstPlayer    *player,
+GTK_GST_PLAYER_API
+gboolean     gtk_gst_player_set_audio_track               (GtkGstPlayer    *player,
                                                        gint stream_index);
 
-GST_PLAYER_API
-gboolean     gst_player_set_video_track               (GstPlayer    *player,
+GTK_GST_PLAYER_API
+gboolean     gtk_gst_player_set_video_track               (GtkGstPlayer    *player,
                                                        gint stream_index);
 
-GST_PLAYER_API
-gboolean     gst_player_set_subtitle_track            (GstPlayer    *player,
+GTK_GST_PLAYER_API
+gboolean     gtk_gst_player_set_subtitle_track            (GtkGstPlayer    *player,
                                                        gint stream_index);
 
-GST_PLAYER_API
-GstPlayerMediaInfo *    gst_player_get_media_info     (GstPlayer * player);
+GTK_GST_PLAYER_API
+GtkGstPlayerMediaInfo *    gtk_gst_player_get_media_info     (GtkGstPlayer * player);
 
-GST_PLAYER_API
-GstPlayerAudioInfo *    gst_player_get_current_audio_track (GstPlayer * player);
+GTK_GST_PLAYER_API
+GtkGstPlayerAudioInfo *    gtk_gst_player_get_current_audio_track (GtkGstPlayer * player);
 
-GST_PLAYER_API
-GstPlayerVideoInfo *    gst_player_get_current_video_track (GstPlayer * player);
+GTK_GST_PLAYER_API
+GtkGstPlayerVideoInfo *    gtk_gst_player_get_current_video_track (GtkGstPlayer * player);
 
-GST_PLAYER_API
-GstPlayerSubtitleInfo * gst_player_get_current_subtitle_track (GstPlayer * player);
+GTK_GST_PLAYER_API
+GtkGstPlayerSubtitleInfo * gtk_gst_player_get_current_subtitle_track (GtkGstPlayer * player);
 
-GST_PLAYER_API
-gboolean     gst_player_set_visualization             (GstPlayer    * player,
+GTK_GST_PLAYER_API
+gboolean     gtk_gst_player_set_visualization             (GtkGstPlayer    * player,
                                                        const gchar *name);
 
-GST_PLAYER_API
-void         gst_player_set_visualization_enabled     (GstPlayer    * player,
+GTK_GST_PLAYER_API
+void         gtk_gst_player_set_visualization_enabled     (GtkGstPlayer    * player,
                                                        gboolean enabled);
 
-GST_PLAYER_API
-gchar *      gst_player_get_current_visualization     (GstPlayer    * player);
+GTK_GST_PLAYER_API
+gchar *      gtk_gst_player_get_current_visualization     (GtkGstPlayer    * player);
 
-GST_PLAYER_API
-gboolean     gst_player_has_color_balance             (GstPlayer    * player);
+GTK_GST_PLAYER_API
+gboolean     gtk_gst_player_has_color_balance             (GtkGstPlayer    * player);
 
-GST_PLAYER_API
-void         gst_player_set_color_balance             (GstPlayer    * player,
-                                                       GstPlayerColorBalanceType type,
+GTK_GST_PLAYER_API
+void         gtk_gst_player_set_color_balance             (GtkGstPlayer    * player,
+                                                       GtkGstPlayerColorBalanceType type,
                                                        gdouble value);
 
-GST_PLAYER_API
-gdouble      gst_player_get_color_balance             (GstPlayer    * player,
-                                                       GstPlayerColorBalanceType type);
+GTK_GST_PLAYER_API
+gdouble      gtk_gst_player_get_color_balance             (GtkGstPlayer    * player,
+                                                       GtkGstPlayerColorBalanceType type);
 
 
-GST_PLAYER_API
-GstVideoMultiviewFramePacking gst_player_get_multiview_mode (GstPlayer    * player);
+GTK_GST_PLAYER_API
+GstVideoMultiviewFramePacking gtk_gst_player_get_multiview_mode (GtkGstPlayer    * player);
 
-GST_PLAYER_API
-void                     gst_player_set_multiview_mode (GstPlayer    * player,
+GTK_GST_PLAYER_API
+void                     gtk_gst_player_set_multiview_mode (GtkGstPlayer    * player,
                                                         GstVideoMultiviewFramePacking mode);
 
-GST_PLAYER_API
-GstVideoMultiviewFlags  gst_player_get_multiview_flags  (GstPlayer  * player);
+GTK_GST_PLAYER_API
+GstVideoMultiviewFlags  gtk_gst_player_get_multiview_flags  (GtkGstPlayer  * player);
 
-GST_PLAYER_API
-void                    gst_player_set_multiview_flags  (GstPlayer  * player,
+GTK_GST_PLAYER_API
+void                    gtk_gst_player_set_multiview_flags  (GtkGstPlayer  * player,
                                                          GstVideoMultiviewFlags flags);
 
-GST_PLAYER_API
-gint64       gst_player_get_audio_video_offset        (GstPlayer    * player);
+GTK_GST_PLAYER_API
+gint64       gtk_gst_player_get_audio_video_offset        (GtkGstPlayer    * player);
 
-GST_PLAYER_API
-void         gst_player_set_audio_video_offset        (GstPlayer    * player,
+GTK_GST_PLAYER_API
+void         gtk_gst_player_set_audio_video_offset        (GtkGstPlayer    * player,
                                                        gint64 offset);
 
-GST_PLAYER_API
-gint64       gst_player_get_subtitle_video_offset        (GstPlayer    * player);
+GTK_GST_PLAYER_API
+gint64       gtk_gst_player_get_subtitle_video_offset        (GtkGstPlayer    * player);
 
-GST_PLAYER_API
-void         gst_player_set_subtitle_video_offset        (GstPlayer    * player,
+GTK_GST_PLAYER_API
+void         gtk_gst_player_set_subtitle_video_offset        (GtkGstPlayer    * player,
                                                           gint64 offset);
 
-GST_PLAYER_API
-gboolean       gst_player_set_config                  (GstPlayer * player,
+GTK_GST_PLAYER_API
+gboolean       gtk_gst_player_set_config                  (GtkGstPlayer * player,
                                                        GstStructure * config);
 
-GST_PLAYER_API
-GstStructure * gst_player_get_config                  (GstPlayer * player);
+GTK_GST_PLAYER_API
+GstStructure * gtk_gst_player_get_config                  (GtkGstPlayer * player);
 
 /* helpers for configuring the config structure */
 
-GST_PLAYER_API
-void           gst_player_config_set_user_agent       (GstStructure * config,
+GTK_GST_PLAYER_API
+void           gtk_gst_player_config_set_user_agent       (GstStructure * config,
                                                        const gchar * agent);
 
-GST_PLAYER_API
-gchar *        gst_player_config_get_user_agent       (const GstStructure * config);
+GTK_GST_PLAYER_API
+gchar *        gtk_gst_player_config_get_user_agent       (const GstStructure * config);
 
-GST_PLAYER_API
-void           gst_player_config_set_position_update_interval  (GstStructure * config,
+GTK_GST_PLAYER_API
+void           gtk_gst_player_config_set_position_update_interval  (GstStructure * config,
                                                                 guint          interval);
 
-GST_PLAYER_API
-guint          gst_player_config_get_position_update_interval  (const GstStructure * config);
+GTK_GST_PLAYER_API
+guint          gtk_gst_player_config_get_position_update_interval  (const GstStructure * config);
 
-GST_PLAYER_API
-void           gst_player_config_set_seek_accurate (GstStructure * config, gboolean accurate);
+GTK_GST_PLAYER_API
+void           gtk_gst_player_config_set_seek_accurate (GstStructure * config, gboolean accurate);
 
-GST_PLAYER_API
-gboolean       gst_player_config_get_seek_accurate (const GstStructure * config);
+GTK_GST_PLAYER_API
+gboolean       gtk_gst_player_config_get_seek_accurate (const GstStructure * config);
 
 typedef enum
 {
-  GST_PLAYER_THUMBNAIL_RAW_NATIVE = 0,
-  GST_PLAYER_THUMBNAIL_RAW_xRGB,
-  GST_PLAYER_THUMBNAIL_RAW_BGRx,
-  GST_PLAYER_THUMBNAIL_JPG,
-  GST_PLAYER_THUMBNAIL_PNG
-} GstPlayerSnapshotFormat;
+  GTK_GST_PLAYER_THUMBNAIL_RAW_NATIVE = 0,
+  GTK_GST_PLAYER_THUMBNAIL_RAW_xRGB,
+  GTK_GST_PLAYER_THUMBNAIL_RAW_BGRx,
+  GTK_GST_PLAYER_THUMBNAIL_JPG,
+  GTK_GST_PLAYER_THUMBNAIL_PNG
+} GtkGstPlayerSnapshotFormat;
 
-GST_PLAYER_API
-GstSample * gst_player_get_video_snapshot (GstPlayer * player,
-    GstPlayerSnapshotFormat format, const GstStructure * config);
+GTK_GST_PLAYER_API
+GstSample * gtk_gst_player_get_video_snapshot (GtkGstPlayer * player,
+    GtkGstPlayerSnapshotFormat format, const GstStructure * config);
 
 G_END_DECLS
 
-#endif /* __GST_PLAYER_H__ */
+#endif /* __GTK_GST_PLAYER_H__ */
diff --git a/subprojects/gstreamer-player-1.0/gst/player/player-prelude.h b/subprojects/gstreamer-player-1.0/gst/player/player-prelude.h
index 4b70469..554b5a0 100644
--- a/subprojects/gstreamer-player-1.0/gst/player/player-prelude.h
+++ b/subprojects/gstreamer-player-1.0/gst/player/player-prelude.h
@@ -19,25 +19,25 @@
  * Boston, MA 02110-1301, USA.
  */
 
-#ifndef __GST_PLAYER_PRELUDE_H__
-#define __GST_PLAYER_PRELUDE_H__
+#ifndef __GTK_GST_PLAYER_PRELUDE_H__
+#define __GTK_GST_PLAYER_PRELUDE_H__
 
 #include <gst/gst.h>
 
-#ifndef GST_PLAYER_API
+#ifndef GTK_GST_PLAYER_API
 # ifdef BUILDING_GST_PLAYER
-#  define GST_PLAYER_API GST_API_EXPORT         /* from config.h */
+#  define GTK_GST_PLAYER_API GST_API_EXPORT         /* from config.h */
 # else
-#  define GST_PLAYER_API GST_API_IMPORT
+#  define GTK_GST_PLAYER_API GST_API_IMPORT
 # endif
 #endif
 
 #ifndef GST_DISABLE_DEPRECATED
-#define GST_PLAYER_DEPRECATED GST_PLAYER_API
-#define GST_PLAYER_DEPRECATED_FOR(f) GST_PLAYER_API
+#define GTK_GST_PLAYER_DEPRECATED GTK_GST_PLAYER_API
+#define GTK_GST_PLAYER_DEPRECATED_FOR(f) GTK_GST_PLAYER_API
 #else
-#define GST_PLAYER_DEPRECATED G_DEPRECATED GST_PLAYER_API
-#define GST_PLAYER_DEPRECATED_FOR(f) G_DEPRECATED_FOR(f) GST_PLAYER_API
+#define GTK_GST_PLAYER_DEPRECATED G_DEPRECATED GTK_GST_PLAYER_API
+#define GTK_GST_PLAYER_DEPRECATED_FOR(f) G_DEPRECATED_FOR(f) GTK_GST_PLAYER_API
 #endif
 
-#endif /* __GST_PLAYER_PRELUDE_H__ */
+#endif /* __GTK_GST_PLAYER_PRELUDE_H__ */
